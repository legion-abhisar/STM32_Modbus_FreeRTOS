
Modbus_freertos_lwip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013090  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d58  08013240  08013240  00023240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015f98  08015f98  0003008c  2**0
                  CONTENTS
  4 .ARM          00000008  08015f98  08015f98  00025f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015fa0  08015fa0  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015fa0  08015fa0  00025fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015fa4  08015fa4  00025fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08015fa8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003008c  2**0
                  CONTENTS
 10 .bss          0000f274  2000008c  2000008c  0003008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000f300  2000f300  0003008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002a36b  00000000  00000000  000300ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006ecd  00000000  00000000  0005a46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000020c0  00000000  00000000  00061338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000019ce  00000000  00000000  000633f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00010468  00000000  00000000  00064dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00031d61  00000000  00000000  0007522e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fe680  00000000  00000000  000a6f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008fa4  00000000  00000000  001a5610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  001ae5b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013228 	.word	0x08013228

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	08013228 	.word	0x08013228

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fc34 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f816 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f884 	bl	80006a4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800059c:	f003 ff80 	bl	80044a0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a0:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <main+0x2c>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	4805      	ldr	r0, [pc, #20]	; (80005bc <main+0x30>)
 80005a6:	f003 ffda 	bl	800455e <osThreadNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <main+0x34>)
 80005ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005b0:	f003 ff9a 	bl	80044e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <main+0x28>
 80005b6:	bf00      	nop
 80005b8:	08015d50 	.word	0x08015d50
 80005bc:	08000749 	.word	0x08000749
 80005c0:	200000a8 	.word	0x200000a8

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f011 ff25 	bl	8012422 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b2b      	ldr	r3, [pc, #172]	; (800069c <SystemClock_Config+0xd8>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a2a      	ldr	r2, [pc, #168]	; (800069c <SystemClock_Config+0xd8>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b28      	ldr	r3, [pc, #160]	; (800069c <SystemClock_Config+0xd8>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemClock_Config+0xdc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a24      	ldr	r2, [pc, #144]	; (80006a0 <SystemClock_Config+0xdc>)
 800060e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemClock_Config+0xdc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000638:	23b4      	movs	r3, #180	; 0xb4
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f002 f977 	bl	800293c <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000654:	f000 f894 	bl	8000780 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000658:	f002 f920 	bl	800289c <HAL_PWREx_EnableOverDrive>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000662:	f000 f88d 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	2302      	movs	r3, #2
 800066c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000672:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000676:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2105      	movs	r1, #5
 8000684:	4618      	mov	r0, r3
 8000686:	f002 fbd1 	bl	8002e2c <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000690:	f000 f876 	bl	8000780 <Error_Handler>
  }
}
 8000694:	bf00      	nop
 8000696:	3750      	adds	r7, #80	; 0x50
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b087      	sub	sp, #28
 80006a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	4b25      	ldr	r3, [pc, #148]	; (8000744 <MX_GPIO_Init+0xa0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a24      	ldr	r2, [pc, #144]	; (8000744 <MX_GPIO_Init+0xa0>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b22      	ldr	r3, [pc, #136]	; (8000744 <MX_GPIO_Init+0xa0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
 80006ca:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <MX_GPIO_Init+0xa0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a1d      	ldr	r2, [pc, #116]	; (8000744 <MX_GPIO_Init+0xa0>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <MX_GPIO_Init+0xa0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <MX_GPIO_Init+0xa0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a16      	ldr	r2, [pc, #88]	; (8000744 <MX_GPIO_Init+0xa0>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_GPIO_Init+0xa0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_GPIO_Init+0xa0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a0f      	ldr	r2, [pc, #60]	; (8000744 <MX_GPIO_Init+0xa0>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MX_GPIO_Init+0xa0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_GPIO_Init+0xa0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <MX_GPIO_Init+0xa0>)
 8000724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_GPIO_Init+0xa0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000736:	bf00      	nop
 8000738:	371c      	adds	r7, #28
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000750:	f003 f84c 	bl	80037ec <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000754:	2001      	movs	r0, #1
 8000756:	f003 ff94 	bl	8004682 <osDelay>
 800075a:	e7fb      	b.n	8000754 <StartDefaultTask+0xc>

0800075c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a04      	ldr	r2, [pc, #16]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d101      	bne.n	8000772 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800076e:	f000 fb67 	bl	8000e40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40001000 	.word	0x40001000

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	e7fe      	b.n	8000788 <Error_Handler+0x8>
	...

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_MspInit+0x54>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <HAL_MspInit+0x54>)
 800079c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a0:	6453      	str	r3, [r2, #68]	; 0x44
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <HAL_MspInit+0x54>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <HAL_MspInit+0x54>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <HAL_MspInit+0x54>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007bc:	6413      	str	r3, [r2, #64]	; 0x40
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <HAL_MspInit+0x54>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	210f      	movs	r1, #15
 80007ce:	f06f 0001 	mvn.w	r0, #1
 80007d2:	f000 fc31 	bl	8001038 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800

080007e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <HAL_InitTick+0xe4>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	4a32      	ldr	r2, [pc, #200]	; (80008c8 <HAL_InitTick+0xe4>)
 80007fe:	f043 0310 	orr.w	r3, r3, #16
 8000802:	6413      	str	r3, [r2, #64]	; 0x40
 8000804:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <HAL_InitTick+0xe4>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	f003 0310 	and.w	r3, r3, #16
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000810:	f107 0210 	add.w	r2, r7, #16
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f002 fd12 	bl	8003244 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000820:	6a3b      	ldr	r3, [r7, #32]
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000826:	2b00      	cmp	r3, #0
 8000828:	d103      	bne.n	8000832 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800082a:	f002 fcf7 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 800082e:	6378      	str	r0, [r7, #52]	; 0x34
 8000830:	e004      	b.n	800083c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000832:	f002 fcf3 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 8000836:	4603      	mov	r3, r0
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800083c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800083e:	4a23      	ldr	r2, [pc, #140]	; (80008cc <HAL_InitTick+0xe8>)
 8000840:	fba2 2303 	umull	r2, r3, r2, r3
 8000844:	0c9b      	lsrs	r3, r3, #18
 8000846:	3b01      	subs	r3, #1
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800084a:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <HAL_InitTick+0xec>)
 800084c:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <HAL_InitTick+0xf0>)
 800084e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <HAL_InitTick+0xec>)
 8000852:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000856:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000858:	4a1d      	ldr	r2, [pc, #116]	; (80008d0 <HAL_InitTick+0xec>)
 800085a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800085c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <HAL_InitTick+0xec>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <HAL_InitTick+0xec>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <HAL_InitTick+0xec>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000870:	4817      	ldr	r0, [pc, #92]	; (80008d0 <HAL_InitTick+0xec>)
 8000872:	f002 fd19 	bl	80032a8 <HAL_TIM_Base_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800087c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000880:	2b00      	cmp	r3, #0
 8000882:	d11b      	bne.n	80008bc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000884:	4812      	ldr	r0, [pc, #72]	; (80008d0 <HAL_InitTick+0xec>)
 8000886:	f002 fd69 	bl	800335c <HAL_TIM_Base_Start_IT>
 800088a:	4603      	mov	r3, r0
 800088c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000890:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000894:	2b00      	cmp	r3, #0
 8000896:	d111      	bne.n	80008bc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000898:	2036      	movs	r0, #54	; 0x36
 800089a:	f000 fbe9 	bl	8001070 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d808      	bhi.n	80008b6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80008a4:	2200      	movs	r2, #0
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	2036      	movs	r0, #54	; 0x36
 80008aa:	f000 fbc5 	bl	8001038 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <HAL_InitTick+0xf4>)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	e002      	b.n	80008bc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3738      	adds	r7, #56	; 0x38
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	431bde83 	.word	0x431bde83
 80008d0:	200000ac 	.word	0x200000ac
 80008d4:	40001000 	.word	0x40001000
 80008d8:	20000004 	.word	0x20000004

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e0:	e7fe      	b.n	80008e0 <NMI_Handler+0x4>

080008e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <HardFault_Handler+0x4>

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <MemManage_Handler+0x4>

080008ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <TIM6_DAC_IRQHandler+0x10>)
 800090e:	f002 fd95 	bl	800343c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000ac 	.word	0x200000ac

0800091c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <ETH_IRQHandler+0x10>)
 8000922:	f000 ff39 	bl	8001798 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20004c40 	.word	0x20004c40

08000930 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return 1;
 8000934:	2301      	movs	r3, #1
}
 8000936:	4618      	mov	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <_kill>:

int _kill(int pid, int sig)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <_kill+0x20>)
 800094c:	2216      	movs	r2, #22
 800094e:	601a      	str	r2, [r3, #0]
  return -1;
 8000950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000954:	4618      	mov	r0, r3
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	2000f2f0 	.word	0x2000f2f0

08000964 <_exit>:

void _exit (int status)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800096c:	f04f 31ff 	mov.w	r1, #4294967295
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ffe5 	bl	8000940 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000976:	e7fe      	b.n	8000976 <_exit+0x12>

08000978 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	e00a      	b.n	80009a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800098a:	f3af 8000 	nop.w
 800098e:	4601      	mov	r1, r0
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	60ba      	str	r2, [r7, #8]
 8000996:	b2ca      	uxtb	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	3301      	adds	r3, #1
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	dbf0      	blt.n	800098a <_read+0x12>
  }

  return len;
 80009a8:	687b      	ldr	r3, [r7, #4]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b086      	sub	sp, #24
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	e009      	b.n	80009d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	1c5a      	adds	r2, r3, #1
 80009c8:	60ba      	str	r2, [r7, #8]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	3301      	adds	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	429a      	cmp	r2, r3
 80009de:	dbf1      	blt.n	80009c4 <_write+0x12>
  }
  return len;
 80009e0:	687b      	ldr	r3, [r7, #4]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <_close>:

int _close(int file)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a12:	605a      	str	r2, [r3, #4]
  return 0;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <_isatty>:

int _isatty(int file)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a2a:	2301      	movs	r3, #1
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b087      	sub	sp, #28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <_sbrk+0x5c>)
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <_sbrk+0x60>)
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <_sbrk+0x64>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <_sbrk+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d205      	bcs.n	8000a90 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <_sbrk+0x6c>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	e009      	b.n	8000aa4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <_sbrk+0x64>)
 8000aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	371c      	adds	r7, #28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	20030000 	.word	0x20030000
 8000ab4:	00000400 	.word	0x00000400
 8000ab8:	200000f4 	.word	0x200000f4
 8000abc:	2000f300 	.word	0x2000f300
 8000ac0:	2000f2f0 	.word	0x2000f2f0

08000ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <SystemInit+0x20>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <SystemInit+0x20>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aec:	f7ff ffea 	bl	8000ac4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000af2:	490d      	ldr	r1, [pc, #52]	; (8000b28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af4:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b08:	4c0a      	ldr	r4, [pc, #40]	; (8000b34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b16:	f011 fd29 	bl	801256c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b1a:	f7ff fd37 	bl	800058c <main>
  bx  lr    
 8000b1e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b20:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000b2c:	08015fa8 	.word	0x08015fa8
  ldr r2, =_sbss
 8000b30:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000b34:	2000f300 	.word	0x2000f300

08000b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC_IRQHandler>

08000b3a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d00b      	beq.n	8000b62 <LAN8742_RegisterBusIO+0x28>
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d007      	beq.n	8000b62 <LAN8742_RegisterBusIO+0x28>
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <LAN8742_RegisterBusIO+0x28>
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	691b      	ldr	r3, [r3, #16]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d102      	bne.n	8000b68 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
 8000b66:	e014      	b.n	8000b92 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68da      	ldr	r2, [r3, #12]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	689a      	ldr	r2, [r3, #8]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	691a      	ldr	r2, [r3, #16]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d17c      	bne.n	8000cb8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d002      	beq.n	8000bcc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2220      	movs	r2, #32
 8000bd0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	e01c      	b.n	8000c12 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	f107 0208 	add.w	r2, r7, #8
 8000be0:	2112      	movs	r1, #18
 8000be2:	6978      	ldr	r0, [r7, #20]
 8000be4:	4798      	blx	r3
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	da03      	bge.n	8000bf4 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000bec:	f06f 0304 	mvn.w	r3, #4
 8000bf0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000bf2:	e00b      	b.n	8000c0c <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	f003 031f 	and.w	r3, r3, #31
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d105      	bne.n	8000c0c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
         break;
 8000c0a:	e005      	b.n	8000c18 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	2b1f      	cmp	r3, #31
 8000c16:	d9df      	bls.n	8000bd8 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b1f      	cmp	r3, #31
 8000c1e:	d902      	bls.n	8000c26 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000c20:	f06f 0302 	mvn.w	r3, #2
 8000c24:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d145      	bne.n	8000cb8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	6810      	ldr	r0, [r2, #0]
 8000c34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4798      	blx	r3
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db37      	blt.n	8000cb2 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	6810      	ldr	r0, [r2, #0]
 8000c4a:	f107 0208 	add.w	r2, r7, #8
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4798      	blx	r3
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db28      	blt.n	8000caa <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4798      	blx	r3
 8000c5e:	4603      	mov	r3, r0
 8000c60:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000c62:	e01c      	b.n	8000c9e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4798      	blx	r3
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c76:	d80e      	bhi.n	8000c96 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	6810      	ldr	r0, [r2, #0]
 8000c80:	f107 0208 	add.w	r2, r7, #8
 8000c84:	2100      	movs	r1, #0
 8000c86:	4798      	blx	r3
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	da07      	bge.n	8000c9e <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8000c8e:	f06f 0304 	mvn.w	r3, #4
 8000c92:	613b      	str	r3, [r7, #16]
                 break;
 8000c94:	e010      	b.n	8000cb8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000c96:	f06f 0301 	mvn.w	r3, #1
 8000c9a:	613b      	str	r3, [r7, #16]
               break;
 8000c9c:	e00c      	b.n	8000cb8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1dd      	bne.n	8000c64 <LAN8742_Init+0xc6>
 8000ca8:	e006      	b.n	8000cb8 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000caa:	f06f 0304 	mvn.w	r3, #4
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	e002      	b.n	8000cb8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000cb2:	f06f 0303 	mvn.w	r3, #3
 8000cb6:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d112      	bne.n	8000ce4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	4798      	blx	r3
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000cc8:	bf00      	nop
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	4798      	blx	r3
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cdc:	d9f5      	bls.n	8000cca <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	605a      	str	r2, [r3, #4]
   }

   return status;
 8000ce4:	693b      	ldr	r3, [r7, #16]
 }
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b084      	sub	sp, #16
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6810      	ldr	r0, [r2, #0]
 8000d02:	f107 020c 	add.w	r2, r7, #12
 8000d06:	2101      	movs	r1, #1
 8000d08:	4798      	blx	r3
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	da02      	bge.n	8000d16 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d10:	f06f 0304 	mvn.w	r3, #4
 8000d14:	e06e      	b.n	8000df4 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	6810      	ldr	r0, [r2, #0]
 8000d1e:	f107 020c 	add.w	r2, r7, #12
 8000d22:	2101      	movs	r1, #1
 8000d24:	4798      	blx	r3
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	da02      	bge.n	8000d32 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d2c:	f06f 0304 	mvn.w	r3, #4
 8000d30:	e060      	b.n	8000df4 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d101      	bne.n	8000d40 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e059      	b.n	8000df4 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	6810      	ldr	r0, [r2, #0]
 8000d48:	f107 020c 	add.w	r2, r7, #12
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4798      	blx	r3
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	da02      	bge.n	8000d5c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d56:	f06f 0304 	mvn.w	r3, #4
 8000d5a:	e04b      	b.n	8000df4 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d11b      	bne.n	8000d9e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d006      	beq.n	8000d7e <LAN8742_GetLinkState+0x90>
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	e03a      	b.n	8000df4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e033      	b.n	8000df4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000d96:	2304      	movs	r3, #4
 8000d98:	e02c      	b.n	8000df4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	e02a      	b.n	8000df4 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	6810      	ldr	r0, [r2, #0]
 8000da6:	f107 020c 	add.w	r2, r7, #12
 8000daa:	211f      	movs	r1, #31
 8000dac:	4798      	blx	r3
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	da02      	bge.n	8000dba <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000db4:	f06f 0304 	mvn.w	r3, #4
 8000db8:	e01c      	b.n	8000df4 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d101      	bne.n	8000dc8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000dc4:	2306      	movs	r3, #6
 8000dc6:	e015      	b.n	8000df4 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 031c 	and.w	r3, r3, #28
 8000dce:	2b18      	cmp	r3, #24
 8000dd0:	d101      	bne.n	8000dd6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	e00e      	b.n	8000df4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f003 031c 	and.w	r3, r3, #28
 8000ddc:	2b08      	cmp	r3, #8
 8000dde:	d101      	bne.n	8000de4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000de0:	2303      	movs	r3, #3
 8000de2:	e007      	b.n	8000df4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 031c 	and.w	r3, r3, #28
 8000dea:	2b14      	cmp	r3, #20
 8000dec:	d101      	bne.n	8000df2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000dee:	2304      	movs	r3, #4
 8000df0:	e000      	b.n	8000df4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000df2:	2305      	movs	r3, #5
    }
  }
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <HAL_Init+0x40>)
 8000e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_Init+0x40>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_Init+0x40>)
 8000e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 f8fc 	bl	8001022 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	200f      	movs	r0, #15
 8000e2c:	f7ff fcda 	bl	80007e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fcac 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023c00 	.word	0x40023c00

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008
 8000e64:	200000f8 	.word	0x200000f8

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	200000f8 	.word	0x200000f8

08000e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff ffee 	bl	8000e68 <HAL_GetTick>
 8000e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e98:	d005      	beq.n	8000ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_Delay+0x44>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ea6:	bf00      	nop
 8000ea8:	f7ff ffde 	bl	8000e68 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d8f7      	bhi.n	8000ea8 <HAL_Delay+0x28>
  {
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	db0b      	blt.n	8000f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 021f 	and.w	r2, r3, #31
 8000f44:	4907      	ldr	r1, [pc, #28]	; (8000f64 <__NVIC_EnableIRQ+0x38>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000e100 	.word	0xe000e100

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	; (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	; (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	; 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ff4c 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800104a:	f7ff ff61 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 800104e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	6978      	ldr	r0, [r7, #20]
 8001056:	f7ff ffb1 	bl	8000fbc <NVIC_EncodePriority>
 800105a:	4602      	mov	r2, r0
 800105c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001060:	4611      	mov	r1, r2
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff80 	bl	8000f68 <__NVIC_SetPriority>
}
 8001068:	bf00      	nop
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ff54 	bl	8000f2c <__NVIC_EnableIRQ>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e06c      	b.n	8001178 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d106      	bne.n	80010b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2223      	movs	r2, #35	; 0x23
 80010ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f002 ff8b 	bl	8003fcc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	4b31      	ldr	r3, [pc, #196]	; (8001180 <HAL_ETH_Init+0xf4>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a30      	ldr	r2, [pc, #192]	; (8001180 <HAL_ETH_Init+0xf4>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <HAL_ETH_Init+0xf4>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80010d2:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <HAL_ETH_Init+0xf8>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	4a2b      	ldr	r2, [pc, #172]	; (8001184 <HAL_ETH_Init+0xf8>)
 80010d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80010dc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80010de:	4b29      	ldr	r3, [pc, #164]	; (8001184 <HAL_ETH_Init+0xf8>)
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	4927      	ldr	r1, [pc, #156]	; (8001184 <HAL_ETH_Init+0xf8>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <HAL_ETH_Init+0xf8>)
 80010ee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001106:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001108:	f7ff feae 	bl	8000e68 <HAL_GetTick>
 800110c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800110e:	e011      	b.n	8001134 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001110:	f7ff feaa 	bl	8000e68 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800111e:	d909      	bls.n	8001134 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2204      	movs	r2, #4
 8001124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	22e0      	movs	r2, #224	; 0xe0
 800112c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e021      	b.n	8001178 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1e4      	bne.n	8001110 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 ff56 	bl	8001ff8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 fffd 	bl	800214c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f001 f853 	bl	80021fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	461a      	mov	r2, r3
 800115e:	2100      	movs	r1, #0
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 ffbb 	bl	80020dc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2210      	movs	r2, #16
 8001172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	40013800 	.word	0x40013800

08001188 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001196:	2b10      	cmp	r3, #16
 8001198:	d17f      	bne.n	800129a <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2223      	movs	r2, #35	; 0x23
 800119e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80011b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011cc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80011e0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2204      	movs	r2, #4
 80011e8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f9f8 	bl	80015e0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0208 	orr.w	r2, r2, #8
 80011fe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001208:	2001      	movs	r0, #1
 800120a:	f7ff fe39 	bl	8000e80 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 0204 	orr.w	r2, r2, #4
 8001224:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800122e:	2001      	movs	r0, #1
 8001230:	f7ff fe26 	bl	8000e80 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 fd7c 	bl	8001d3a <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001254:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001258:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001270:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	6812      	ldr	r2, [r2, #0]
 8001280:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001284:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001288:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800128c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2223      	movs	r2, #35	; 0x23
 8001292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	e000      	b.n	800129c <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
  }
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012b2:	2b23      	cmp	r3, #35	; 0x23
 80012b4:	d170      	bne.n	8001398 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2223      	movs	r2, #35	; 0x23
 80012ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 80012d0:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 80012d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012d8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012f0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	f023 0302 	bic.w	r3, r3, #2
 8001304:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001308:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0204 	bic.w	r2, r2, #4
 8001318:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff fdac 	bl	8000e80 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 fd02 	bl	8001d3a <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0208 	bic.w	r2, r2, #8
 8001344:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800134e:	2001      	movs	r0, #1
 8001350:	f7ff fd96 	bl	8000e80 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	e00e      	b.n	8001380 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	3212      	adds	r2, #18
 8001368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3301      	adds	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	2b03      	cmp	r3, #3
 8001384:	d9ed      	bls.n	8001362 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2210      	movs	r2, #16
 8001390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	e000      	b.n	800139a <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
  }
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d109      	bne.n	80013c6 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013b8:	f043 0201 	orr.w	r2, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e045      	b.n	8001452 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013cc:	2b23      	cmp	r3, #35	; 0x23
 80013ce:	d13f      	bne.n	8001450 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80013d8:	2201      	movs	r2, #1
 80013da:	6839      	ldr	r1, [r7, #0]
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 ff7b 	bl	80022d8 <ETH_Prepare_Tx_Descriptors>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d009      	beq.n	80013fc <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ee:	f043 0202 	orr.w	r2, r3, #2
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e02a      	b.n	8001452 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fc:	f3bf 8f4f 	dsb	sy
}
 8001400:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	2b03      	cmp	r3, #3
 8001412:	d904      	bls.n	800141e <HAL_ETH_Transmit_IT+0x7c>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	1f1a      	subs	r2, r3, #4
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00d      	beq.n	800144c <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001438:	461a      	mov	r2, r3
 800143a:	2304      	movs	r3, #4
 800143c:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001446:	461a      	mov	r2, r3
 8001448:	2300      	movs	r3, #0
 800144a:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	e000      	b.n	8001452 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
  }
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b088      	sub	sp, #32
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d109      	bne.n	8001486 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001478:	f043 0201 	orr.w	r2, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e0a8      	b.n	80015d8 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800148c:	2b23      	cmp	r3, #35	; 0x23
 800148e:	d001      	beq.n	8001494 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0a1      	b.n	80015d8 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001498:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69fa      	ldr	r2, [r7, #28]
 800149e:	3212      	adds	r2, #18
 80014a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a4:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014aa:	f1c3 0304 	rsb	r3, r3, #4
 80014ae:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80014b0:	e06a      	b.n	8001588 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d007      	beq.n	80014ce <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	69da      	ldr	r2, [r3, #28]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	699a      	ldr	r2, [r3, #24]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d103      	bne.n	80014e2 <HAL_ETH_ReadData+0x88>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d040      	beq.n	8001564 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d005      	beq.n	80014fa <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00c      	beq.n	8001526 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	0c1b      	lsrs	r3, r3, #16
 8001512:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001516:	3b04      	subs	r3, #4
 8001518:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001522:	2301      	movs	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800153e:	461a      	mov	r2, r3
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	b29b      	uxth	r3, r3
 8001544:	f002 ff1c 	bl	8004380 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	441a      	add	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	3301      	adds	r3, #1
 8001568:	61fb      	str	r3, [r7, #28]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	2b03      	cmp	r3, #3
 800156e:	d902      	bls.n	8001576 <HAL_ETH_ReadData+0x11c>
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	3b04      	subs	r3, #4
 8001574:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69fa      	ldr	r2, [r7, #28]
 800157a:	3212      	adds	r2, #18
 800157c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001580:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800158c:	2b00      	cmp	r3, #0
 800158e:	db06      	blt.n	800159e <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	429a      	cmp	r2, r3
 8001596:	d202      	bcs.n	800159e <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d089      	beq.n	80014b2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	441a      	add	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f814 	bl	80015e0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d108      	bne.n	80015d6 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3720      	adds	r7, #32
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80015ec:	2301      	movs	r3, #1
 80015ee:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015f4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69fa      	ldr	r2, [r7, #28]
 80015fa:	3212      	adds	r2, #18
 80015fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001600:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001606:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001608:	e03d      	b.n	8001686 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d112      	bne.n	8001638 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001612:	f107 0308 	add.w	r3, r7, #8
 8001616:	4618      	mov	r0, r3
 8001618:	f002 fe82 	bl	8004320 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	74fb      	strb	r3, [r7, #19]
 8001626:	e007      	b.n	8001638 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	461a      	mov	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	461a      	mov	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001638:	7cfb      	ldrb	r3, [r7, #19]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d023      	beq.n	8001686 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001642:	2b00      	cmp	r3, #0
 8001644:	d103      	bne.n	800164e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	4a24      	ldr	r2, [pc, #144]	; (80016dc <ETH_UpdateDescriptor+0xfc>)
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	e003      	b.n	8001656 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001654:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3301      	adds	r3, #1
 8001666:	61fb      	str	r3, [r7, #28]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d902      	bls.n	8001674 <ETH_UpdateDescriptor+0x94>
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3b04      	subs	r3, #4
 8001672:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	3212      	adds	r2, #18
 800167a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167e:	617b      	str	r3, [r7, #20]
      desccount--;
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	3b01      	subs	r3, #1
 8001684:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <ETH_UpdateDescriptor+0xb2>
 800168c:	7cfb      	ldrb	r3, [r7, #19]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1bb      	bne.n	800160a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	429a      	cmp	r2, r3
 800169a:	d01a      	beq.n	80016d2 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	3301      	adds	r3, #1
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80016a6:	f3bf 8f5f 	dmb	sy
}
 80016aa:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6919      	ldr	r1, [r3, #16]
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	18ca      	adds	r2, r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c4:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69fa      	ldr	r2, [r7, #28]
 80016ca:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80016d2:	bf00      	nop
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	80004600 	.word	0x80004600

080016e0 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3318      	adds	r3, #24
 80016ec:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80016fa:	2301      	movs	r3, #1
 80016fc:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80016fe:	e03f      	b.n	8001780 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001700:	2301      	movs	r3, #1
 8001702:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3b01      	subs	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	3304      	adds	r3, #4
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d106      	bne.n	8001728 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	3301      	adds	r3, #1
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001728:	7bbb      	ldrb	r3, [r7, #14]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d028      	beq.n	8001780 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68d9      	ldr	r1, [r3, #12]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	440b      	add	r3, r1
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	db1b      	blt.n	800177c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	3304      	adds	r3, #4
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4618      	mov	r0, r3
 8001752:	f002 fe55 	bl	8004400 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	3304      	adds	r3, #4
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	2200      	movs	r2, #0
 8001762:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3301      	adds	r3, #1
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
 800177a:	e001      	b.n	8001780 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <HAL_ETH_ReleaseTxPacket+0xac>
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1b9      	bne.n	8001700 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ae:	2b40      	cmp	r3, #64	; 0x40
 80017b0:	d112      	bne.n	80017d8 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c0:	2b40      	cmp	r3, #64	; 0x40
 80017c2:	d109      	bne.n	80017d8 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b50      	ldr	r3, [pc, #320]	; (8001910 <HAL_ETH_IRQHandler+0x178>)
 80017d0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f002 f956 	bl	8003a84 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d113      	bne.n	8001812 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d10a      	bne.n	8001812 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001804:	461a      	mov	r2, r3
 8001806:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800180a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f002 f949 	bl	8003aa4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001824:	d14c      	bne.n	80018c0 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001838:	d142      	bne.n	80018c0 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001840:	f043 0208 	orr.w	r2, r3, #8
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800185c:	d11a      	bne.n	8001894 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <HAL_ETH_IRQHandler+0x17c>)
 800186a:	4013      	ands	r3, r2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001884:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001888:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	22e0      	movs	r2, #224	; 0xe0
 800188e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001892:	e012      	b.n	80018ba <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	f248 6380 	movw	r3, #34432	; 0x8680
 80018a2:	4013      	ands	r3, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018b2:	461a      	mov	r2, r3
 80018b4:	f248 6380 	movw	r3, #34432	; 0x8680
 80018b8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f002 f902 	bl	8003ac4 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d10e      	bne.n	80018ec <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f81c 	bl	800191c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_ETH_IRQHandler+0x180>)
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <HAL_ETH_IRQHandler+0x180>)
 80018fa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018fe:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 f815 	bl	8001930 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	00010040 	.word	0x00010040
 8001914:	007e2000 	.word	0x007e2000
 8001918:	40013c00 	.word	0x40013c00

0800191c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f003 031c 	and.w	r3, r3, #28
 8001960:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	02db      	lsls	r3, r3, #11
 8001966:	b29b      	uxth	r3, r3
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	4313      	orrs	r3, r2
 800196c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	019b      	lsls	r3, r3, #6
 8001972:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4313      	orrs	r3, r2
 800197a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f023 0302 	bic.w	r3, r3, #2
 8001982:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001994:	f7ff fa68 	bl	8000e68 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800199a:	e00d      	b.n	80019b8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800199c:	f7ff fa64 	bl	8000e68 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019aa:	d301      	bcc.n	80019b0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e010      	b.n	80019d2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1ec      	bne.n	800199c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f003 031c 	and.w	r3, r3, #28
 80019f6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	02db      	lsls	r3, r3, #11
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	019b      	lsls	r3, r3, #6
 8001a08:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a34:	f7ff fa18 	bl	8000e68 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a3a:	e00d      	b.n	8001a58 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001a3c:	f7ff fa14 	bl	8000e68 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4a:	d301      	bcc.n	8001a50 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e009      	b.n	8001a64 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1ec      	bne.n	8001a3c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0d9      	b.n	8001c34 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	bf14      	ite	ne
 8001a8e:	2301      	movne	r3, #1
 8001a90:	2300      	moveq	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	bf14      	ite	ne
 8001ad4:	2301      	movne	r3, #1
 8001ad6:	2300      	moveq	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	bf0c      	ite	eq
 8001aee:	2301      	moveq	r3, #1
 8001af0:	2300      	movne	r3, #0
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf14      	ite	ne
 8001b08:	2301      	movne	r3, #1
 8001b0a:	2300      	moveq	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	bf0c      	ite	eq
 8001b3e:	2301      	moveq	r3, #1
 8001b40:	2300      	movne	r3, #0
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	461a      	mov	r2, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf0c      	ite	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2300      	movne	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	bf14      	ite	ne
 8001b72:	2301      	movne	r3, #1
 8001b74:	2300      	moveq	r3, #0
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	bf14      	ite	ne
 8001b9a:	2301      	movne	r3, #1
 8001b9c:	2300      	moveq	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bf14      	ite	ne
 8001bb4:	2301      	movne	r3, #1
 8001bb6:	2300      	moveq	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	461a      	mov	r2, r3
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf0c      	ite	eq
 8001bd0:	2301      	moveq	r3, #1
 8001bd2:	2300      	movne	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	0c1b      	lsrs	r3, r3, #16
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	bf14      	ite	ne
 8001c08:	2301      	movne	r3, #1
 8001c0a:	2300      	moveq	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	461a      	mov	r2, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	bf14      	ite	ne
 8001c24:	2301      	movne	r3, #1
 8001c26:	2300      	moveq	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e00b      	b.n	8001c6c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d105      	bne.n	8001c6a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001c5e:	6839      	ldr	r1, [r7, #0]
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f88f 	bl	8001d84 <ETH_SetMACConfig>

    return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e000      	b.n	8001c6c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
  }
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f023 031c 	bic.w	r3, r3, #28
 8001c8a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c8c:	f001 faba 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8001c90:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <HAL_ETH_SetMDIOClockRange+0x98>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d908      	bls.n	8001cac <HAL_ETH_SetMDIOClockRange+0x38>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	4a1c      	ldr	r2, [pc, #112]	; (8001d10 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d804      	bhi.n	8001cac <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f043 0308 	orr.w	r3, r3, #8
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	e027      	b.n	8001cfc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	4a18      	ldr	r2, [pc, #96]	; (8001d10 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d908      	bls.n	8001cc6 <HAL_ETH_SetMDIOClockRange+0x52>
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	4a17      	ldr	r2, [pc, #92]	; (8001d14 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d204      	bcs.n	8001cc6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f043 030c 	orr.w	r3, r3, #12
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	e01a      	b.n	8001cfc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d303      	bcc.n	8001cd6 <HAL_ETH_SetMDIOClockRange+0x62>
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	4a11      	ldr	r2, [pc, #68]	; (8001d18 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d911      	bls.n	8001cfa <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	4a0f      	ldr	r2, [pc, #60]	; (8001d18 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d908      	bls.n	8001cf0 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d804      	bhi.n	8001cf0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	e005      	b.n	8001cfc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f043 0310 	orr.w	r3, r3, #16
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	e000      	b.n	8001cfc <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001cfa:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	611a      	str	r2, [r3, #16]
}
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	01312cff 	.word	0x01312cff
 8001d10:	02160ebf 	.word	0x02160ebf
 8001d14:	03938700 	.word	0x03938700
 8001d18:	05f5e0ff 	.word	0x05f5e0ff
 8001d1c:	08f0d17f 	.word	0x08f0d17f

08001d20 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d5c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f7ff f888 	bl	8000e80 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d7a:	6193      	str	r3, [r2, #24]
}
 8001d7c:	bf00      	nop
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4b51      	ldr	r3, [pc, #324]	; (8001ee0 <ETH_SetMACConfig+0x15c>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	7c1b      	ldrb	r3, [r3, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <ETH_SetMACConfig+0x28>
 8001da6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001daa:	e000      	b.n	8001dae <ETH_SetMACConfig+0x2a>
 8001dac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	7c5b      	ldrb	r3, [r3, #17]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d102      	bne.n	8001dbc <ETH_SetMACConfig+0x38>
 8001db6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dba:	e000      	b.n	8001dbe <ETH_SetMACConfig+0x3a>
 8001dbc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001dbe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001dc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	7fdb      	ldrb	r3, [r3, #31]
 8001dca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001dcc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001dd2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	7f92      	ldrb	r2, [r2, #30]
 8001dd8:	2a00      	cmp	r2, #0
 8001dda:	d102      	bne.n	8001de2 <ETH_SetMACConfig+0x5e>
 8001ddc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001de0:	e000      	b.n	8001de4 <ETH_SetMACConfig+0x60>
 8001de2:	2200      	movs	r2, #0
                        macconf->Speed |
 8001de4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	7f1b      	ldrb	r3, [r3, #28]
 8001dea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001dec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001df2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	791b      	ldrb	r3, [r3, #4]
 8001df8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001dfa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001e02:	2a00      	cmp	r2, #0
 8001e04:	d102      	bne.n	8001e0c <ETH_SetMACConfig+0x88>
 8001e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e0a:	e000      	b.n	8001e0e <ETH_SetMACConfig+0x8a>
 8001e0c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e0e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	7bdb      	ldrb	r3, [r3, #15]
 8001e14:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e16:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e1c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e24:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e26:	4313      	orrs	r3, r2
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e3e:	2001      	movs	r0, #1
 8001e40:	f7ff f81e 	bl	8000e80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e62:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001e6a:	2a00      	cmp	r2, #0
 8001e6c:	d101      	bne.n	8001e72 <ETH_SetMACConfig+0xee>
 8001e6e:	2280      	movs	r2, #128	; 0x80
 8001e70:	e000      	b.n	8001e74 <ETH_SetMACConfig+0xf0>
 8001e72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e74:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001e82:	2a01      	cmp	r2, #1
 8001e84:	d101      	bne.n	8001e8a <ETH_SetMACConfig+0x106>
 8001e86:	2208      	movs	r2, #8
 8001e88:	e000      	b.n	8001e8c <ETH_SetMACConfig+0x108>
 8001e8a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001e8c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001e94:	2a01      	cmp	r2, #1
 8001e96:	d101      	bne.n	8001e9c <ETH_SetMACConfig+0x118>
 8001e98:	2204      	movs	r2, #4
 8001e9a:	e000      	b.n	8001e9e <ETH_SetMACConfig+0x11a>
 8001e9c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001ea6:	2a01      	cmp	r2, #1
 8001ea8:	d101      	bne.n	8001eae <ETH_SetMACConfig+0x12a>
 8001eaa:	2202      	movs	r2, #2
 8001eac:	e000      	b.n	8001eb0 <ETH_SetMACConfig+0x12c>
 8001eae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f7fe ffd9 	bl	8000e80 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	619a      	str	r2, [r3, #24]
}
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	ff20810f 	.word	0xff20810f

08001ee4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <ETH_SetDMAConfig+0x110>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	7b1b      	ldrb	r3, [r3, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d102      	bne.n	8001f10 <ETH_SetDMAConfig+0x2c>
 8001f0a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f0e:	e000      	b.n	8001f12 <ETH_SetDMAConfig+0x2e>
 8001f10:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	7b5b      	ldrb	r3, [r3, #13]
 8001f16:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f18:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	7f52      	ldrb	r2, [r2, #29]
 8001f1e:	2a00      	cmp	r2, #0
 8001f20:	d102      	bne.n	8001f28 <ETH_SetDMAConfig+0x44>
 8001f22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f26:	e000      	b.n	8001f2a <ETH_SetDMAConfig+0x46>
 8001f28:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f2a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	7b9b      	ldrb	r3, [r3, #14]
 8001f30:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f32:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f38:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	7f1b      	ldrb	r3, [r3, #28]
 8001f3e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001f40:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	7f9b      	ldrb	r3, [r3, #30]
 8001f46:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f48:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f4e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f56:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f68:	461a      	mov	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f7fe ff80 	bl	8000e80 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f88:	461a      	mov	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	791b      	ldrb	r3, [r3, #4]
 8001f92:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f98:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001f9e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001fa4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001fae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001fb6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001fbc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f7fe ff51 	bl	8000e80 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	f8de3f23 	.word	0xf8de3f23

08001ff8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b0a6      	sub	sp, #152	; 0x98
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002000:	2301      	movs	r3, #1
 8002002:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002006:	2301      	movs	r3, #1
 8002008:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800200c:	2300      	movs	r3, #0
 800200e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002010:	2300      	movs	r3, #0
 8002012:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002016:	2301      	movs	r3, #1
 8002018:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002022:	2301      	movs	r3, #1
 8002024:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002034:	2300      	movs	r3, #0
 8002036:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800203e:	2300      	movs	r3, #0
 8002040:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002048:	2300      	movs	r3, #0
 800204a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800205a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800205e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002060:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002064:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800206c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002070:	4619      	mov	r1, r3
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff fe86 	bl	8001d84 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002078:	2301      	movs	r3, #1
 800207a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800207c:	2301      	movs	r3, #1
 800207e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002080:	2301      	movs	r3, #1
 8002082:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002086:	2301      	movs	r3, #1
 8002088:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800209a:	2300      	movs	r3, #0
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800209e:	2301      	movs	r3, #1
 80020a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80020a4:	2301      	movs	r3, #1
 80020a6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80020a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020ac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020b2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020b8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80020ba:	2301      	movs	r3, #1
 80020bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80020c8:	f107 0308 	add.w	r3, r7, #8
 80020cc:	4619      	mov	r1, r3
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ff08 	bl	8001ee4 <ETH_SetDMAConfig>
}
 80020d4:	bf00      	nop
 80020d6:	3798      	adds	r7, #152	; 0x98
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3305      	adds	r3, #5
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	3204      	adds	r2, #4
 80020f4:	7812      	ldrb	r2, [r2, #0]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <ETH_MACAddressConfig+0x68>)
 80020fe:	4413      	add	r3, r2
 8002100:	461a      	mov	r2, r3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3303      	adds	r3, #3
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	061a      	lsls	r2, r3, #24
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3302      	adds	r3, #2
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	041b      	lsls	r3, r3, #16
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3301      	adds	r3, #1
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	4313      	orrs	r3, r2
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	7812      	ldrb	r2, [r2, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <ETH_MACAddressConfig+0x6c>)
 800212e:	4413      	add	r3, r2
 8002130:	461a      	mov	r2, r3
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	6013      	str	r3, [r2, #0]
}
 8002136:	bf00      	nop
 8002138:	371c      	adds	r7, #28
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40028040 	.word	0x40028040
 8002148:	40028044 	.word	0x40028044

0800214c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	e03e      	b.n	80021d8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68d9      	ldr	r1, [r3, #12]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	440b      	add	r3, r1
 800216a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2200      	movs	r2, #0
 8002176:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2200      	movs	r2, #0
 8002182:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	3206      	adds	r2, #6
 800218c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d80c      	bhi.n	80021bc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68d9      	ldr	r1, [r3, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	440b      	add	r3, r1
 80021b4:	461a      	mov	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	e004      	b.n	80021c6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	461a      	mov	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	3301      	adds	r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d9bd      	bls.n	800215a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f0:	611a      	str	r2, [r3, #16]
}
 80021f2:	bf00      	nop
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021fe:	b480      	push	{r7}
 8002200:	b085      	sub	sp, #20
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	e046      	b.n	800229a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6919      	ldr	r1, [r3, #16]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	440b      	add	r3, r1
 800221c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2200      	movs	r2, #0
 8002228:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2200      	movs	r2, #0
 800222e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2200      	movs	r2, #0
 8002234:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2200      	movs	r2, #0
 800223a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2200      	movs	r2, #0
 8002240:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002248:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002250:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800225e:	68b9      	ldr	r1, [r7, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	3212      	adds	r2, #18
 8002266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d80c      	bhi.n	800228a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6919      	ldr	r1, [r3, #16]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	440b      	add	r3, r1
 8002282:	461a      	mov	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	60da      	str	r2, [r3, #12]
 8002288:	e004      	b.n	8002294 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	461a      	mov	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3301      	adds	r3, #1
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d9b5      	bls.n	800220c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691a      	ldr	r2, [r3, #16]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ca:	60da      	str	r2, [r3, #12]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80022d8:	b480      	push	{r7}
 80022da:	b08d      	sub	sp, #52	; 0x34
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3318      	adds	r3, #24
 80022e8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002302:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002316:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800231a:	d007      	beq.n	800232c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002320:	3304      	adds	r3, #4
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800232c:	2302      	movs	r3, #2
 800232e:	e103      	b.n	8002538 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	3301      	adds	r3, #1
 8002334:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002348:	f023 031f 	bic.w	r3, r3, #31
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	6852      	ldr	r2, [r2, #4]
 8002350:	431a      	orrs	r2, r3
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	431a      	orrs	r2, r3
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0320 	and.w	r3, r3, #32
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	431a      	orrs	r2, r3
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80023b6:	f3bf 8f5f 	dmb	sy
}
 80023ba:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80023c8:	e084      	b.n	80024d4 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d006      	beq.n	80023ea <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	e005      	b.n	80023f6 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80023f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f8:	3301      	adds	r3, #1
 80023fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d902      	bls.n	8002408 <ETH_Prepare_Tx_Descriptors+0x130>
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002404:	3b04      	subs	r3, #4
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800240c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002410:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800242a:	d007      	beq.n	800243c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002430:	3304      	adds	r3, #4
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d029      	beq.n	8002490 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002448:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800244a:	2300      	movs	r3, #0
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
 800244e:	e019      	b.n	8002484 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002450:	f3bf 8f5f 	dmb	sy
}
 8002454:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002464:	3301      	adds	r3, #1
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246a:	2b03      	cmp	r3, #3
 800246c:	d902      	bls.n	8002474 <ETH_Prepare_Tx_Descriptors+0x19c>
 800246e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002470:	3b04      	subs	r3, #4
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	3301      	adds	r3, #1
 8002482:	62bb      	str	r3, [r7, #40]	; 0x28
 8002484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	429a      	cmp	r2, r3
 800248a:	d3e1      	bcc.n	8002450 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 800248c:	2302      	movs	r3, #2
 800248e:	e053      	b.n	8002538 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	3301      	adds	r3, #1
 8002494:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80024ae:	f023 031f 	bic.w	r3, r3, #31
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	6852      	ldr	r2, [r2, #4]
 80024b6:	431a      	orrs	r2, r3
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	3301      	adds	r3, #1
 80024c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80024c2:	f3bf 8f5f 	dmb	sy
}
 80024c6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f47f af76 	bne.w	80023ca <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d006      	beq.n	80024f2 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	e005      	b.n	80024fe <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800250e:	6979      	ldr	r1, [r7, #20]
 8002510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002512:	3304      	adds	r3, #4
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002520:	b672      	cpsid	i
}
 8002522:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	4413      	add	r3, r2
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002532:	b662      	cpsie	i
}
 8002534:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3734      	adds	r7, #52	; 0x34
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	; 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002556:	2300      	movs	r3, #0
 8002558:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	e177      	b.n	8002850 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002560:	2201      	movs	r2, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	429a      	cmp	r2, r3
 800257a:	f040 8166 	bne.w	800284a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b01      	cmp	r3, #1
 8002588:	d005      	beq.n	8002596 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002592:	2b02      	cmp	r3, #2
 8002594:	d130      	bne.n	80025f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	2203      	movs	r2, #3
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025cc:	2201      	movs	r2, #1
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 0201 	and.w	r2, r3, #1
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b03      	cmp	r3, #3
 8002602:	d017      	beq.n	8002634 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d123      	bne.n	8002688 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	08da      	lsrs	r2, r3, #3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3208      	adds	r2, #8
 8002648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	220f      	movs	r2, #15
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	08da      	lsrs	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3208      	adds	r2, #8
 8002682:	69b9      	ldr	r1, [r7, #24]
 8002684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	2203      	movs	r2, #3
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0203 	and.w	r2, r3, #3
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80c0 	beq.w	800284a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	4b66      	ldr	r3, [pc, #408]	; (8002868 <HAL_GPIO_Init+0x324>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	4a65      	ldr	r2, [pc, #404]	; (8002868 <HAL_GPIO_Init+0x324>)
 80026d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d8:	6453      	str	r3, [r2, #68]	; 0x44
 80026da:	4b63      	ldr	r3, [pc, #396]	; (8002868 <HAL_GPIO_Init+0x324>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026e6:	4a61      	ldr	r2, [pc, #388]	; (800286c <HAL_GPIO_Init+0x328>)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	3302      	adds	r3, #2
 80026ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	220f      	movs	r2, #15
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a58      	ldr	r2, [pc, #352]	; (8002870 <HAL_GPIO_Init+0x32c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d037      	beq.n	8002782 <HAL_GPIO_Init+0x23e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a57      	ldr	r2, [pc, #348]	; (8002874 <HAL_GPIO_Init+0x330>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d031      	beq.n	800277e <HAL_GPIO_Init+0x23a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a56      	ldr	r2, [pc, #344]	; (8002878 <HAL_GPIO_Init+0x334>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d02b      	beq.n	800277a <HAL_GPIO_Init+0x236>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a55      	ldr	r2, [pc, #340]	; (800287c <HAL_GPIO_Init+0x338>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d025      	beq.n	8002776 <HAL_GPIO_Init+0x232>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a54      	ldr	r2, [pc, #336]	; (8002880 <HAL_GPIO_Init+0x33c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d01f      	beq.n	8002772 <HAL_GPIO_Init+0x22e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a53      	ldr	r2, [pc, #332]	; (8002884 <HAL_GPIO_Init+0x340>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d019      	beq.n	800276e <HAL_GPIO_Init+0x22a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a52      	ldr	r2, [pc, #328]	; (8002888 <HAL_GPIO_Init+0x344>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <HAL_GPIO_Init+0x226>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a51      	ldr	r2, [pc, #324]	; (800288c <HAL_GPIO_Init+0x348>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00d      	beq.n	8002766 <HAL_GPIO_Init+0x222>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a50      	ldr	r2, [pc, #320]	; (8002890 <HAL_GPIO_Init+0x34c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d007      	beq.n	8002762 <HAL_GPIO_Init+0x21e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4f      	ldr	r2, [pc, #316]	; (8002894 <HAL_GPIO_Init+0x350>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_GPIO_Init+0x21a>
 800275a:	2309      	movs	r3, #9
 800275c:	e012      	b.n	8002784 <HAL_GPIO_Init+0x240>
 800275e:	230a      	movs	r3, #10
 8002760:	e010      	b.n	8002784 <HAL_GPIO_Init+0x240>
 8002762:	2308      	movs	r3, #8
 8002764:	e00e      	b.n	8002784 <HAL_GPIO_Init+0x240>
 8002766:	2307      	movs	r3, #7
 8002768:	e00c      	b.n	8002784 <HAL_GPIO_Init+0x240>
 800276a:	2306      	movs	r3, #6
 800276c:	e00a      	b.n	8002784 <HAL_GPIO_Init+0x240>
 800276e:	2305      	movs	r3, #5
 8002770:	e008      	b.n	8002784 <HAL_GPIO_Init+0x240>
 8002772:	2304      	movs	r3, #4
 8002774:	e006      	b.n	8002784 <HAL_GPIO_Init+0x240>
 8002776:	2303      	movs	r3, #3
 8002778:	e004      	b.n	8002784 <HAL_GPIO_Init+0x240>
 800277a:	2302      	movs	r3, #2
 800277c:	e002      	b.n	8002784 <HAL_GPIO_Init+0x240>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_GPIO_Init+0x240>
 8002782:	2300      	movs	r3, #0
 8002784:	69fa      	ldr	r2, [r7, #28]
 8002786:	f002 0203 	and.w	r2, r2, #3
 800278a:	0092      	lsls	r2, r2, #2
 800278c:	4093      	lsls	r3, r2
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002794:	4935      	ldr	r1, [pc, #212]	; (800286c <HAL_GPIO_Init+0x328>)
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	089b      	lsrs	r3, r3, #2
 800279a:	3302      	adds	r3, #2
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027a2:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <HAL_GPIO_Init+0x354>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027c6:	4a34      	ldr	r2, [pc, #208]	; (8002898 <HAL_GPIO_Init+0x354>)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027cc:	4b32      	ldr	r3, [pc, #200]	; (8002898 <HAL_GPIO_Init+0x354>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027f0:	4a29      	ldr	r2, [pc, #164]	; (8002898 <HAL_GPIO_Init+0x354>)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027f6:	4b28      	ldr	r3, [pc, #160]	; (8002898 <HAL_GPIO_Init+0x354>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	43db      	mvns	r3, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4013      	ands	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800281a:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <HAL_GPIO_Init+0x354>)
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002820:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <HAL_GPIO_Init+0x354>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002844:	4a14      	ldr	r2, [pc, #80]	; (8002898 <HAL_GPIO_Init+0x354>)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3301      	adds	r3, #1
 800284e:	61fb      	str	r3, [r7, #28]
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	2b0f      	cmp	r3, #15
 8002854:	f67f ae84 	bls.w	8002560 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002858:	bf00      	nop
 800285a:	bf00      	nop
 800285c:	3724      	adds	r7, #36	; 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800
 800286c:	40013800 	.word	0x40013800
 8002870:	40020000 	.word	0x40020000
 8002874:	40020400 	.word	0x40020400
 8002878:	40020800 	.word	0x40020800
 800287c:	40020c00 	.word	0x40020c00
 8002880:	40021000 	.word	0x40021000
 8002884:	40021400 	.word	0x40021400
 8002888:	40021800 	.word	0x40021800
 800288c:	40021c00 	.word	0x40021c00
 8002890:	40022000 	.word	0x40022000
 8002894:	40022400 	.word	0x40022400
 8002898:	40013c00 	.word	0x40013c00

0800289c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	4b20      	ldr	r3, [pc, #128]	; (800292c <HAL_PWREx_EnableOverDrive+0x90>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	4a1f      	ldr	r2, [pc, #124]	; (800292c <HAL_PWREx_EnableOverDrive+0x90>)
 80028b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b4:	6413      	str	r3, [r2, #64]	; 0x40
 80028b6:	4b1d      	ldr	r3, [pc, #116]	; (800292c <HAL_PWREx_EnableOverDrive+0x90>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80028c2:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_PWREx_EnableOverDrive+0x94>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028c8:	f7fe face 	bl	8000e68 <HAL_GetTick>
 80028cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028ce:	e009      	b.n	80028e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028d0:	f7fe faca 	bl	8000e68 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028de:	d901      	bls.n	80028e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e01f      	b.n	8002924 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028e4:	4b13      	ldr	r3, [pc, #76]	; (8002934 <HAL_PWREx_EnableOverDrive+0x98>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f0:	d1ee      	bne.n	80028d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028f8:	f7fe fab6 	bl	8000e68 <HAL_GetTick>
 80028fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028fe:	e009      	b.n	8002914 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002900:	f7fe fab2 	bl	8000e68 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800290e:	d901      	bls.n	8002914 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e007      	b.n	8002924 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002914:	4b07      	ldr	r3, [pc, #28]	; (8002934 <HAL_PWREx_EnableOverDrive+0x98>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002920:	d1ee      	bne.n	8002900 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40023800 	.word	0x40023800
 8002930:	420e0040 	.word	0x420e0040
 8002934:	40007000 	.word	0x40007000
 8002938:	420e0044 	.word	0x420e0044

0800293c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e267      	b.n	8002e1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d075      	beq.n	8002a46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800295a:	4b88      	ldr	r3, [pc, #544]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b04      	cmp	r3, #4
 8002964:	d00c      	beq.n	8002980 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002966:	4b85      	ldr	r3, [pc, #532]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800296e:	2b08      	cmp	r3, #8
 8002970:	d112      	bne.n	8002998 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002972:	4b82      	ldr	r3, [pc, #520]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800297e:	d10b      	bne.n	8002998 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002980:	4b7e      	ldr	r3, [pc, #504]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d05b      	beq.n	8002a44 <HAL_RCC_OscConfig+0x108>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d157      	bne.n	8002a44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e242      	b.n	8002e1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a0:	d106      	bne.n	80029b0 <HAL_RCC_OscConfig+0x74>
 80029a2:	4b76      	ldr	r3, [pc, #472]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a75      	ldr	r2, [pc, #468]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 80029a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	e01d      	b.n	80029ec <HAL_RCC_OscConfig+0xb0>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCC_OscConfig+0x98>
 80029ba:	4b70      	ldr	r3, [pc, #448]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a6f      	ldr	r2, [pc, #444]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 80029c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	4b6d      	ldr	r3, [pc, #436]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a6c      	ldr	r2, [pc, #432]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 80029cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	e00b      	b.n	80029ec <HAL_RCC_OscConfig+0xb0>
 80029d4:	4b69      	ldr	r3, [pc, #420]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a68      	ldr	r2, [pc, #416]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 80029da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	4b66      	ldr	r3, [pc, #408]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a65      	ldr	r2, [pc, #404]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 80029e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d013      	beq.n	8002a1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe fa38 	bl	8000e68 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029fc:	f7fe fa34 	bl	8000e68 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	; 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e207      	b.n	8002e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	4b5b      	ldr	r3, [pc, #364]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0xc0>
 8002a1a:	e014      	b.n	8002a46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fa24 	bl	8000e68 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a24:	f7fe fa20 	bl	8000e68 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b64      	cmp	r3, #100	; 0x64
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e1f3      	b.n	8002e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a36:	4b51      	ldr	r3, [pc, #324]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0xe8>
 8002a42:	e000      	b.n	8002a46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d063      	beq.n	8002b1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a52:	4b4a      	ldr	r3, [pc, #296]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00b      	beq.n	8002a76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a5e:	4b47      	ldr	r3, [pc, #284]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d11c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a6a:	4b44      	ldr	r3, [pc, #272]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d116      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a76:	4b41      	ldr	r3, [pc, #260]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d005      	beq.n	8002a8e <HAL_RCC_OscConfig+0x152>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d001      	beq.n	8002a8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e1c7      	b.n	8002e1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8e:	4b3b      	ldr	r3, [pc, #236]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4937      	ldr	r1, [pc, #220]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa2:	e03a      	b.n	8002b1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d020      	beq.n	8002aee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aac:	4b34      	ldr	r3, [pc, #208]	; (8002b80 <HAL_RCC_OscConfig+0x244>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab2:	f7fe f9d9 	bl	8000e68 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aba:	f7fe f9d5 	bl	8000e68 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e1a8      	b.n	8002e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002acc:	4b2b      	ldr	r3, [pc, #172]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0f0      	beq.n	8002aba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad8:	4b28      	ldr	r3, [pc, #160]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4925      	ldr	r1, [pc, #148]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	600b      	str	r3, [r1, #0]
 8002aec:	e015      	b.n	8002b1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aee:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <HAL_RCC_OscConfig+0x244>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af4:	f7fe f9b8 	bl	8000e68 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002afc:	f7fe f9b4 	bl	8000e68 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e187      	b.n	8002e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d036      	beq.n	8002b94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d016      	beq.n	8002b5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <HAL_RCC_OscConfig+0x248>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b34:	f7fe f998 	bl	8000e68 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b3c:	f7fe f994 	bl	8000e68 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e167      	b.n	8002e1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_OscConfig+0x240>)
 8002b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0x200>
 8002b5a:	e01b      	b.n	8002b94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b5c:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <HAL_RCC_OscConfig+0x248>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b62:	f7fe f981 	bl	8000e68 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b68:	e00e      	b.n	8002b88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b6a:	f7fe f97d 	bl	8000e68 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d907      	bls.n	8002b88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e150      	b.n	8002e1e <HAL_RCC_OscConfig+0x4e2>
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	42470000 	.word	0x42470000
 8002b84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b88:	4b88      	ldr	r3, [pc, #544]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1ea      	bne.n	8002b6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8097 	beq.w	8002cd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba6:	4b81      	ldr	r3, [pc, #516]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10f      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	4b7d      	ldr	r3, [pc, #500]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	4a7c      	ldr	r2, [pc, #496]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc2:	4b7a      	ldr	r3, [pc, #488]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd2:	4b77      	ldr	r3, [pc, #476]	; (8002db0 <HAL_RCC_OscConfig+0x474>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d118      	bne.n	8002c10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bde:	4b74      	ldr	r3, [pc, #464]	; (8002db0 <HAL_RCC_OscConfig+0x474>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a73      	ldr	r2, [pc, #460]	; (8002db0 <HAL_RCC_OscConfig+0x474>)
 8002be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bea:	f7fe f93d 	bl	8000e68 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf2:	f7fe f939 	bl	8000e68 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e10c      	b.n	8002e1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c04:	4b6a      	ldr	r3, [pc, #424]	; (8002db0 <HAL_RCC_OscConfig+0x474>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d106      	bne.n	8002c26 <HAL_RCC_OscConfig+0x2ea>
 8002c18:	4b64      	ldr	r3, [pc, #400]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1c:	4a63      	ldr	r2, [pc, #396]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	6713      	str	r3, [r2, #112]	; 0x70
 8002c24:	e01c      	b.n	8002c60 <HAL_RCC_OscConfig+0x324>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2b05      	cmp	r3, #5
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0x30c>
 8002c2e:	4b5f      	ldr	r3, [pc, #380]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c32:	4a5e      	ldr	r2, [pc, #376]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002c34:	f043 0304 	orr.w	r3, r3, #4
 8002c38:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3a:	4b5c      	ldr	r3, [pc, #368]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	4a5b      	ldr	r2, [pc, #364]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6713      	str	r3, [r2, #112]	; 0x70
 8002c46:	e00b      	b.n	8002c60 <HAL_RCC_OscConfig+0x324>
 8002c48:	4b58      	ldr	r3, [pc, #352]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4c:	4a57      	ldr	r2, [pc, #348]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002c4e:	f023 0301 	bic.w	r3, r3, #1
 8002c52:	6713      	str	r3, [r2, #112]	; 0x70
 8002c54:	4b55      	ldr	r3, [pc, #340]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	4a54      	ldr	r2, [pc, #336]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002c5a:	f023 0304 	bic.w	r3, r3, #4
 8002c5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d015      	beq.n	8002c94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c68:	f7fe f8fe 	bl	8000e68 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6e:	e00a      	b.n	8002c86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c70:	f7fe f8fa 	bl	8000e68 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e0cb      	b.n	8002e1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c86:	4b49      	ldr	r3, [pc, #292]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0ee      	beq.n	8002c70 <HAL_RCC_OscConfig+0x334>
 8002c92:	e014      	b.n	8002cbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c94:	f7fe f8e8 	bl	8000e68 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9a:	e00a      	b.n	8002cb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c9c:	f7fe f8e4 	bl	8000e68 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e0b5      	b.n	8002e1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb2:	4b3e      	ldr	r3, [pc, #248]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1ee      	bne.n	8002c9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cbe:	7dfb      	ldrb	r3, [r7, #23]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d105      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc4:	4b39      	ldr	r3, [pc, #228]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	4a38      	ldr	r2, [pc, #224]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80a1 	beq.w	8002e1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cda:	4b34      	ldr	r3, [pc, #208]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d05c      	beq.n	8002da0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d141      	bne.n	8002d72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cee:	4b31      	ldr	r3, [pc, #196]	; (8002db4 <HAL_RCC_OscConfig+0x478>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7fe f8b8 	bl	8000e68 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cfc:	f7fe f8b4 	bl	8000e68 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e087      	b.n	8002e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0e:	4b27      	ldr	r3, [pc, #156]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69da      	ldr	r2, [r3, #28]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	019b      	lsls	r3, r3, #6
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d30:	085b      	lsrs	r3, r3, #1
 8002d32:	3b01      	subs	r3, #1
 8002d34:	041b      	lsls	r3, r3, #16
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	061b      	lsls	r3, r3, #24
 8002d3e:	491b      	ldr	r1, [pc, #108]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d44:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <HAL_RCC_OscConfig+0x478>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4a:	f7fe f88d 	bl	8000e68 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d52:	f7fe f889 	bl	8000e68 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e05c      	b.n	8002e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d64:	4b11      	ldr	r3, [pc, #68]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCC_OscConfig+0x416>
 8002d70:	e054      	b.n	8002e1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <HAL_RCC_OscConfig+0x478>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7fe f876 	bl	8000e68 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d80:	f7fe f872 	bl	8000e68 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e045      	b.n	8002e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_RCC_OscConfig+0x470>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x444>
 8002d9e:	e03d      	b.n	8002e1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d107      	bne.n	8002db8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e038      	b.n	8002e1e <HAL_RCC_OscConfig+0x4e2>
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40007000 	.word	0x40007000
 8002db4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002db8:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <HAL_RCC_OscConfig+0x4ec>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d028      	beq.n	8002e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d121      	bne.n	8002e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d11a      	bne.n	8002e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002de8:	4013      	ands	r3, r2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d111      	bne.n	8002e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	085b      	lsrs	r3, r3, #1
 8002e00:	3b01      	subs	r3, #1
 8002e02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d107      	bne.n	8002e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800

08002e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0cc      	b.n	8002fda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e40:	4b68      	ldr	r3, [pc, #416]	; (8002fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d90c      	bls.n	8002e68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4e:	4b65      	ldr	r3, [pc, #404]	; (8002fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e56:	4b63      	ldr	r3, [pc, #396]	; (8002fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0b8      	b.n	8002fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d020      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e80:	4b59      	ldr	r3, [pc, #356]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	4a58      	ldr	r2, [pc, #352]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e98:	4b53      	ldr	r3, [pc, #332]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	4a52      	ldr	r2, [pc, #328]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ea2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea4:	4b50      	ldr	r3, [pc, #320]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	494d      	ldr	r1, [pc, #308]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d044      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d107      	bne.n	8002eda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	4b47      	ldr	r3, [pc, #284]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d119      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e07f      	b.n	8002fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d003      	beq.n	8002eea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d107      	bne.n	8002efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eea:	4b3f      	ldr	r3, [pc, #252]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e06f      	b.n	8002fda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efa:	4b3b      	ldr	r3, [pc, #236]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e067      	b.n	8002fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0a:	4b37      	ldr	r3, [pc, #220]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f023 0203 	bic.w	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4934      	ldr	r1, [pc, #208]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f1c:	f7fd ffa4 	bl	8000e68 <HAL_GetTick>
 8002f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f24:	f7fd ffa0 	bl	8000e68 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e04f      	b.n	8002fda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3a:	4b2b      	ldr	r3, [pc, #172]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 020c 	and.w	r2, r3, #12
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d1eb      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f4c:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d20c      	bcs.n	8002f74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5a:	4b22      	ldr	r3, [pc, #136]	; (8002fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f62:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e032      	b.n	8002fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f80:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4916      	ldr	r1, [pc, #88]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d009      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f9e:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	490e      	ldr	r1, [pc, #56]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fb2:	f000 f821 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	091b      	lsrs	r3, r3, #4
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	490a      	ldr	r1, [pc, #40]	; (8002fec <HAL_RCC_ClockConfig+0x1c0>)
 8002fc4:	5ccb      	ldrb	r3, [r1, r3]
 8002fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fca:	4a09      	ldr	r2, [pc, #36]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fce:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd fc06 	bl	80007e4 <HAL_InitTick>

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40023c00 	.word	0x40023c00
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	08015d74 	.word	0x08015d74
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	20000004 	.word	0x20000004

08002ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ffc:	b094      	sub	sp, #80	; 0x50
 8002ffe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	647b      	str	r3, [r7, #68]	; 0x44
 8003004:	2300      	movs	r3, #0
 8003006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003008:	2300      	movs	r3, #0
 800300a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003010:	4b79      	ldr	r3, [pc, #484]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 030c 	and.w	r3, r3, #12
 8003018:	2b08      	cmp	r3, #8
 800301a:	d00d      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0x40>
 800301c:	2b08      	cmp	r3, #8
 800301e:	f200 80e1 	bhi.w	80031e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_RCC_GetSysClockFreq+0x34>
 8003026:	2b04      	cmp	r3, #4
 8003028:	d003      	beq.n	8003032 <HAL_RCC_GetSysClockFreq+0x3a>
 800302a:	e0db      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800302c:	4b73      	ldr	r3, [pc, #460]	; (80031fc <HAL_RCC_GetSysClockFreq+0x204>)
 800302e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003030:	e0db      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003032:	4b73      	ldr	r3, [pc, #460]	; (8003200 <HAL_RCC_GetSysClockFreq+0x208>)
 8003034:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003036:	e0d8      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003038:	4b6f      	ldr	r3, [pc, #444]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003040:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003042:	4b6d      	ldr	r3, [pc, #436]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d063      	beq.n	8003116 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304e:	4b6a      	ldr	r3, [pc, #424]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	099b      	lsrs	r3, r3, #6
 8003054:	2200      	movs	r2, #0
 8003056:	63bb      	str	r3, [r7, #56]	; 0x38
 8003058:	63fa      	str	r2, [r7, #60]	; 0x3c
 800305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003060:	633b      	str	r3, [r7, #48]	; 0x30
 8003062:	2300      	movs	r3, #0
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
 8003066:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800306a:	4622      	mov	r2, r4
 800306c:	462b      	mov	r3, r5
 800306e:	f04f 0000 	mov.w	r0, #0
 8003072:	f04f 0100 	mov.w	r1, #0
 8003076:	0159      	lsls	r1, r3, #5
 8003078:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800307c:	0150      	lsls	r0, r2, #5
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4621      	mov	r1, r4
 8003084:	1a51      	subs	r1, r2, r1
 8003086:	6139      	str	r1, [r7, #16]
 8003088:	4629      	mov	r1, r5
 800308a:	eb63 0301 	sbc.w	r3, r3, r1
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800309c:	4659      	mov	r1, fp
 800309e:	018b      	lsls	r3, r1, #6
 80030a0:	4651      	mov	r1, sl
 80030a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030a6:	4651      	mov	r1, sl
 80030a8:	018a      	lsls	r2, r1, #6
 80030aa:	4651      	mov	r1, sl
 80030ac:	ebb2 0801 	subs.w	r8, r2, r1
 80030b0:	4659      	mov	r1, fp
 80030b2:	eb63 0901 	sbc.w	r9, r3, r1
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030ca:	4690      	mov	r8, r2
 80030cc:	4699      	mov	r9, r3
 80030ce:	4623      	mov	r3, r4
 80030d0:	eb18 0303 	adds.w	r3, r8, r3
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	462b      	mov	r3, r5
 80030d8:	eb49 0303 	adc.w	r3, r9, r3
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030ea:	4629      	mov	r1, r5
 80030ec:	024b      	lsls	r3, r1, #9
 80030ee:	4621      	mov	r1, r4
 80030f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030f4:	4621      	mov	r1, r4
 80030f6:	024a      	lsls	r2, r1, #9
 80030f8:	4610      	mov	r0, r2
 80030fa:	4619      	mov	r1, r3
 80030fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030fe:	2200      	movs	r2, #0
 8003100:	62bb      	str	r3, [r7, #40]	; 0x28
 8003102:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003104:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003108:	f7fd f8c2 	bl	8000290 <__aeabi_uldivmod>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4613      	mov	r3, r2
 8003112:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003114:	e058      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003116:	4b38      	ldr	r3, [pc, #224]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	099b      	lsrs	r3, r3, #6
 800311c:	2200      	movs	r2, #0
 800311e:	4618      	mov	r0, r3
 8003120:	4611      	mov	r1, r2
 8003122:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003126:	623b      	str	r3, [r7, #32]
 8003128:	2300      	movs	r3, #0
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
 800312c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003130:	4642      	mov	r2, r8
 8003132:	464b      	mov	r3, r9
 8003134:	f04f 0000 	mov.w	r0, #0
 8003138:	f04f 0100 	mov.w	r1, #0
 800313c:	0159      	lsls	r1, r3, #5
 800313e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003142:	0150      	lsls	r0, r2, #5
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4641      	mov	r1, r8
 800314a:	ebb2 0a01 	subs.w	sl, r2, r1
 800314e:	4649      	mov	r1, r9
 8003150:	eb63 0b01 	sbc.w	fp, r3, r1
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003160:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003164:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003168:	ebb2 040a 	subs.w	r4, r2, sl
 800316c:	eb63 050b 	sbc.w	r5, r3, fp
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	00eb      	lsls	r3, r5, #3
 800317a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800317e:	00e2      	lsls	r2, r4, #3
 8003180:	4614      	mov	r4, r2
 8003182:	461d      	mov	r5, r3
 8003184:	4643      	mov	r3, r8
 8003186:	18e3      	adds	r3, r4, r3
 8003188:	603b      	str	r3, [r7, #0]
 800318a:	464b      	mov	r3, r9
 800318c:	eb45 0303 	adc.w	r3, r5, r3
 8003190:	607b      	str	r3, [r7, #4]
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800319e:	4629      	mov	r1, r5
 80031a0:	028b      	lsls	r3, r1, #10
 80031a2:	4621      	mov	r1, r4
 80031a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031a8:	4621      	mov	r1, r4
 80031aa:	028a      	lsls	r2, r1, #10
 80031ac:	4610      	mov	r0, r2
 80031ae:	4619      	mov	r1, r3
 80031b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031b2:	2200      	movs	r2, #0
 80031b4:	61bb      	str	r3, [r7, #24]
 80031b6:	61fa      	str	r2, [r7, #28]
 80031b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031bc:	f7fd f868 	bl	8000290 <__aeabi_uldivmod>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4613      	mov	r3, r2
 80031c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	0c1b      	lsrs	r3, r3, #16
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	3301      	adds	r3, #1
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80031d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031e2:	e002      	b.n	80031ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_RCC_GetSysClockFreq+0x204>)
 80031e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3750      	adds	r7, #80	; 0x50
 80031f0:	46bd      	mov	sp, r7
 80031f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031f6:	bf00      	nop
 80031f8:	40023800 	.word	0x40023800
 80031fc:	00f42400 	.word	0x00f42400
 8003200:	007a1200 	.word	0x007a1200

08003204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003208:	4b03      	ldr	r3, [pc, #12]	; (8003218 <HAL_RCC_GetHCLKFreq+0x14>)
 800320a:	681b      	ldr	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	20000000 	.word	0x20000000

0800321c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003220:	f7ff fff0 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003224:	4602      	mov	r2, r0
 8003226:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	0a9b      	lsrs	r3, r3, #10
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	4903      	ldr	r1, [pc, #12]	; (8003240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003232:	5ccb      	ldrb	r3, [r1, r3]
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003238:	4618      	mov	r0, r3
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40023800 	.word	0x40023800
 8003240:	08015d84 	.word	0x08015d84

08003244 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	220f      	movs	r2, #15
 8003252:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003254:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <HAL_RCC_GetClockConfig+0x5c>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0203 	and.w	r2, r3, #3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003260:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <HAL_RCC_GetClockConfig+0x5c>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800326c:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <HAL_RCC_GetClockConfig+0x5c>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003278:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <HAL_RCC_GetClockConfig+0x5c>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	08db      	lsrs	r3, r3, #3
 800327e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003286:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <HAL_RCC_GetClockConfig+0x60>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 020f 	and.w	r2, r3, #15
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	601a      	str	r2, [r3, #0]
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40023c00 	.word	0x40023c00

080032a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e041      	b.n	800333e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f839 	bl	8003346 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4619      	mov	r1, r3
 80032e6:	4610      	mov	r0, r2
 80032e8:	f000 f9c0 	bl	800366c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d001      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e04e      	b.n	8003412 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a23      	ldr	r2, [pc, #140]	; (8003420 <HAL_TIM_Base_Start_IT+0xc4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d022      	beq.n	80033dc <HAL_TIM_Base_Start_IT+0x80>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339e:	d01d      	beq.n	80033dc <HAL_TIM_Base_Start_IT+0x80>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1f      	ldr	r2, [pc, #124]	; (8003424 <HAL_TIM_Base_Start_IT+0xc8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d018      	beq.n	80033dc <HAL_TIM_Base_Start_IT+0x80>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1e      	ldr	r2, [pc, #120]	; (8003428 <HAL_TIM_Base_Start_IT+0xcc>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d013      	beq.n	80033dc <HAL_TIM_Base_Start_IT+0x80>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a1c      	ldr	r2, [pc, #112]	; (800342c <HAL_TIM_Base_Start_IT+0xd0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00e      	beq.n	80033dc <HAL_TIM_Base_Start_IT+0x80>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1b      	ldr	r2, [pc, #108]	; (8003430 <HAL_TIM_Base_Start_IT+0xd4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d009      	beq.n	80033dc <HAL_TIM_Base_Start_IT+0x80>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a19      	ldr	r2, [pc, #100]	; (8003434 <HAL_TIM_Base_Start_IT+0xd8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d004      	beq.n	80033dc <HAL_TIM_Base_Start_IT+0x80>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a18      	ldr	r2, [pc, #96]	; (8003438 <HAL_TIM_Base_Start_IT+0xdc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d111      	bne.n	8003400 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b06      	cmp	r3, #6
 80033ec:	d010      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0201 	orr.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033fe:	e007      	b.n	8003410 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40010000 	.word	0x40010000
 8003424:	40000400 	.word	0x40000400
 8003428:	40000800 	.word	0x40000800
 800342c:	40000c00 	.word	0x40000c00
 8003430:	40010400 	.word	0x40010400
 8003434:	40014000 	.word	0x40014000
 8003438:	40001800 	.word	0x40001800

0800343c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d020      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01b      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0202 	mvn.w	r2, #2
 8003470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f8d2 	bl	8003630 <HAL_TIM_IC_CaptureCallback>
 800348c:	e005      	b.n	800349a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f8c4 	bl	800361c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f8d5 	bl	8003644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d020      	beq.n	80034ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d01b      	beq.n	80034ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0204 	mvn.w	r2, #4
 80034bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f8ac 	bl	8003630 <HAL_TIM_IC_CaptureCallback>
 80034d8:	e005      	b.n	80034e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f89e 	bl	800361c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f8af 	bl	8003644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d020      	beq.n	8003538 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d01b      	beq.n	8003538 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0208 	mvn.w	r2, #8
 8003508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2204      	movs	r2, #4
 800350e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f886 	bl	8003630 <HAL_TIM_IC_CaptureCallback>
 8003524:	e005      	b.n	8003532 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f878 	bl	800361c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f889 	bl	8003644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b00      	cmp	r3, #0
 8003540:	d020      	beq.n	8003584 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	2b00      	cmp	r3, #0
 800354a:	d01b      	beq.n	8003584 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0210 	mvn.w	r2, #16
 8003554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2208      	movs	r2, #8
 800355a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f860 	bl	8003630 <HAL_TIM_IC_CaptureCallback>
 8003570:	e005      	b.n	800357e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f852 	bl	800361c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f863 	bl	8003644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00c      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0201 	mvn.w	r2, #1
 80035a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd f8da 	bl	800075c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00c      	beq.n	80035cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f906 	bl	80037d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00c      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f834 	bl	8003658 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00c      	beq.n	8003614 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0220 	mvn.w	r2, #32
 800360c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8d8 	bl	80037c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003614:	bf00      	nop
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a46      	ldr	r2, [pc, #280]	; (8003798 <TIM_Base_SetConfig+0x12c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d013      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368a:	d00f      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a43      	ldr	r2, [pc, #268]	; (800379c <TIM_Base_SetConfig+0x130>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00b      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a42      	ldr	r2, [pc, #264]	; (80037a0 <TIM_Base_SetConfig+0x134>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d007      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a41      	ldr	r2, [pc, #260]	; (80037a4 <TIM_Base_SetConfig+0x138>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d003      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a40      	ldr	r2, [pc, #256]	; (80037a8 <TIM_Base_SetConfig+0x13c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d108      	bne.n	80036be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a35      	ldr	r2, [pc, #212]	; (8003798 <TIM_Base_SetConfig+0x12c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d02b      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036cc:	d027      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a32      	ldr	r2, [pc, #200]	; (800379c <TIM_Base_SetConfig+0x130>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d023      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a31      	ldr	r2, [pc, #196]	; (80037a0 <TIM_Base_SetConfig+0x134>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d01f      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a30      	ldr	r2, [pc, #192]	; (80037a4 <TIM_Base_SetConfig+0x138>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01b      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a2f      	ldr	r2, [pc, #188]	; (80037a8 <TIM_Base_SetConfig+0x13c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d017      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a2e      	ldr	r2, [pc, #184]	; (80037ac <TIM_Base_SetConfig+0x140>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a2d      	ldr	r2, [pc, #180]	; (80037b0 <TIM_Base_SetConfig+0x144>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00f      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a2c      	ldr	r2, [pc, #176]	; (80037b4 <TIM_Base_SetConfig+0x148>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00b      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a2b      	ldr	r2, [pc, #172]	; (80037b8 <TIM_Base_SetConfig+0x14c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d007      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a2a      	ldr	r2, [pc, #168]	; (80037bc <TIM_Base_SetConfig+0x150>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d003      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a29      	ldr	r2, [pc, #164]	; (80037c0 <TIM_Base_SetConfig+0x154>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d108      	bne.n	8003730 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a10      	ldr	r2, [pc, #64]	; (8003798 <TIM_Base_SetConfig+0x12c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <TIM_Base_SetConfig+0xf8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a12      	ldr	r2, [pc, #72]	; (80037a8 <TIM_Base_SetConfig+0x13c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d103      	bne.n	800376c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b01      	cmp	r3, #1
 800377c:	d105      	bne.n	800378a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f023 0201 	bic.w	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	611a      	str	r2, [r3, #16]
  }
}
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40010000 	.word	0x40010000
 800379c:	40000400 	.word	0x40000400
 80037a0:	40000800 	.word	0x40000800
 80037a4:	40000c00 	.word	0x40000c00
 80037a8:	40010400 	.word	0x40010400
 80037ac:	40014000 	.word	0x40014000
 80037b0:	40014400 	.word	0x40014400
 80037b4:	40014800 	.word	0x40014800
 80037b8:	40001800 	.word	0x40001800
 80037bc:	40001c00 	.word	0x40001c00
 80037c0:	40002000 	.word	0x40002000

080037c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80037f2:	4b92      	ldr	r3, [pc, #584]	; (8003a3c <MX_LWIP_Init+0x250>)
 80037f4:	22c0      	movs	r2, #192	; 0xc0
 80037f6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80037f8:	4b90      	ldr	r3, [pc, #576]	; (8003a3c <MX_LWIP_Init+0x250>)
 80037fa:	22a8      	movs	r2, #168	; 0xa8
 80037fc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 80037fe:	4b8f      	ldr	r3, [pc, #572]	; (8003a3c <MX_LWIP_Init+0x250>)
 8003800:	2264      	movs	r2, #100	; 0x64
 8003802:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8003804:	4b8d      	ldr	r3, [pc, #564]	; (8003a3c <MX_LWIP_Init+0x250>)
 8003806:	227b      	movs	r2, #123	; 0x7b
 8003808:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800380a:	4b8d      	ldr	r3, [pc, #564]	; (8003a40 <MX_LWIP_Init+0x254>)
 800380c:	22ff      	movs	r2, #255	; 0xff
 800380e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003810:	4b8b      	ldr	r3, [pc, #556]	; (8003a40 <MX_LWIP_Init+0x254>)
 8003812:	22ff      	movs	r2, #255	; 0xff
 8003814:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003816:	4b8a      	ldr	r3, [pc, #552]	; (8003a40 <MX_LWIP_Init+0x254>)
 8003818:	22ff      	movs	r2, #255	; 0xff
 800381a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800381c:	4b88      	ldr	r3, [pc, #544]	; (8003a40 <MX_LWIP_Init+0x254>)
 800381e:	2200      	movs	r2, #0
 8003820:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003822:	4b88      	ldr	r3, [pc, #544]	; (8003a44 <MX_LWIP_Init+0x258>)
 8003824:	22c0      	movs	r2, #192	; 0xc0
 8003826:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003828:	4b86      	ldr	r3, [pc, #536]	; (8003a44 <MX_LWIP_Init+0x258>)
 800382a:	22a8      	movs	r2, #168	; 0xa8
 800382c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 100;
 800382e:	4b85      	ldr	r3, [pc, #532]	; (8003a44 <MX_LWIP_Init+0x258>)
 8003830:	2264      	movs	r2, #100	; 0x64
 8003832:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003834:	4b83      	ldr	r3, [pc, #524]	; (8003a44 <MX_LWIP_Init+0x258>)
 8003836:	2201      	movs	r2, #1
 8003838:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800383a:	2100      	movs	r1, #0
 800383c:	2000      	movs	r0, #0
 800383e:	f004 fd6d 	bl	800831c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003842:	4b7e      	ldr	r3, [pc, #504]	; (8003a3c <MX_LWIP_Init+0x250>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	061a      	lsls	r2, r3, #24
 8003848:	4b7c      	ldr	r3, [pc, #496]	; (8003a3c <MX_LWIP_Init+0x250>)
 800384a:	785b      	ldrb	r3, [r3, #1]
 800384c:	041b      	lsls	r3, r3, #16
 800384e:	431a      	orrs	r2, r3
 8003850:	4b7a      	ldr	r3, [pc, #488]	; (8003a3c <MX_LWIP_Init+0x250>)
 8003852:	789b      	ldrb	r3, [r3, #2]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	4313      	orrs	r3, r2
 8003858:	4a78      	ldr	r2, [pc, #480]	; (8003a3c <MX_LWIP_Init+0x250>)
 800385a:	78d2      	ldrb	r2, [r2, #3]
 800385c:	4313      	orrs	r3, r2
 800385e:	061a      	lsls	r2, r3, #24
 8003860:	4b76      	ldr	r3, [pc, #472]	; (8003a3c <MX_LWIP_Init+0x250>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	0619      	lsls	r1, r3, #24
 8003866:	4b75      	ldr	r3, [pc, #468]	; (8003a3c <MX_LWIP_Init+0x250>)
 8003868:	785b      	ldrb	r3, [r3, #1]
 800386a:	041b      	lsls	r3, r3, #16
 800386c:	4319      	orrs	r1, r3
 800386e:	4b73      	ldr	r3, [pc, #460]	; (8003a3c <MX_LWIP_Init+0x250>)
 8003870:	789b      	ldrb	r3, [r3, #2]
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	430b      	orrs	r3, r1
 8003876:	4971      	ldr	r1, [pc, #452]	; (8003a3c <MX_LWIP_Init+0x250>)
 8003878:	78c9      	ldrb	r1, [r1, #3]
 800387a:	430b      	orrs	r3, r1
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003882:	431a      	orrs	r2, r3
 8003884:	4b6d      	ldr	r3, [pc, #436]	; (8003a3c <MX_LWIP_Init+0x250>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	0619      	lsls	r1, r3, #24
 800388a:	4b6c      	ldr	r3, [pc, #432]	; (8003a3c <MX_LWIP_Init+0x250>)
 800388c:	785b      	ldrb	r3, [r3, #1]
 800388e:	041b      	lsls	r3, r3, #16
 8003890:	4319      	orrs	r1, r3
 8003892:	4b6a      	ldr	r3, [pc, #424]	; (8003a3c <MX_LWIP_Init+0x250>)
 8003894:	789b      	ldrb	r3, [r3, #2]
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	430b      	orrs	r3, r1
 800389a:	4968      	ldr	r1, [pc, #416]	; (8003a3c <MX_LWIP_Init+0x250>)
 800389c:	78c9      	ldrb	r1, [r1, #3]
 800389e:	430b      	orrs	r3, r1
 80038a0:	0a1b      	lsrs	r3, r3, #8
 80038a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80038a6:	431a      	orrs	r2, r3
 80038a8:	4b64      	ldr	r3, [pc, #400]	; (8003a3c <MX_LWIP_Init+0x250>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	0619      	lsls	r1, r3, #24
 80038ae:	4b63      	ldr	r3, [pc, #396]	; (8003a3c <MX_LWIP_Init+0x250>)
 80038b0:	785b      	ldrb	r3, [r3, #1]
 80038b2:	041b      	lsls	r3, r3, #16
 80038b4:	4319      	orrs	r1, r3
 80038b6:	4b61      	ldr	r3, [pc, #388]	; (8003a3c <MX_LWIP_Init+0x250>)
 80038b8:	789b      	ldrb	r3, [r3, #2]
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	430b      	orrs	r3, r1
 80038be:	495f      	ldr	r1, [pc, #380]	; (8003a3c <MX_LWIP_Init+0x250>)
 80038c0:	78c9      	ldrb	r1, [r1, #3]
 80038c2:	430b      	orrs	r3, r1
 80038c4:	0e1b      	lsrs	r3, r3, #24
 80038c6:	4313      	orrs	r3, r2
 80038c8:	4a5f      	ldr	r2, [pc, #380]	; (8003a48 <MX_LWIP_Init+0x25c>)
 80038ca:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80038cc:	4b5c      	ldr	r3, [pc, #368]	; (8003a40 <MX_LWIP_Init+0x254>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	061a      	lsls	r2, r3, #24
 80038d2:	4b5b      	ldr	r3, [pc, #364]	; (8003a40 <MX_LWIP_Init+0x254>)
 80038d4:	785b      	ldrb	r3, [r3, #1]
 80038d6:	041b      	lsls	r3, r3, #16
 80038d8:	431a      	orrs	r2, r3
 80038da:	4b59      	ldr	r3, [pc, #356]	; (8003a40 <MX_LWIP_Init+0x254>)
 80038dc:	789b      	ldrb	r3, [r3, #2]
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	4313      	orrs	r3, r2
 80038e2:	4a57      	ldr	r2, [pc, #348]	; (8003a40 <MX_LWIP_Init+0x254>)
 80038e4:	78d2      	ldrb	r2, [r2, #3]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	061a      	lsls	r2, r3, #24
 80038ea:	4b55      	ldr	r3, [pc, #340]	; (8003a40 <MX_LWIP_Init+0x254>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	0619      	lsls	r1, r3, #24
 80038f0:	4b53      	ldr	r3, [pc, #332]	; (8003a40 <MX_LWIP_Init+0x254>)
 80038f2:	785b      	ldrb	r3, [r3, #1]
 80038f4:	041b      	lsls	r3, r3, #16
 80038f6:	4319      	orrs	r1, r3
 80038f8:	4b51      	ldr	r3, [pc, #324]	; (8003a40 <MX_LWIP_Init+0x254>)
 80038fa:	789b      	ldrb	r3, [r3, #2]
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	430b      	orrs	r3, r1
 8003900:	494f      	ldr	r1, [pc, #316]	; (8003a40 <MX_LWIP_Init+0x254>)
 8003902:	78c9      	ldrb	r1, [r1, #3]
 8003904:	430b      	orrs	r3, r1
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800390c:	431a      	orrs	r2, r3
 800390e:	4b4c      	ldr	r3, [pc, #304]	; (8003a40 <MX_LWIP_Init+0x254>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	0619      	lsls	r1, r3, #24
 8003914:	4b4a      	ldr	r3, [pc, #296]	; (8003a40 <MX_LWIP_Init+0x254>)
 8003916:	785b      	ldrb	r3, [r3, #1]
 8003918:	041b      	lsls	r3, r3, #16
 800391a:	4319      	orrs	r1, r3
 800391c:	4b48      	ldr	r3, [pc, #288]	; (8003a40 <MX_LWIP_Init+0x254>)
 800391e:	789b      	ldrb	r3, [r3, #2]
 8003920:	021b      	lsls	r3, r3, #8
 8003922:	430b      	orrs	r3, r1
 8003924:	4946      	ldr	r1, [pc, #280]	; (8003a40 <MX_LWIP_Init+0x254>)
 8003926:	78c9      	ldrb	r1, [r1, #3]
 8003928:	430b      	orrs	r3, r1
 800392a:	0a1b      	lsrs	r3, r3, #8
 800392c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003930:	431a      	orrs	r2, r3
 8003932:	4b43      	ldr	r3, [pc, #268]	; (8003a40 <MX_LWIP_Init+0x254>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	0619      	lsls	r1, r3, #24
 8003938:	4b41      	ldr	r3, [pc, #260]	; (8003a40 <MX_LWIP_Init+0x254>)
 800393a:	785b      	ldrb	r3, [r3, #1]
 800393c:	041b      	lsls	r3, r3, #16
 800393e:	4319      	orrs	r1, r3
 8003940:	4b3f      	ldr	r3, [pc, #252]	; (8003a40 <MX_LWIP_Init+0x254>)
 8003942:	789b      	ldrb	r3, [r3, #2]
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	430b      	orrs	r3, r1
 8003948:	493d      	ldr	r1, [pc, #244]	; (8003a40 <MX_LWIP_Init+0x254>)
 800394a:	78c9      	ldrb	r1, [r1, #3]
 800394c:	430b      	orrs	r3, r1
 800394e:	0e1b      	lsrs	r3, r3, #24
 8003950:	4313      	orrs	r3, r2
 8003952:	4a3e      	ldr	r2, [pc, #248]	; (8003a4c <MX_LWIP_Init+0x260>)
 8003954:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003956:	4b3b      	ldr	r3, [pc, #236]	; (8003a44 <MX_LWIP_Init+0x258>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	061a      	lsls	r2, r3, #24
 800395c:	4b39      	ldr	r3, [pc, #228]	; (8003a44 <MX_LWIP_Init+0x258>)
 800395e:	785b      	ldrb	r3, [r3, #1]
 8003960:	041b      	lsls	r3, r3, #16
 8003962:	431a      	orrs	r2, r3
 8003964:	4b37      	ldr	r3, [pc, #220]	; (8003a44 <MX_LWIP_Init+0x258>)
 8003966:	789b      	ldrb	r3, [r3, #2]
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	4313      	orrs	r3, r2
 800396c:	4a35      	ldr	r2, [pc, #212]	; (8003a44 <MX_LWIP_Init+0x258>)
 800396e:	78d2      	ldrb	r2, [r2, #3]
 8003970:	4313      	orrs	r3, r2
 8003972:	061a      	lsls	r2, r3, #24
 8003974:	4b33      	ldr	r3, [pc, #204]	; (8003a44 <MX_LWIP_Init+0x258>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	0619      	lsls	r1, r3, #24
 800397a:	4b32      	ldr	r3, [pc, #200]	; (8003a44 <MX_LWIP_Init+0x258>)
 800397c:	785b      	ldrb	r3, [r3, #1]
 800397e:	041b      	lsls	r3, r3, #16
 8003980:	4319      	orrs	r1, r3
 8003982:	4b30      	ldr	r3, [pc, #192]	; (8003a44 <MX_LWIP_Init+0x258>)
 8003984:	789b      	ldrb	r3, [r3, #2]
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	430b      	orrs	r3, r1
 800398a:	492e      	ldr	r1, [pc, #184]	; (8003a44 <MX_LWIP_Init+0x258>)
 800398c:	78c9      	ldrb	r1, [r1, #3]
 800398e:	430b      	orrs	r3, r1
 8003990:	021b      	lsls	r3, r3, #8
 8003992:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003996:	431a      	orrs	r2, r3
 8003998:	4b2a      	ldr	r3, [pc, #168]	; (8003a44 <MX_LWIP_Init+0x258>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	0619      	lsls	r1, r3, #24
 800399e:	4b29      	ldr	r3, [pc, #164]	; (8003a44 <MX_LWIP_Init+0x258>)
 80039a0:	785b      	ldrb	r3, [r3, #1]
 80039a2:	041b      	lsls	r3, r3, #16
 80039a4:	4319      	orrs	r1, r3
 80039a6:	4b27      	ldr	r3, [pc, #156]	; (8003a44 <MX_LWIP_Init+0x258>)
 80039a8:	789b      	ldrb	r3, [r3, #2]
 80039aa:	021b      	lsls	r3, r3, #8
 80039ac:	430b      	orrs	r3, r1
 80039ae:	4925      	ldr	r1, [pc, #148]	; (8003a44 <MX_LWIP_Init+0x258>)
 80039b0:	78c9      	ldrb	r1, [r1, #3]
 80039b2:	430b      	orrs	r3, r1
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80039ba:	431a      	orrs	r2, r3
 80039bc:	4b21      	ldr	r3, [pc, #132]	; (8003a44 <MX_LWIP_Init+0x258>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	0619      	lsls	r1, r3, #24
 80039c2:	4b20      	ldr	r3, [pc, #128]	; (8003a44 <MX_LWIP_Init+0x258>)
 80039c4:	785b      	ldrb	r3, [r3, #1]
 80039c6:	041b      	lsls	r3, r3, #16
 80039c8:	4319      	orrs	r1, r3
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <MX_LWIP_Init+0x258>)
 80039cc:	789b      	ldrb	r3, [r3, #2]
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	430b      	orrs	r3, r1
 80039d2:	491c      	ldr	r1, [pc, #112]	; (8003a44 <MX_LWIP_Init+0x258>)
 80039d4:	78c9      	ldrb	r1, [r1, #3]
 80039d6:	430b      	orrs	r3, r1
 80039d8:	0e1b      	lsrs	r3, r3, #24
 80039da:	4313      	orrs	r3, r2
 80039dc:	4a1c      	ldr	r2, [pc, #112]	; (8003a50 <MX_LWIP_Init+0x264>)
 80039de:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80039e0:	4b1c      	ldr	r3, [pc, #112]	; (8003a54 <MX_LWIP_Init+0x268>)
 80039e2:	9302      	str	r3, [sp, #8]
 80039e4:	4b1c      	ldr	r3, [pc, #112]	; (8003a58 <MX_LWIP_Init+0x26c>)
 80039e6:	9301      	str	r3, [sp, #4]
 80039e8:	2300      	movs	r3, #0
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	4b18      	ldr	r3, [pc, #96]	; (8003a50 <MX_LWIP_Init+0x264>)
 80039ee:	4a17      	ldr	r2, [pc, #92]	; (8003a4c <MX_LWIP_Init+0x260>)
 80039f0:	4915      	ldr	r1, [pc, #84]	; (8003a48 <MX_LWIP_Init+0x25c>)
 80039f2:	481a      	ldr	r0, [pc, #104]	; (8003a5c <MX_LWIP_Init+0x270>)
 80039f4:	f005 fa5c 	bl	8008eb0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80039f8:	4818      	ldr	r0, [pc, #96]	; (8003a5c <MX_LWIP_Init+0x270>)
 80039fa:	f005 fc0b 	bl	8009214 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80039fe:	4817      	ldr	r0, [pc, #92]	; (8003a5c <MX_LWIP_Init+0x270>)
 8003a00:	f005 fc18 	bl	8009234 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003a04:	4916      	ldr	r1, [pc, #88]	; (8003a60 <MX_LWIP_Init+0x274>)
 8003a06:	4815      	ldr	r0, [pc, #84]	; (8003a5c <MX_LWIP_Init+0x270>)
 8003a08:	f005 fd16 	bl	8009438 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003a0c:	2224      	movs	r2, #36	; 0x24
 8003a0e:	2100      	movs	r1, #0
 8003a10:	4814      	ldr	r0, [pc, #80]	; (8003a64 <MX_LWIP_Init+0x278>)
 8003a12:	f00e fd06 	bl	8012422 <memset>
  attributes.name = "EthLink";
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <MX_LWIP_Init+0x278>)
 8003a18:	4a13      	ldr	r2, [pc, #76]	; (8003a68 <MX_LWIP_Init+0x27c>)
 8003a1a:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003a1c:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <MX_LWIP_Init+0x278>)
 8003a1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a22:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8003a24:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <MX_LWIP_Init+0x278>)
 8003a26:	2210      	movs	r2, #16
 8003a28:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8003a2a:	4a0e      	ldr	r2, [pc, #56]	; (8003a64 <MX_LWIP_Init+0x278>)
 8003a2c:	490b      	ldr	r1, [pc, #44]	; (8003a5c <MX_LWIP_Init+0x270>)
 8003a2e:	480f      	ldr	r0, [pc, #60]	; (8003a6c <MX_LWIP_Init+0x280>)
 8003a30:	f000 fd95 	bl	800455e <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003a34:	bf00      	nop
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	2000013c 	.word	0x2000013c
 8003a40:	20000140 	.word	0x20000140
 8003a44:	20000144 	.word	0x20000144
 8003a48:	20000130 	.word	0x20000130
 8003a4c:	20000134 	.word	0x20000134
 8003a50:	20000138 	.word	0x20000138
 8003a54:	08008259 	.word	0x08008259
 8003a58:	08003f21 	.word	0x08003f21
 8003a5c:	200000fc 	.word	0x200000fc
 8003a60:	08003a71 	.word	0x08003a71
 8003a64:	20000148 	.word	0x20000148
 8003a68:	0801324c 	.word	0x0801324c
 8003a6c:	08004205 	.word	0x08004205

08003a70 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8003a8c:	4b04      	ldr	r3, [pc, #16]	; (8003aa0 <HAL_ETH_RxCpltCallback+0x1c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fffb 	bl	8004a8c <osSemaphoreRelease>
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20004c38 	.word	0x20004c38

08003aa4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8003aac:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <HAL_ETH_TxCpltCallback+0x1c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 ffeb 	bl	8004a8c <osSemaphoreRelease>
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20004c3c 	.word	0x20004c3c

08003ac4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7fe f927 	bl	8001d20 <HAL_ETH_GetDMAError>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad8:	2b80      	cmp	r3, #128	; 0x80
 8003ada:	d104      	bne.n	8003ae6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8003adc:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <HAL_ETH_ErrorCallback+0x2c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 ffd3 	bl	8004a8c <osSemaphoreRelease>
  }
}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20004c38 	.word	0x20004c38

08003af4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b0aa      	sub	sp, #168	; 0xa8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8003b0e:	f107 0310 	add.w	r3, r7, #16
 8003b12:	2264      	movs	r2, #100	; 0x64
 8003b14:	2100      	movs	r1, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	f00e fc83 	bl	8012422 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003b1c:	4b85      	ldr	r3, [pc, #532]	; (8003d34 <low_level_init+0x240>)
 8003b1e:	4a86      	ldr	r2, [pc, #536]	; (8003d38 <low_level_init+0x244>)
 8003b20:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003b22:	2300      	movs	r3, #0
 8003b24:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003b26:	2380      	movs	r3, #128	; 0x80
 8003b28:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003b2a:	23e1      	movs	r3, #225	; 0xe1
 8003b2c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003b32:	2300      	movs	r3, #0
 8003b34:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003b36:	2300      	movs	r3, #0
 8003b38:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003b3a:	4a7e      	ldr	r2, [pc, #504]	; (8003d34 <low_level_init+0x240>)
 8003b3c:	f107 0308 	add.w	r3, r7, #8
 8003b40:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003b42:	4b7c      	ldr	r3, [pc, #496]	; (8003d34 <low_level_init+0x240>)
 8003b44:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003b48:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003b4a:	4b7a      	ldr	r3, [pc, #488]	; (8003d34 <low_level_init+0x240>)
 8003b4c:	4a7b      	ldr	r2, [pc, #492]	; (8003d3c <low_level_init+0x248>)
 8003b4e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003b50:	4b78      	ldr	r3, [pc, #480]	; (8003d34 <low_level_init+0x240>)
 8003b52:	4a7b      	ldr	r2, [pc, #492]	; (8003d40 <low_level_init+0x24c>)
 8003b54:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8003b56:	4b77      	ldr	r3, [pc, #476]	; (8003d34 <low_level_init+0x240>)
 8003b58:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003b5c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003b5e:	4875      	ldr	r0, [pc, #468]	; (8003d34 <low_level_init+0x240>)
 8003b60:	f7fd fa94 	bl	800108c <HAL_ETH_Init>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003b6a:	2238      	movs	r2, #56	; 0x38
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4875      	ldr	r0, [pc, #468]	; (8003d44 <low_level_init+0x250>)
 8003b70:	f00e fc57 	bl	8012422 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003b74:	4b73      	ldr	r3, [pc, #460]	; (8003d44 <low_level_init+0x250>)
 8003b76:	2221      	movs	r2, #33	; 0x21
 8003b78:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003b7a:	4b72      	ldr	r3, [pc, #456]	; (8003d44 <low_level_init+0x250>)
 8003b7c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8003b80:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003b82:	4b70      	ldr	r3, [pc, #448]	; (8003d44 <low_level_init+0x250>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003b88:	486f      	ldr	r0, [pc, #444]	; (8003d48 <low_level_init+0x254>)
 8003b8a:	f005 f84b 	bl	8008c24 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2206      	movs	r2, #6
 8003b92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003b96:	4b67      	ldr	r3, [pc, #412]	; (8003d34 <low_level_init+0x240>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	781a      	ldrb	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003ba2:	4b64      	ldr	r3, [pc, #400]	; (8003d34 <low_level_init+0x240>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	785a      	ldrb	r2, [r3, #1]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003bae:	4b61      	ldr	r3, [pc, #388]	; (8003d34 <low_level_init+0x240>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	789a      	ldrb	r2, [r3, #2]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003bba:	4b5e      	ldr	r3, [pc, #376]	; (8003d34 <low_level_init+0x240>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	78da      	ldrb	r2, [r3, #3]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003bc6:	4b5b      	ldr	r3, [pc, #364]	; (8003d34 <low_level_init+0x240>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	791a      	ldrb	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003bd2:	4b58      	ldr	r3, [pc, #352]	; (8003d34 <low_level_init+0x240>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	795a      	ldrb	r2, [r3, #5]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003be4:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003bec:	f043 030a 	orr.w	r3, r3, #10
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	f000 fe69 	bl	80048d4 <osSemaphoreNew>
 8003c02:	4603      	mov	r3, r0
 8003c04:	4a51      	ldr	r2, [pc, #324]	; (8003d4c <low_level_init+0x258>)
 8003c06:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	f000 fe61 	bl	80048d4 <osSemaphoreNew>
 8003c12:	4603      	mov	r3, r0
 8003c14:	4a4e      	ldr	r2, [pc, #312]	; (8003d50 <low_level_init+0x25c>)
 8003c16:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003c18:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003c1c:	2224      	movs	r2, #36	; 0x24
 8003c1e:	2100      	movs	r1, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f00e fbfe 	bl	8012422 <memset>
  attributes.name = "EthIf";
 8003c26:	4b4b      	ldr	r3, [pc, #300]	; (8003d54 <low_level_init+0x260>)
 8003c28:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003c2a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8003c2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8003c32:	2330      	movs	r3, #48	; 0x30
 8003c34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8003c38:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	4845      	ldr	r0, [pc, #276]	; (8003d58 <low_level_init+0x264>)
 8003c42:	f000 fc8c 	bl	800455e <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003c46:	4945      	ldr	r1, [pc, #276]	; (8003d5c <low_level_init+0x268>)
 8003c48:	4845      	ldr	r0, [pc, #276]	; (8003d60 <low_level_init+0x26c>)
 8003c4a:	f7fc ff76 	bl	8000b3a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8003c4e:	4844      	ldr	r0, [pc, #272]	; (8003d60 <low_level_init+0x26c>)
 8003c50:	f7fc ffa5 	bl	8000b9e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8003c54:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d164      	bne.n	8003d26 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003c5c:	4840      	ldr	r0, [pc, #256]	; (8003d60 <low_level_init+0x26c>)
 8003c5e:	f7fd f846 	bl	8000cee <LAN8742_GetLinkState>
 8003c62:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8003c66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	dc06      	bgt.n	8003c7c <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f005 fbb2 	bl	80093d8 <netif_set_link_down>
      netif_set_down(netif);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f005 fb49 	bl	800930c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003c7a:	e056      	b.n	8003d2a <low_level_init+0x236>
      switch (PHYLinkState)
 8003c7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c80:	3b02      	subs	r3, #2
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d82a      	bhi.n	8003cdc <low_level_init+0x1e8>
 8003c86:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <low_level_init+0x198>)
 8003c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8c:	08003c9d 	.word	0x08003c9d
 8003c90:	08003caf 	.word	0x08003caf
 8003c94:	08003cbf 	.word	0x08003cbf
 8003c98:	08003ccf 	.word	0x08003ccf
        duplex = ETH_FULLDUPLEX_MODE;
 8003c9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ca0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8003ca4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ca8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8003cac:	e01f      	b.n	8003cee <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8003cb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8003cbc:	e017      	b.n	8003cee <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8003cbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8003ccc:	e00f      	b.n	8003cee <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8003cda:	e008      	b.n	8003cee <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8003cdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ce0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8003ce4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ce8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8003cec:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003cee:	f107 0310 	add.w	r3, r7, #16
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	480f      	ldr	r0, [pc, #60]	; (8003d34 <low_level_init+0x240>)
 8003cf6:	f7fd feb9 	bl	8001a6c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8003cfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8003d00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003d06:	f107 0310 	add.w	r3, r7, #16
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4809      	ldr	r0, [pc, #36]	; (8003d34 <low_level_init+0x240>)
 8003d0e:	f7fd ff97 	bl	8001c40 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8003d12:	4808      	ldr	r0, [pc, #32]	; (8003d34 <low_level_init+0x240>)
 8003d14:	f7fd fa38 	bl	8001188 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f005 fa8b 	bl	8009234 <netif_set_up>
    netif_set_link_up(netif);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f005 fb26 	bl	8009370 <netif_set_link_up>
}
 8003d24:	e001      	b.n	8003d2a <low_level_init+0x236>
    Error_Handler();
 8003d26:	f7fc fd2b 	bl	8000780 <Error_Handler>
}
 8003d2a:	bf00      	nop
 8003d2c:	37a8      	adds	r7, #168	; 0xa8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20004c40 	.word	0x20004c40
 8003d38:	40028000 	.word	0x40028000
 8003d3c:	20004b98 	.word	0x20004b98
 8003d40:	20004af8 	.word	0x20004af8
 8003d44:	20004cf0 	.word	0x20004cf0
 8003d48:	08015d8c 	.word	0x08015d8c
 8003d4c:	20004c38 	.word	0x20004c38
 8003d50:	20004c3c 	.word	0x20004c3c
 8003d54:	08013254 	.word	0x08013254
 8003d58:	08003ecd 	.word	0x08003ecd
 8003d5c:	2000000c 	.word	0x2000000c
 8003d60:	20004d28 	.word	0x20004d28

08003d64 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b092      	sub	sp, #72	; 0x48
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003d7c:	f107 030c 	add.w	r3, r7, #12
 8003d80:	2230      	movs	r2, #48	; 0x30
 8003d82:	2100      	movs	r1, #0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f00e fb4c 	bl	8012422 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003d8a:	f107 030c 	add.w	r3, r7, #12
 8003d8e:	2230      	movs	r2, #48	; 0x30
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f00e fb45 	bl	8012422 <memset>

  for(q = p; q != NULL; q = q->next)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	643b      	str	r3, [r7, #64]	; 0x40
 8003d9c:	e045      	b.n	8003e2a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d902      	bls.n	8003daa <low_level_output+0x46>
      return ERR_IF;
 8003da4:	f06f 030b 	mvn.w	r3, #11
 8003da8:	e06c      	b.n	8003e84 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8003daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dac:	6859      	ldr	r1, [r3, #4]
 8003dae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003db0:	4613      	mov	r3, r2
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	3348      	adds	r3, #72	; 0x48
 8003dba:	443b      	add	r3, r7
 8003dbc:	3b3c      	subs	r3, #60	; 0x3c
 8003dbe:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc2:	895b      	ldrh	r3, [r3, #10]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dc8:	4613      	mov	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	3348      	adds	r3, #72	; 0x48
 8003dd2:	443b      	add	r3, r7
 8003dd4:	3b38      	subs	r3, #56	; 0x38
 8003dd6:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d011      	beq.n	8003e02 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de0:	1e5a      	subs	r2, r3, #1
 8003de2:	f107 000c 	add.w	r0, r7, #12
 8003de6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003de8:	460b      	mov	r3, r1
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	440b      	add	r3, r1
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	18c1      	adds	r1, r0, r3
 8003df2:	4613      	mov	r3, r2
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	3348      	adds	r3, #72	; 0x48
 8003dfc:	443b      	add	r3, r7
 8003dfe:	3b34      	subs	r3, #52	; 0x34
 8003e00:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003e0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	3348      	adds	r3, #72	; 0x48
 8003e16:	443b      	add	r3, r7
 8003e18:	3b34      	subs	r3, #52	; 0x34
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e20:	3301      	adds	r3, #1
 8003e22:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8003e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	643b      	str	r3, [r7, #64]	; 0x40
 8003e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1b6      	bne.n	8003d9e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	891b      	ldrh	r3, [r3, #8]
 8003e34:	461a      	mov	r2, r3
 8003e36:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <low_level_output+0x128>)
 8003e38:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003e3a:	4a14      	ldr	r2, [pc, #80]	; (8003e8c <low_level_output+0x128>)
 8003e3c:	f107 030c 	add.w	r3, r7, #12
 8003e40:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003e42:	4a12      	ldr	r2, [pc, #72]	; (8003e8c <low_level_output+0x128>)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8003e48:	6838      	ldr	r0, [r7, #0]
 8003e4a:	f005 ff49 	bl	8009ce0 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8003e4e:	490f      	ldr	r1, [pc, #60]	; (8003e8c <low_level_output+0x128>)
 8003e50:	480f      	ldr	r0, [pc, #60]	; (8003e90 <low_level_output+0x12c>)
 8003e52:	f7fd faa6 	bl	80013a2 <HAL_ETH_Transmit_IT>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10e      	bne.n	8003e7a <low_level_output+0x116>
    while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8003e5c:	bf00      	nop
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <low_level_output+0x130>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f04f 31ff 	mov.w	r1, #4294967295
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fdbe 	bl	80049e8 <osSemaphoreAcquire>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f5      	bne.n	8003e5e <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8003e72:	4807      	ldr	r0, [pc, #28]	; (8003e90 <low_level_output+0x12c>)
 8003e74:	f7fd fc34 	bl	80016e0 <HAL_ETH_ReleaseTxPacket>
 8003e78:	e002      	b.n	8003e80 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8003e7a:	6838      	ldr	r0, [r7, #0]
 8003e7c:	f005 fe8a 	bl	8009b94 <pbuf_free>
  }

  return errval;
 8003e80:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3748      	adds	r7, #72	; 0x48
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20004cf0 	.word	0x20004cf0
 8003e90:	20004c40 	.word	0x20004c40
 8003e94:	20004c3c 	.word	0x20004c3c

08003e98 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8003ea4:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <low_level_input+0x2c>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d105      	bne.n	8003eb8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003eac:	f107 030c 	add.w	r3, r7, #12
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4805      	ldr	r0, [pc, #20]	; (8003ec8 <low_level_input+0x30>)
 8003eb4:	f7fd fad1 	bl	800145a <HAL_ETH_ReadData>
  }

  return p;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20004af4 	.word	0x20004af4
 8003ec8:	20004c40 	.word	0x20004c40

08003ecc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <ethernetif_input+0x50>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fd7f 	bl	80049e8 <osSemaphoreAcquire>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f5      	bne.n	8003edc <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8003ef0:	68b8      	ldr	r0, [r7, #8]
 8003ef2:	f7ff ffd1 	bl	8003e98 <low_level_input>
 8003ef6:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	4798      	blx	r3
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f005 fe40 	bl	8009b94 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1ea      	bne.n	8003ef0 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003f1a:	e7df      	b.n	8003edc <ethernetif_input+0x10>
 8003f1c:	20004c38 	.word	0x20004c38

08003f20 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <ethernetif_init+0x1c>
 8003f2e:	4b0e      	ldr	r3, [pc, #56]	; (8003f68 <ethernetif_init+0x48>)
 8003f30:	f240 12e7 	movw	r2, #487	; 0x1e7
 8003f34:	490d      	ldr	r1, [pc, #52]	; (8003f6c <ethernetif_init+0x4c>)
 8003f36:	480e      	ldr	r0, [pc, #56]	; (8003f70 <ethernetif_init+0x50>)
 8003f38:	f00e fa0e 	bl	8012358 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2273      	movs	r2, #115	; 0x73
 8003f40:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2274      	movs	r2, #116	; 0x74
 8003f48:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a09      	ldr	r2, [pc, #36]	; (8003f74 <ethernetif_init+0x54>)
 8003f50:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a08      	ldr	r2, [pc, #32]	; (8003f78 <ethernetif_init+0x58>)
 8003f56:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff fdcb 	bl	8003af4 <low_level_init>

  return ERR_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	0801325c 	.word	0x0801325c
 8003f6c:	08013278 	.word	0x08013278
 8003f70:	08013288 	.word	0x08013288
 8003f74:	08010281 	.word	0x08010281
 8003f78:	08003d65 	.word	0x08003d65

08003f7c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003f88:	68f9      	ldr	r1, [r7, #12]
 8003f8a:	4809      	ldr	r0, [pc, #36]	; (8003fb0 <pbuf_free_custom+0x34>)
 8003f8c:	f004 ff3a 	bl	8008e04 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003f90:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <pbuf_free_custom+0x38>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d107      	bne.n	8003fa8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003f98:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <pbuf_free_custom+0x38>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8003f9e:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <pbuf_free_custom+0x3c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fd72 	bl	8004a8c <osSemaphoreRelease>
  }
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	08015d8c 	.word	0x08015d8c
 8003fb4:	20004af4 	.word	0x20004af4
 8003fb8:	20004c38 	.word	0x20004c38

08003fbc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003fc0:	f7fc ff52 	bl	8000e68 <HAL_GetTick>
 8003fc4:	4603      	mov	r3, r0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08e      	sub	sp, #56	; 0x38
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	605a      	str	r2, [r3, #4]
 8003fde:	609a      	str	r2, [r3, #8]
 8003fe0:	60da      	str	r2, [r3, #12]
 8003fe2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a59      	ldr	r2, [pc, #356]	; (8004150 <HAL_ETH_MspInit+0x184>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	f040 80ac 	bne.w	8004148 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	623b      	str	r3, [r7, #32]
 8003ff4:	4b57      	ldr	r3, [pc, #348]	; (8004154 <HAL_ETH_MspInit+0x188>)
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	4a56      	ldr	r2, [pc, #344]	; (8004154 <HAL_ETH_MspInit+0x188>)
 8003ffa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8004000:	4b54      	ldr	r3, [pc, #336]	; (8004154 <HAL_ETH_MspInit+0x188>)
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004008:	623b      	str	r3, [r7, #32]
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	2300      	movs	r3, #0
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	4b50      	ldr	r3, [pc, #320]	; (8004154 <HAL_ETH_MspInit+0x188>)
 8004012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004014:	4a4f      	ldr	r2, [pc, #316]	; (8004154 <HAL_ETH_MspInit+0x188>)
 8004016:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800401a:	6313      	str	r3, [r2, #48]	; 0x30
 800401c:	4b4d      	ldr	r3, [pc, #308]	; (8004154 <HAL_ETH_MspInit+0x188>)
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004024:	61fb      	str	r3, [r7, #28]
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	2300      	movs	r3, #0
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	4b49      	ldr	r3, [pc, #292]	; (8004154 <HAL_ETH_MspInit+0x188>)
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	4a48      	ldr	r2, [pc, #288]	; (8004154 <HAL_ETH_MspInit+0x188>)
 8004032:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004036:	6313      	str	r3, [r2, #48]	; 0x30
 8004038:	4b46      	ldr	r3, [pc, #280]	; (8004154 <HAL_ETH_MspInit+0x188>)
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	4b42      	ldr	r3, [pc, #264]	; (8004154 <HAL_ETH_MspInit+0x188>)
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	4a41      	ldr	r2, [pc, #260]	; (8004154 <HAL_ETH_MspInit+0x188>)
 800404e:	f043 0304 	orr.w	r3, r3, #4
 8004052:	6313      	str	r3, [r2, #48]	; 0x30
 8004054:	4b3f      	ldr	r3, [pc, #252]	; (8004154 <HAL_ETH_MspInit+0x188>)
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004060:	2300      	movs	r3, #0
 8004062:	613b      	str	r3, [r7, #16]
 8004064:	4b3b      	ldr	r3, [pc, #236]	; (8004154 <HAL_ETH_MspInit+0x188>)
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	4a3a      	ldr	r2, [pc, #232]	; (8004154 <HAL_ETH_MspInit+0x188>)
 800406a:	f043 0301 	orr.w	r3, r3, #1
 800406e:	6313      	str	r3, [r2, #48]	; 0x30
 8004070:	4b38      	ldr	r3, [pc, #224]	; (8004154 <HAL_ETH_MspInit+0x188>)
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	4b34      	ldr	r3, [pc, #208]	; (8004154 <HAL_ETH_MspInit+0x188>)
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	4a33      	ldr	r2, [pc, #204]	; (8004154 <HAL_ETH_MspInit+0x188>)
 8004086:	f043 0302 	orr.w	r3, r3, #2
 800408a:	6313      	str	r3, [r2, #48]	; 0x30
 800408c:	4b31      	ldr	r3, [pc, #196]	; (8004154 <HAL_ETH_MspInit+0x188>)
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004098:	2300      	movs	r3, #0
 800409a:	60bb      	str	r3, [r7, #8]
 800409c:	4b2d      	ldr	r3, [pc, #180]	; (8004154 <HAL_ETH_MspInit+0x188>)
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	4a2c      	ldr	r2, [pc, #176]	; (8004154 <HAL_ETH_MspInit+0x188>)
 80040a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040a6:	6313      	str	r3, [r2, #48]	; 0x30
 80040a8:	4b2a      	ldr	r3, [pc, #168]	; (8004154 <HAL_ETH_MspInit+0x188>)
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80040b4:	2332      	movs	r3, #50	; 0x32
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b8:	2302      	movs	r3, #2
 80040ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040bc:	2300      	movs	r3, #0
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040c0:	2303      	movs	r3, #3
 80040c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80040c4:	230b      	movs	r3, #11
 80040c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040cc:	4619      	mov	r1, r3
 80040ce:	4822      	ldr	r0, [pc, #136]	; (8004158 <HAL_ETH_MspInit+0x18c>)
 80040d0:	f7fe fa38 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80040d4:	2386      	movs	r3, #134	; 0x86
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d8:	2302      	movs	r3, #2
 80040da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e0:	2303      	movs	r3, #3
 80040e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80040e4:	230b      	movs	r3, #11
 80040e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040ec:	4619      	mov	r1, r3
 80040ee:	481b      	ldr	r0, [pc, #108]	; (800415c <HAL_ETH_MspInit+0x190>)
 80040f0:	f7fe fa28 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80040f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040fa:	2302      	movs	r3, #2
 80040fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004102:	2303      	movs	r3, #3
 8004104:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004106:	230b      	movs	r3, #11
 8004108:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800410a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800410e:	4619      	mov	r1, r3
 8004110:	4813      	ldr	r0, [pc, #76]	; (8004160 <HAL_ETH_MspInit+0x194>)
 8004112:	f7fe fa17 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8004116:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411c:	2302      	movs	r3, #2
 800411e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004120:	2300      	movs	r3, #0
 8004122:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004124:	2303      	movs	r3, #3
 8004126:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004128:	230b      	movs	r3, #11
 800412a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800412c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004130:	4619      	mov	r1, r3
 8004132:	480c      	ldr	r0, [pc, #48]	; (8004164 <HAL_ETH_MspInit+0x198>)
 8004134:	f7fe fa06 	bl	8002544 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004138:	2200      	movs	r2, #0
 800413a:	2105      	movs	r1, #5
 800413c:	203d      	movs	r0, #61	; 0x3d
 800413e:	f7fc ff7b 	bl	8001038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004142:	203d      	movs	r0, #61	; 0x3d
 8004144:	f7fc ff94 	bl	8001070 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004148:	bf00      	nop
 800414a:	3738      	adds	r7, #56	; 0x38
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40028000 	.word	0x40028000
 8004154:	40023800 	.word	0x40023800
 8004158:	40020800 	.word	0x40020800
 800415c:	40020000 	.word	0x40020000
 8004160:	40020400 	.word	0x40020400
 8004164:	40021800 	.word	0x40021800

08004168 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800416c:	4802      	ldr	r0, [pc, #8]	; (8004178 <ETH_PHY_IO_Init+0x10>)
 800416e:	f7fd fd81 	bl	8001c74 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	bd80      	pop	{r7, pc}
 8004178:	20004c40 	.word	0x20004c40

0800417c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  return 0;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	68f9      	ldr	r1, [r7, #12]
 800419e:	4807      	ldr	r0, [pc, #28]	; (80041bc <ETH_PHY_IO_ReadReg+0x30>)
 80041a0:	f7fd fbd0 	bl	8001944 <HAL_ETH_ReadPHYRegister>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80041aa:	f04f 33ff 	mov.w	r3, #4294967295
 80041ae:	e000      	b.n	80041b2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20004c40 	.word	0x20004c40

080041c0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	68f9      	ldr	r1, [r7, #12]
 80041d2:	4807      	ldr	r0, [pc, #28]	; (80041f0 <ETH_PHY_IO_WriteReg+0x30>)
 80041d4:	f7fd fc01 	bl	80019da <HAL_ETH_WritePHYRegister>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80041de:	f04f 33ff 	mov.w	r3, #4294967295
 80041e2:	e000      	b.n	80041e6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20004c40 	.word	0x20004c40

080041f4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80041f8:	f7fc fe36 	bl	8000e68 <HAL_GetTick>
 80041fc:	4603      	mov	r3, r0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b0a0      	sub	sp, #128	; 0x80
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800420c:	f107 0308 	add.w	r3, r7, #8
 8004210:	2264      	movs	r2, #100	; 0x64
 8004212:	2100      	movs	r1, #0
 8004214:	4618      	mov	r0, r3
 8004216:	f00e f904 	bl	8012422 <memset>
  int32_t PHYLinkState = 0;
 800421a:	2300      	movs	r3, #0
 800421c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004222:	2300      	movs	r3, #0
 8004224:	67bb      	str	r3, [r7, #120]	; 0x78
 8004226:	2300      	movs	r3, #0
 8004228:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800422e:	483a      	ldr	r0, [pc, #232]	; (8004318 <ethernet_link_thread+0x114>)
 8004230:	f7fc fd5d 	bl	8000cee <LAN8742_GetLinkState>
 8004234:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004238:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800423c:	089b      	lsrs	r3, r3, #2
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00c      	beq.n	8004262 <ethernet_link_thread+0x5e>
 8004248:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800424a:	2b01      	cmp	r3, #1
 800424c:	dc09      	bgt.n	8004262 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800424e:	4833      	ldr	r0, [pc, #204]	; (800431c <ethernet_link_thread+0x118>)
 8004250:	f7fd f828 	bl	80012a4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004254:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004256:	f005 f859 	bl	800930c <netif_set_down>
    netif_set_link_down(netif);
 800425a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800425c:	f005 f8bc 	bl	80093d8 <netif_set_link_down>
 8004260:	e055      	b.n	800430e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004264:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	d14e      	bne.n	800430e <ethernet_link_thread+0x10a>
 8004270:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004272:	2b01      	cmp	r3, #1
 8004274:	dd4b      	ble.n	800430e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8004276:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004278:	3b02      	subs	r3, #2
 800427a:	2b03      	cmp	r3, #3
 800427c:	d82a      	bhi.n	80042d4 <ethernet_link_thread+0xd0>
 800427e:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <ethernet_link_thread+0x80>)
 8004280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004284:	08004295 	.word	0x08004295
 8004288:	080042a7 	.word	0x080042a7
 800428c:	080042b7 	.word	0x080042b7
 8004290:	080042c7 	.word	0x080042c7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004294:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004298:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800429a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800429e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80042a0:	2301      	movs	r3, #1
 80042a2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80042a4:	e017      	b.n	80042d6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80042a6:	2300      	movs	r3, #0
 80042a8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80042aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042ae:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80042b0:	2301      	movs	r3, #1
 80042b2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80042b4:	e00f      	b.n	80042d6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80042b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042ba:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80042bc:	2300      	movs	r3, #0
 80042be:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80042c0:	2301      	movs	r3, #1
 80042c2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80042c4:	e007      	b.n	80042d6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80042c6:	2300      	movs	r3, #0
 80042c8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80042ca:	2300      	movs	r3, #0
 80042cc:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80042ce:	2301      	movs	r3, #1
 80042d0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80042d2:	e000      	b.n	80042d6 <ethernet_link_thread+0xd2>
    default:
      break;
 80042d4:	bf00      	nop
    }

    if(linkchanged)
 80042d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d018      	beq.n	800430e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80042dc:	f107 0308 	add.w	r3, r7, #8
 80042e0:	4619      	mov	r1, r3
 80042e2:	480e      	ldr	r0, [pc, #56]	; (800431c <ethernet_link_thread+0x118>)
 80042e4:	f7fd fbc2 	bl	8001a6c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80042e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042ea:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80042ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042ee:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80042f0:	f107 0308 	add.w	r3, r7, #8
 80042f4:	4619      	mov	r1, r3
 80042f6:	4809      	ldr	r0, [pc, #36]	; (800431c <ethernet_link_thread+0x118>)
 80042f8:	f7fd fca2 	bl	8001c40 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80042fc:	4807      	ldr	r0, [pc, #28]	; (800431c <ethernet_link_thread+0x118>)
 80042fe:	f7fc ff43 	bl	8001188 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8004302:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004304:	f004 ff96 	bl	8009234 <netif_set_up>
      netif_set_link_up(netif);
 8004308:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800430a:	f005 f831 	bl	8009370 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800430e:	2064      	movs	r0, #100	; 0x64
 8004310:	f000 f9b7 	bl	8004682 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004314:	e78b      	b.n	800422e <ethernet_link_thread+0x2a>
 8004316:	bf00      	nop
 8004318:	20004d28 	.word	0x20004d28
 800431c:	20004c40 	.word	0x20004c40

08004320 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af02      	add	r7, sp, #8
 8004326:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004328:	4812      	ldr	r0, [pc, #72]	; (8004374 <HAL_ETH_RxAllocateCallback+0x54>)
 800432a:	f004 fcf7 	bl	8008d1c <memp_malloc_pool>
 800432e:	60f8      	str	r0, [r7, #12]
  if (p)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d014      	beq.n	8004360 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f103 0220 	add.w	r2, r3, #32
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4a0d      	ldr	r2, [pc, #52]	; (8004378 <HAL_ETH_RxAllocateCallback+0x58>)
 8004344:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800434e:	9201      	str	r2, [sp, #4]
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2241      	movs	r2, #65	; 0x41
 8004356:	2100      	movs	r1, #0
 8004358:	2000      	movs	r0, #0
 800435a:	f005 fa61 	bl	8009820 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800435e:	e005      	b.n	800436c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004360:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_ETH_RxAllocateCallback+0x5c>)
 8004362:	2201      	movs	r2, #1
 8004364:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
}
 800436c:	bf00      	nop
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	08015d8c 	.word	0x08015d8c
 8004378:	08003f7d 	.word	0x08003f7d
 800437c:	20004af4 	.word	0x20004af4

08004380 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004380:	b480      	push	{r7}
 8004382:	b089      	sub	sp, #36	; 0x24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3b20      	subs	r3, #32
 800439e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	2200      	movs	r2, #0
 80043aa:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	887a      	ldrh	r2, [r7, #2]
 80043b0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d103      	bne.n	80043c2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	e003      	b.n	80043ca <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	e009      	b.n	80043ec <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	891a      	ldrh	r2, [r3, #8]
 80043dc:	887b      	ldrh	r3, [r7, #2]
 80043de:	4413      	add	r3, r2
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	61fb      	str	r3, [r7, #28]
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f2      	bne.n	80043d8 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80043f2:	bf00      	nop
 80043f4:	bf00      	nop
 80043f6:	3724      	adds	r7, #36	; 0x24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f005 fbc3 	bl	8009b94 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <__NVIC_SetPriority>:
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	6039      	str	r1, [r7, #0]
 8004422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004428:	2b00      	cmp	r3, #0
 800442a:	db0a      	blt.n	8004442 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	b2da      	uxtb	r2, r3
 8004430:	490c      	ldr	r1, [pc, #48]	; (8004464 <__NVIC_SetPriority+0x4c>)
 8004432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004436:	0112      	lsls	r2, r2, #4
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	440b      	add	r3, r1
 800443c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004440:	e00a      	b.n	8004458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	b2da      	uxtb	r2, r3
 8004446:	4908      	ldr	r1, [pc, #32]	; (8004468 <__NVIC_SetPriority+0x50>)
 8004448:	79fb      	ldrb	r3, [r7, #7]
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	3b04      	subs	r3, #4
 8004450:	0112      	lsls	r2, r2, #4
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	440b      	add	r3, r1
 8004456:	761a      	strb	r2, [r3, #24]
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	e000e100 	.word	0xe000e100
 8004468:	e000ed00 	.word	0xe000ed00

0800446c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004470:	4b05      	ldr	r3, [pc, #20]	; (8004488 <SysTick_Handler+0x1c>)
 8004472:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004474:	f002 fc96 	bl	8006da4 <xTaskGetSchedulerState>
 8004478:	4603      	mov	r3, r0
 800447a:	2b01      	cmp	r3, #1
 800447c:	d001      	beq.n	8004482 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800447e:	f003 fb7b 	bl	8007b78 <xPortSysTickHandler>
  }
}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	e000e010 	.word	0xe000e010

0800448c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004490:	2100      	movs	r1, #0
 8004492:	f06f 0004 	mvn.w	r0, #4
 8004496:	f7ff ffbf 	bl	8004418 <__NVIC_SetPriority>
#endif
}
 800449a:	bf00      	nop
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044a6:	f3ef 8305 	mrs	r3, IPSR
 80044aa:	603b      	str	r3, [r7, #0]
  return(result);
 80044ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80044b2:	f06f 0305 	mvn.w	r3, #5
 80044b6:	607b      	str	r3, [r7, #4]
 80044b8:	e00c      	b.n	80044d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80044ba:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <osKernelInitialize+0x44>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d105      	bne.n	80044ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80044c2:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <osKernelInitialize+0x44>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	607b      	str	r3, [r7, #4]
 80044cc:	e002      	b.n	80044d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80044ce:	f04f 33ff 	mov.w	r3, #4294967295
 80044d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044d4:	687b      	ldr	r3, [r7, #4]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	20004d48 	.word	0x20004d48

080044e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044ee:	f3ef 8305 	mrs	r3, IPSR
 80044f2:	603b      	str	r3, [r7, #0]
  return(result);
 80044f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <osKernelStart+0x1a>
    stat = osErrorISR;
 80044fa:	f06f 0305 	mvn.w	r3, #5
 80044fe:	607b      	str	r3, [r7, #4]
 8004500:	e010      	b.n	8004524 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004502:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <osKernelStart+0x48>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d109      	bne.n	800451e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800450a:	f7ff ffbf 	bl	800448c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800450e:	4b08      	ldr	r3, [pc, #32]	; (8004530 <osKernelStart+0x48>)
 8004510:	2202      	movs	r2, #2
 8004512:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004514:	f001 ffc8 	bl	80064a8 <vTaskStartScheduler>
      stat = osOK;
 8004518:	2300      	movs	r3, #0
 800451a:	607b      	str	r3, [r7, #4]
 800451c:	e002      	b.n	8004524 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800451e:	f04f 33ff 	mov.w	r3, #4294967295
 8004522:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004524:	687b      	ldr	r3, [r7, #4]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20004d48 	.word	0x20004d48

08004534 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800453a:	f3ef 8305 	mrs	r3, IPSR
 800453e:	603b      	str	r3, [r7, #0]
  return(result);
 8004540:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8004546:	f002 f8db 	bl	8006700 <xTaskGetTickCountFromISR>
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	e002      	b.n	8004554 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800454e:	f002 f8c7 	bl	80066e0 <xTaskGetTickCount>
 8004552:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8004554:	687b      	ldr	r3, [r7, #4]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800455e:	b580      	push	{r7, lr}
 8004560:	b08e      	sub	sp, #56	; 0x38
 8004562:	af04      	add	r7, sp, #16
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800456e:	f3ef 8305 	mrs	r3, IPSR
 8004572:	617b      	str	r3, [r7, #20]
  return(result);
 8004574:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004576:	2b00      	cmp	r3, #0
 8004578:	d17e      	bne.n	8004678 <osThreadNew+0x11a>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d07b      	beq.n	8004678 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004580:	2380      	movs	r3, #128	; 0x80
 8004582:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004584:	2318      	movs	r3, #24
 8004586:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004588:	2300      	movs	r3, #0
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800458c:	f04f 33ff 	mov.w	r3, #4294967295
 8004590:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d045      	beq.n	8004624 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <osThreadNew+0x48>
        name = attr->name;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d008      	beq.n	80045cc <osThreadNew+0x6e>
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	2b38      	cmp	r3, #56	; 0x38
 80045be:	d805      	bhi.n	80045cc <osThreadNew+0x6e>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <osThreadNew+0x72>
        return (NULL);
 80045cc:	2300      	movs	r3, #0
 80045ce:	e054      	b.n	800467a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	089b      	lsrs	r3, r3, #2
 80045de:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00e      	beq.n	8004606 <osThreadNew+0xa8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2ba7      	cmp	r3, #167	; 0xa7
 80045ee:	d90a      	bls.n	8004606 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d006      	beq.n	8004606 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <osThreadNew+0xa8>
        mem = 1;
 8004600:	2301      	movs	r3, #1
 8004602:	61bb      	str	r3, [r7, #24]
 8004604:	e010      	b.n	8004628 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10c      	bne.n	8004628 <osThreadNew+0xca>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d108      	bne.n	8004628 <osThreadNew+0xca>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d104      	bne.n	8004628 <osThreadNew+0xca>
          mem = 0;
 800461e:	2300      	movs	r3, #0
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	e001      	b.n	8004628 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d110      	bne.n	8004650 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004636:	9202      	str	r2, [sp, #8]
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	6a3a      	ldr	r2, [r7, #32]
 8004642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f001 fd43 	bl	80060d0 <xTaskCreateStatic>
 800464a:	4603      	mov	r3, r0
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	e013      	b.n	8004678 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d110      	bne.n	8004678 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	b29a      	uxth	r2, r3
 800465a:	f107 0310 	add.w	r3, r7, #16
 800465e:	9301      	str	r3, [sp, #4]
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f001 fd8e 	bl	800618a <xTaskCreate>
 800466e:	4603      	mov	r3, r0
 8004670:	2b01      	cmp	r3, #1
 8004672:	d001      	beq.n	8004678 <osThreadNew+0x11a>
            hTask = NULL;
 8004674:	2300      	movs	r3, #0
 8004676:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004678:	693b      	ldr	r3, [r7, #16]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3728      	adds	r7, #40	; 0x28
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004682:	b580      	push	{r7, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800468a:	f3ef 8305 	mrs	r3, IPSR
 800468e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004690:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <osDelay+0x1c>
    stat = osErrorISR;
 8004696:	f06f 0305 	mvn.w	r3, #5
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	e007      	b.n	80046ae <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <osDelay+0x2c>
      vTaskDelay(ticks);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f001 fec9 	bl	8006440 <vTaskDelay>
    }
  }

  return (stat);
 80046ae:	68fb      	ldr	r3, [r7, #12]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046c4:	f3ef 8305 	mrs	r3, IPSR
 80046c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80046ca:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d174      	bne.n	80047ba <osMutexNew+0x102>
    if (attr != NULL) {
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <osMutexNew+0x26>
      type = attr->attr_bits;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	61bb      	str	r3, [r7, #24]
 80046dc:	e001      	b.n	80046e2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <osMutexNew+0x3a>
      rmtx = 1U;
 80046ec:	2301      	movs	r3, #1
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	e001      	b.n	80046f6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d15c      	bne.n	80047ba <osMutexNew+0x102>
      mem = -1;
 8004700:	f04f 33ff 	mov.w	r3, #4294967295
 8004704:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d015      	beq.n	8004738 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d006      	beq.n	8004722 <osMutexNew+0x6a>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	2b4f      	cmp	r3, #79	; 0x4f
 800471a:	d902      	bls.n	8004722 <osMutexNew+0x6a>
          mem = 1;
 800471c:	2301      	movs	r3, #1
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	e00c      	b.n	800473c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d108      	bne.n	800473c <osMutexNew+0x84>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d104      	bne.n	800473c <osMutexNew+0x84>
            mem = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	e001      	b.n	800473c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d112      	bne.n	8004768 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	4619      	mov	r1, r3
 800474e:	2004      	movs	r0, #4
 8004750:	f000 fd69 	bl	8005226 <xQueueCreateMutexStatic>
 8004754:	61f8      	str	r0, [r7, #28]
 8004756:	e016      	b.n	8004786 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	4619      	mov	r1, r3
 800475e:	2001      	movs	r0, #1
 8004760:	f000 fd61 	bl	8005226 <xQueueCreateMutexStatic>
 8004764:	61f8      	str	r0, [r7, #28]
 8004766:	e00e      	b.n	8004786 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10b      	bne.n	8004786 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d004      	beq.n	800477e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004774:	2004      	movs	r0, #4
 8004776:	f000 fd3e 	bl	80051f6 <xQueueCreateMutex>
 800477a:	61f8      	str	r0, [r7, #28]
 800477c:	e003      	b.n	8004786 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800477e:	2001      	movs	r0, #1
 8004780:	f000 fd39 	bl	80051f6 <xQueueCreateMutex>
 8004784:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00c      	beq.n	80047a6 <osMutexNew+0xee>
        if (attr != NULL) {
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <osMutexNew+0xe2>
          name = attr->name;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	e001      	b.n	800479e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800479e:	68f9      	ldr	r1, [r7, #12]
 80047a0:	69f8      	ldr	r0, [r7, #28]
 80047a2:	f001 fc0d 	bl	8005fc0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d006      	beq.n	80047ba <osMutexNew+0x102>
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80047ba:	69fb      	ldr	r3, [r7, #28]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3720      	adds	r7, #32
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047e2:	f3ef 8305 	mrs	r3, IPSR
 80047e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80047e8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80047ee:	f06f 0305 	mvn.w	r3, #5
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	e02c      	b.n	8004850 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d103      	bne.n	8004804 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80047fc:	f06f 0303 	mvn.w	r3, #3
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	e025      	b.n	8004850 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d011      	beq.n	800482e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800480a:	6839      	ldr	r1, [r7, #0]
 800480c:	6938      	ldr	r0, [r7, #16]
 800480e:	f000 fd59 	bl	80052c4 <xQueueTakeMutexRecursive>
 8004812:	4603      	mov	r3, r0
 8004814:	2b01      	cmp	r3, #1
 8004816:	d01b      	beq.n	8004850 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800481e:	f06f 0301 	mvn.w	r3, #1
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	e014      	b.n	8004850 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004826:	f06f 0302 	mvn.w	r3, #2
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	e010      	b.n	8004850 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800482e:	6839      	ldr	r1, [r7, #0]
 8004830:	6938      	ldr	r0, [r7, #16]
 8004832:	f001 f8ed 	bl	8005a10 <xQueueSemaphoreTake>
 8004836:	4603      	mov	r3, r0
 8004838:	2b01      	cmp	r3, #1
 800483a:	d009      	beq.n	8004850 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004842:	f06f 0301 	mvn.w	r3, #1
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	e002      	b.n	8004850 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800484a:	f06f 0302 	mvn.w	r3, #2
 800484e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004850:	697b      	ldr	r3, [r7, #20]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800485a:	b580      	push	{r7, lr}
 800485c:	b086      	sub	sp, #24
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f023 0301 	bic.w	r3, r3, #1
 8004868:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004876:	f3ef 8305 	mrs	r3, IPSR
 800487a:	60bb      	str	r3, [r7, #8]
  return(result);
 800487c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <osMutexRelease+0x30>
    stat = osErrorISR;
 8004882:	f06f 0305 	mvn.w	r3, #5
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	e01f      	b.n	80048ca <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d103      	bne.n	8004898 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004890:	f06f 0303 	mvn.w	r3, #3
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	e018      	b.n	80048ca <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d009      	beq.n	80048b2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800489e:	6938      	ldr	r0, [r7, #16]
 80048a0:	f000 fcdc 	bl	800525c <xQueueGiveMutexRecursive>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d00f      	beq.n	80048ca <osMutexRelease+0x70>
        stat = osErrorResource;
 80048aa:	f06f 0302 	mvn.w	r3, #2
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	e00b      	b.n	80048ca <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80048b2:	2300      	movs	r3, #0
 80048b4:	2200      	movs	r2, #0
 80048b6:	2100      	movs	r1, #0
 80048b8:	6938      	ldr	r0, [r7, #16]
 80048ba:	f000 fda3 	bl	8005404 <xQueueGenericSend>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d002      	beq.n	80048ca <osMutexRelease+0x70>
        stat = osErrorResource;
 80048c4:	f06f 0302 	mvn.w	r3, #2
 80048c8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80048ca:	697b      	ldr	r3, [r7, #20]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08a      	sub	sp, #40	; 0x28
 80048d8:	af02      	add	r7, sp, #8
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048e4:	f3ef 8305 	mrs	r3, IPSR
 80048e8:	613b      	str	r3, [r7, #16]
  return(result);
 80048ea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d175      	bne.n	80049dc <osSemaphoreNew+0x108>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d072      	beq.n	80049dc <osSemaphoreNew+0x108>
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d86e      	bhi.n	80049dc <osSemaphoreNew+0x108>
    mem = -1;
 80048fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004902:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d015      	beq.n	8004936 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d006      	beq.n	8004920 <osSemaphoreNew+0x4c>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	2b4f      	cmp	r3, #79	; 0x4f
 8004918:	d902      	bls.n	8004920 <osSemaphoreNew+0x4c>
        mem = 1;
 800491a:	2301      	movs	r3, #1
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	e00c      	b.n	800493a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d108      	bne.n	800493a <osSemaphoreNew+0x66>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d104      	bne.n	800493a <osSemaphoreNew+0x66>
          mem = 0;
 8004930:	2300      	movs	r3, #0
 8004932:	61bb      	str	r3, [r7, #24]
 8004934:	e001      	b.n	800493a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004936:	2300      	movs	r3, #0
 8004938:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004940:	d04c      	beq.n	80049dc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d128      	bne.n	800499a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d10a      	bne.n	8004964 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	2203      	movs	r2, #3
 8004954:	9200      	str	r2, [sp, #0]
 8004956:	2200      	movs	r2, #0
 8004958:	2100      	movs	r1, #0
 800495a:	2001      	movs	r0, #1
 800495c:	f000 fb5c 	bl	8005018 <xQueueGenericCreateStatic>
 8004960:	61f8      	str	r0, [r7, #28]
 8004962:	e005      	b.n	8004970 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004964:	2203      	movs	r2, #3
 8004966:	2100      	movs	r1, #0
 8004968:	2001      	movs	r0, #1
 800496a:	f000 fbcd 	bl	8005108 <xQueueGenericCreate>
 800496e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d022      	beq.n	80049bc <osSemaphoreNew+0xe8>
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01f      	beq.n	80049bc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800497c:	2300      	movs	r3, #0
 800497e:	2200      	movs	r2, #0
 8004980:	2100      	movs	r1, #0
 8004982:	69f8      	ldr	r0, [r7, #28]
 8004984:	f000 fd3e 	bl	8005404 <xQueueGenericSend>
 8004988:	4603      	mov	r3, r0
 800498a:	2b01      	cmp	r3, #1
 800498c:	d016      	beq.n	80049bc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800498e:	69f8      	ldr	r0, [r7, #28]
 8004990:	f001 f9ca 	bl	8005d28 <vQueueDelete>
            hSemaphore = NULL;
 8004994:	2300      	movs	r3, #0
 8004996:	61fb      	str	r3, [r7, #28]
 8004998:	e010      	b.n	80049bc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d108      	bne.n	80049b2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	461a      	mov	r2, r3
 80049a6:	68b9      	ldr	r1, [r7, #8]
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 fcc1 	bl	8005330 <xQueueCreateCountingSemaphoreStatic>
 80049ae:	61f8      	str	r0, [r7, #28]
 80049b0:	e004      	b.n	80049bc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80049b2:	68b9      	ldr	r1, [r7, #8]
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 fcf2 	bl	800539e <xQueueCreateCountingSemaphore>
 80049ba:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00c      	beq.n	80049dc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <osSemaphoreNew+0xfc>
          name = attr->name;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	e001      	b.n	80049d4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80049d4:	6979      	ldr	r1, [r7, #20]
 80049d6:	69f8      	ldr	r0, [r7, #28]
 80049d8:	f001 faf2 	bl	8005fc0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80049dc:	69fb      	ldr	r3, [r7, #28]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3720      	adds	r7, #32
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d103      	bne.n	8004a08 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004a00:	f06f 0303 	mvn.w	r3, #3
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	e039      	b.n	8004a7c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a08:	f3ef 8305 	mrs	r3, IPSR
 8004a0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d022      	beq.n	8004a5a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004a1a:	f06f 0303 	mvn.w	r3, #3
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	e02c      	b.n	8004a7c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004a26:	f107 0308 	add.w	r3, r7, #8
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	6938      	ldr	r0, [r7, #16]
 8004a30:	f001 f8fa 	bl	8005c28 <xQueueReceiveFromISR>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d003      	beq.n	8004a42 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004a3a:	f06f 0302 	mvn.w	r3, #2
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e01c      	b.n	8004a7c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d019      	beq.n	8004a7c <osSemaphoreAcquire+0x94>
 8004a48:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <osSemaphoreAcquire+0xa0>)
 8004a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	e010      	b.n	8004a7c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004a5a:	6839      	ldr	r1, [r7, #0]
 8004a5c:	6938      	ldr	r0, [r7, #16]
 8004a5e:	f000 ffd7 	bl	8005a10 <xQueueSemaphoreTake>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d009      	beq.n	8004a7c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004a6e:	f06f 0301 	mvn.w	r3, #1
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	e002      	b.n	8004a7c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004a76:	f06f 0302 	mvn.w	r3, #2
 8004a7a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004a7c:	697b      	ldr	r3, [r7, #20]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	e000ed04 	.word	0xe000ed04

08004a8c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d103      	bne.n	8004aaa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004aa2:	f06f 0303 	mvn.w	r3, #3
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	e02c      	b.n	8004b04 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aaa:	f3ef 8305 	mrs	r3, IPSR
 8004aae:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d01a      	beq.n	8004aec <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004aba:	f107 0308 	add.w	r3, r7, #8
 8004abe:	4619      	mov	r1, r3
 8004ac0:	6938      	ldr	r0, [r7, #16]
 8004ac2:	f000 fe38 	bl	8005736 <xQueueGiveFromISR>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d003      	beq.n	8004ad4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004acc:	f06f 0302 	mvn.w	r3, #2
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	e017      	b.n	8004b04 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d014      	beq.n	8004b04 <osSemaphoreRelease+0x78>
 8004ada:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <osSemaphoreRelease+0x84>)
 8004adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	e00b      	b.n	8004b04 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004aec:	2300      	movs	r3, #0
 8004aee:	2200      	movs	r2, #0
 8004af0:	2100      	movs	r1, #0
 8004af2:	6938      	ldr	r0, [r7, #16]
 8004af4:	f000 fc86 	bl	8005404 <xQueueGenericSend>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d002      	beq.n	8004b04 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004afe:	f06f 0302 	mvn.w	r3, #2
 8004b02:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004b04:	697b      	ldr	r3, [r7, #20]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	e000ed04 	.word	0xe000ed04

08004b14 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b08a      	sub	sp, #40	; 0x28
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b24:	f3ef 8305 	mrs	r3, IPSR
 8004b28:	613b      	str	r3, [r7, #16]
  return(result);
 8004b2a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d15f      	bne.n	8004bf0 <osMessageQueueNew+0xdc>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d05c      	beq.n	8004bf0 <osMessageQueueNew+0xdc>
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d059      	beq.n	8004bf0 <osMessageQueueNew+0xdc>
    mem = -1;
 8004b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b40:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d029      	beq.n	8004b9c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d012      	beq.n	8004b76 <osMessageQueueNew+0x62>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b4f      	cmp	r3, #79	; 0x4f
 8004b56:	d90e      	bls.n	8004b76 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00a      	beq.n	8004b76 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	695a      	ldr	r2, [r3, #20]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	68b9      	ldr	r1, [r7, #8]
 8004b68:	fb01 f303 	mul.w	r3, r1, r3
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d302      	bcc.n	8004b76 <osMessageQueueNew+0x62>
        mem = 1;
 8004b70:	2301      	movs	r3, #1
 8004b72:	61bb      	str	r3, [r7, #24]
 8004b74:	e014      	b.n	8004ba0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d110      	bne.n	8004ba0 <osMessageQueueNew+0x8c>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10c      	bne.n	8004ba0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d108      	bne.n	8004ba0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d104      	bne.n	8004ba0 <osMessageQueueNew+0x8c>
          mem = 0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	61bb      	str	r3, [r7, #24]
 8004b9a:	e001      	b.n	8004ba0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d10b      	bne.n	8004bbe <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691a      	ldr	r2, [r3, #16]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2100      	movs	r1, #0
 8004bb0:	9100      	str	r1, [sp, #0]
 8004bb2:	68b9      	ldr	r1, [r7, #8]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 fa2f 	bl	8005018 <xQueueGenericCreateStatic>
 8004bba:	61f8      	str	r0, [r7, #28]
 8004bbc:	e008      	b.n	8004bd0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d105      	bne.n	8004bd0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	68b9      	ldr	r1, [r7, #8]
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 fa9d 	bl	8005108 <xQueueGenericCreate>
 8004bce:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00c      	beq.n	8004bf0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	e001      	b.n	8004be8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004be8:	6979      	ldr	r1, [r7, #20]
 8004bea:	69f8      	ldr	r0, [r7, #28]
 8004bec:	f001 f9e8 	bl	8005fc0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004bf0:	69fb      	ldr	r3, [r7, #28]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3720      	adds	r7, #32
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c14:	f3ef 8305 	mrs	r3, IPSR
 8004c18:	617b      	str	r3, [r7, #20]
  return(result);
 8004c1a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d028      	beq.n	8004c72 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <osMessageQueuePut+0x36>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <osMessageQueuePut+0x36>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004c32:	f06f 0303 	mvn.w	r3, #3
 8004c36:	61fb      	str	r3, [r7, #28]
 8004c38:	e038      	b.n	8004cac <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004c3e:	f107 0210 	add.w	r2, r7, #16
 8004c42:	2300      	movs	r3, #0
 8004c44:	68b9      	ldr	r1, [r7, #8]
 8004c46:	69b8      	ldr	r0, [r7, #24]
 8004c48:	f000 fcda 	bl	8005600 <xQueueGenericSendFromISR>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d003      	beq.n	8004c5a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004c52:	f06f 0302 	mvn.w	r3, #2
 8004c56:	61fb      	str	r3, [r7, #28]
 8004c58:	e028      	b.n	8004cac <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d025      	beq.n	8004cac <osMessageQueuePut+0xb0>
 8004c60:	4b15      	ldr	r3, [pc, #84]	; (8004cb8 <osMessageQueuePut+0xbc>)
 8004c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	e01c      	b.n	8004cac <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <osMessageQueuePut+0x82>
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004c7e:	f06f 0303 	mvn.w	r3, #3
 8004c82:	61fb      	str	r3, [r7, #28]
 8004c84:	e012      	b.n	8004cac <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004c86:	2300      	movs	r3, #0
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	69b8      	ldr	r0, [r7, #24]
 8004c8e:	f000 fbb9 	bl	8005404 <xQueueGenericSend>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d009      	beq.n	8004cac <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004c9e:	f06f 0301 	mvn.w	r3, #1
 8004ca2:	61fb      	str	r3, [r7, #28]
 8004ca4:	e002      	b.n	8004cac <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004ca6:	f06f 0302 	mvn.w	r3, #2
 8004caa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004cac:	69fb      	ldr	r3, [r7, #28]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3720      	adds	r7, #32
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	e000ed04 	.word	0xe000ed04

08004cbc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cd2:	f3ef 8305 	mrs	r3, IPSR
 8004cd6:	617b      	str	r3, [r7, #20]
  return(result);
 8004cd8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d028      	beq.n	8004d30 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <osMessageQueueGet+0x34>
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <osMessageQueueGet+0x34>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004cf0:	f06f 0303 	mvn.w	r3, #3
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	e037      	b.n	8004d68 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004cfc:	f107 0310 	add.w	r3, r7, #16
 8004d00:	461a      	mov	r2, r3
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	69b8      	ldr	r0, [r7, #24]
 8004d06:	f000 ff8f 	bl	8005c28 <xQueueReceiveFromISR>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d003      	beq.n	8004d18 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004d10:	f06f 0302 	mvn.w	r3, #2
 8004d14:	61fb      	str	r3, [r7, #28]
 8004d16:	e027      	b.n	8004d68 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d024      	beq.n	8004d68 <osMessageQueueGet+0xac>
 8004d1e:	4b15      	ldr	r3, [pc, #84]	; (8004d74 <osMessageQueueGet+0xb8>)
 8004d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	e01b      	b.n	8004d68 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <osMessageQueueGet+0x80>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d103      	bne.n	8004d44 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004d3c:	f06f 0303 	mvn.w	r3, #3
 8004d40:	61fb      	str	r3, [r7, #28]
 8004d42:	e011      	b.n	8004d68 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	68b9      	ldr	r1, [r7, #8]
 8004d48:	69b8      	ldr	r0, [r7, #24]
 8004d4a:	f000 fd81 	bl	8005850 <xQueueReceive>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d009      	beq.n	8004d68 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004d5a:	f06f 0301 	mvn.w	r3, #1
 8004d5e:	61fb      	str	r3, [r7, #28]
 8004d60:	e002      	b.n	8004d68 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004d62:	f06f 0302 	mvn.w	r3, #2
 8004d66:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004d68:	69fb      	ldr	r3, [r7, #28]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3720      	adds	r7, #32
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	e000ed04 	.word	0xe000ed04

08004d78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4a07      	ldr	r2, [pc, #28]	; (8004da4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004d88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	4a06      	ldr	r2, [pc, #24]	; (8004da8 <vApplicationGetIdleTaskMemory+0x30>)
 8004d8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2280      	movs	r2, #128	; 0x80
 8004d94:	601a      	str	r2, [r3, #0]
}
 8004d96:	bf00      	nop
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20004d4c 	.word	0x20004d4c
 8004da8:	20004df4 	.word	0x20004df4

08004dac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4a07      	ldr	r2, [pc, #28]	; (8004dd8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004dbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	4a06      	ldr	r2, [pc, #24]	; (8004ddc <vApplicationGetTimerTaskMemory+0x30>)
 8004dc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dca:	601a      	str	r2, [r3, #0]
}
 8004dcc:	bf00      	nop
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	20004ff4 	.word	0x20004ff4
 8004ddc:	2000509c 	.word	0x2000509c

08004de0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f103 0208 	add.w	r2, r3, #8
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f04f 32ff 	mov.w	r2, #4294967295
 8004df8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f103 0208 	add.w	r2, r3, #8
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f103 0208 	add.w	r2, r3, #8
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b085      	sub	sp, #20
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	601a      	str	r2, [r3, #0]
}
 8004e76:	bf00      	nop
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e82:	b480      	push	{r7}
 8004e84:	b085      	sub	sp, #20
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e98:	d103      	bne.n	8004ea2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	e00c      	b.n	8004ebc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	e002      	b.n	8004eb0 <vListInsert+0x2e>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d2f6      	bcs.n	8004eaa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	601a      	str	r2, [r3, #0]
}
 8004ee8:	bf00      	nop
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6892      	ldr	r2, [r2, #8]
 8004f0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6852      	ldr	r2, [r2, #4]
 8004f14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d103      	bne.n	8004f28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	1e5a      	subs	r2, r3, #1
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10a      	bne.n	8004f72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f6e:	bf00      	nop
 8004f70:	e7fe      	b.n	8004f70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004f72:	f002 fd6f 	bl	8007a54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7e:	68f9      	ldr	r1, [r7, #12]
 8004f80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f82:	fb01 f303 	mul.w	r3, r1, r3
 8004f86:	441a      	add	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	68f9      	ldr	r1, [r7, #12]
 8004fa6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004fa8:	fb01 f303 	mul.w	r3, r1, r3
 8004fac:	441a      	add	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	22ff      	movs	r2, #255	; 0xff
 8004fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	22ff      	movs	r2, #255	; 0xff
 8004fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d114      	bne.n	8004ff2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01a      	beq.n	8005006 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	3310      	adds	r3, #16
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f001 fd13 	bl	8006a00 <xTaskRemoveFromEventList>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d012      	beq.n	8005006 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004fe0:	4b0c      	ldr	r3, [pc, #48]	; (8005014 <xQueueGenericReset+0xcc>)
 8004fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	e009      	b.n	8005006 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3310      	adds	r3, #16
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff fef2 	bl	8004de0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	3324      	adds	r3, #36	; 0x24
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff feed 	bl	8004de0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005006:	f002 fd55 	bl	8007ab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800500a:	2301      	movs	r3, #1
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	e000ed04 	.word	0xe000ed04

08005018 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08e      	sub	sp, #56	; 0x38
 800501c:	af02      	add	r7, sp, #8
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800503e:	bf00      	nop
 8005040:	e7fe      	b.n	8005040 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10a      	bne.n	800505e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504c:	f383 8811 	msr	BASEPRI, r3
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	627b      	str	r3, [r7, #36]	; 0x24
}
 800505a:	bf00      	nop
 800505c:	e7fe      	b.n	800505c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <xQueueGenericCreateStatic+0x52>
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <xQueueGenericCreateStatic+0x56>
 800506a:	2301      	movs	r3, #1
 800506c:	e000      	b.n	8005070 <xQueueGenericCreateStatic+0x58>
 800506e:	2300      	movs	r3, #0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10a      	bne.n	800508a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	623b      	str	r3, [r7, #32]
}
 8005086:	bf00      	nop
 8005088:	e7fe      	b.n	8005088 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d102      	bne.n	8005096 <xQueueGenericCreateStatic+0x7e>
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <xQueueGenericCreateStatic+0x82>
 8005096:	2301      	movs	r3, #1
 8005098:	e000      	b.n	800509c <xQueueGenericCreateStatic+0x84>
 800509a:	2300      	movs	r3, #0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10a      	bne.n	80050b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	61fb      	str	r3, [r7, #28]
}
 80050b2:	bf00      	nop
 80050b4:	e7fe      	b.n	80050b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80050b6:	2350      	movs	r3, #80	; 0x50
 80050b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b50      	cmp	r3, #80	; 0x50
 80050be:	d00a      	beq.n	80050d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	61bb      	str	r3, [r7, #24]
}
 80050d2:	bf00      	nop
 80050d4:	e7fe      	b.n	80050d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80050d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80050dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00d      	beq.n	80050fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80050e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80050ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	4613      	mov	r3, r2
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	68b9      	ldr	r1, [r7, #8]
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 f83f 	bl	800517c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80050fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005100:	4618      	mov	r0, r3
 8005102:	3730      	adds	r7, #48	; 0x30
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	; 0x28
 800510c:	af02      	add	r7, sp, #8
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	4613      	mov	r3, r2
 8005114:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <xQueueGenericCreate+0x2a>
	__asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	613b      	str	r3, [r7, #16]
}
 800512e:	bf00      	nop
 8005130:	e7fe      	b.n	8005130 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	fb02 f303 	mul.w	r3, r2, r3
 800513a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	3350      	adds	r3, #80	; 0x50
 8005140:	4618      	mov	r0, r3
 8005142:	f002 fda9 	bl	8007c98 <pvPortMalloc>
 8005146:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d011      	beq.n	8005172 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	3350      	adds	r3, #80	; 0x50
 8005156:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005160:	79fa      	ldrb	r2, [r7, #7]
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	4613      	mov	r3, r2
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 f805 	bl	800517c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005172:	69bb      	ldr	r3, [r7, #24]
	}
 8005174:	4618      	mov	r0, r3
 8005176:	3720      	adds	r7, #32
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d103      	bne.n	8005198 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	e002      	b.n	800519e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80051aa:	2101      	movs	r1, #1
 80051ac:	69b8      	ldr	r0, [r7, #24]
 80051ae:	f7ff fecb 	bl	8004f48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	78fa      	ldrb	r2, [r7, #3]
 80051b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b082      	sub	sp, #8
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00e      	beq.n	80051ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80051e2:	2300      	movs	r3, #0
 80051e4:	2200      	movs	r2, #0
 80051e6:	2100      	movs	r1, #0
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f90b 	bl	8005404 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80051ee:	bf00      	nop
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b086      	sub	sp, #24
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	4603      	mov	r3, r0
 80051fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005200:	2301      	movs	r3, #1
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	2300      	movs	r3, #0
 8005206:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	461a      	mov	r2, r3
 800520c:	6939      	ldr	r1, [r7, #16]
 800520e:	6978      	ldr	r0, [r7, #20]
 8005210:	f7ff ff7a 	bl	8005108 <xQueueGenericCreate>
 8005214:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f7ff ffd3 	bl	80051c2 <prvInitialiseMutex>

		return xNewQueue;
 800521c:	68fb      	ldr	r3, [r7, #12]
	}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005226:	b580      	push	{r7, lr}
 8005228:	b088      	sub	sp, #32
 800522a:	af02      	add	r7, sp, #8
 800522c:	4603      	mov	r3, r0
 800522e:	6039      	str	r1, [r7, #0]
 8005230:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005232:	2301      	movs	r3, #1
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	2300      	movs	r3, #0
 8005238:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2200      	movs	r2, #0
 8005242:	6939      	ldr	r1, [r7, #16]
 8005244:	6978      	ldr	r0, [r7, #20]
 8005246:	f7ff fee7 	bl	8005018 <xQueueGenericCreateStatic>
 800524a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f7ff ffb8 	bl	80051c2 <prvInitialiseMutex>

		return xNewQueue;
 8005252:	68fb      	ldr	r3, [r7, #12]
	}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800525c:	b590      	push	{r4, r7, lr}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10a      	bne.n	8005284 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	60fb      	str	r3, [r7, #12]
}
 8005280:	bf00      	nop
 8005282:	e7fe      	b.n	8005282 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	689c      	ldr	r4, [r3, #8]
 8005288:	f001 fd7c 	bl	8006d84 <xTaskGetCurrentTaskHandle>
 800528c:	4603      	mov	r3, r0
 800528e:	429c      	cmp	r4, r3
 8005290:	d111      	bne.n	80052b6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	1e5a      	subs	r2, r3, #1
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d105      	bne.n	80052b0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80052a4:	2300      	movs	r3, #0
 80052a6:	2200      	movs	r2, #0
 80052a8:	2100      	movs	r1, #0
 80052aa:	6938      	ldr	r0, [r7, #16]
 80052ac:	f000 f8aa 	bl	8005404 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80052b0:	2301      	movs	r3, #1
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	e001      	b.n	80052ba <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80052ba:	697b      	ldr	r3, [r7, #20]
	}
 80052bc:	4618      	mov	r0, r3
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd90      	pop	{r4, r7, pc}

080052c4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80052c4:	b590      	push	{r4, r7, lr}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10a      	bne.n	80052ee <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	60fb      	str	r3, [r7, #12]
}
 80052ea:	bf00      	nop
 80052ec:	e7fe      	b.n	80052ec <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	689c      	ldr	r4, [r3, #8]
 80052f2:	f001 fd47 	bl	8006d84 <xTaskGetCurrentTaskHandle>
 80052f6:	4603      	mov	r3, r0
 80052f8:	429c      	cmp	r4, r3
 80052fa:	d107      	bne.n	800530c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005306:	2301      	movs	r3, #1
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	e00c      	b.n	8005326 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800530c:	6839      	ldr	r1, [r7, #0]
 800530e:	6938      	ldr	r0, [r7, #16]
 8005310:	f000 fb7e 	bl	8005a10 <xQueueSemaphoreTake>
 8005314:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d004      	beq.n	8005326 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005326:	697b      	ldr	r3, [r7, #20]
	}
 8005328:	4618      	mov	r0, r3
 800532a:	371c      	adds	r7, #28
 800532c:	46bd      	mov	sp, r7
 800532e:	bd90      	pop	{r4, r7, pc}

08005330 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08a      	sub	sp, #40	; 0x28
 8005334:	af02      	add	r7, sp, #8
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10a      	bne.n	8005358 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	61bb      	str	r3, [r7, #24]
}
 8005354:	bf00      	nop
 8005356:	e7fe      	b.n	8005356 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	429a      	cmp	r2, r3
 800535e:	d90a      	bls.n	8005376 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	617b      	str	r3, [r7, #20]
}
 8005372:	bf00      	nop
 8005374:	e7fe      	b.n	8005374 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005376:	2302      	movs	r3, #2
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	2100      	movs	r1, #0
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff fe49 	bl	8005018 <xQueueGenericCreateStatic>
 8005386:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005394:	69fb      	ldr	r3, [r7, #28]
	}
 8005396:	4618      	mov	r0, r3
 8005398:	3720      	adds	r7, #32
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b086      	sub	sp, #24
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	613b      	str	r3, [r7, #16]
}
 80053c0:	bf00      	nop
 80053c2:	e7fe      	b.n	80053c2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d90a      	bls.n	80053e2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	60fb      	str	r3, [r7, #12]
}
 80053de:	bf00      	nop
 80053e0:	e7fe      	b.n	80053e0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80053e2:	2202      	movs	r2, #2
 80053e4:	2100      	movs	r1, #0
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7ff fe8e 	bl	8005108 <xQueueGenericCreate>
 80053ec:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80053fa:	697b      	ldr	r3, [r7, #20]
	}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08e      	sub	sp, #56	; 0x38
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005412:	2300      	movs	r3, #0
 8005414:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10a      	bne.n	8005436 <xQueueGenericSend+0x32>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d103      	bne.n	8005444 <xQueueGenericSend+0x40>
 800543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <xQueueGenericSend+0x44>
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <xQueueGenericSend+0x46>
 8005448:	2300      	movs	r3, #0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <xQueueGenericSend+0x60>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005460:	bf00      	nop
 8005462:	e7fe      	b.n	8005462 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d103      	bne.n	8005472 <xQueueGenericSend+0x6e>
 800546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <xQueueGenericSend+0x72>
 8005472:	2301      	movs	r3, #1
 8005474:	e000      	b.n	8005478 <xQueueGenericSend+0x74>
 8005476:	2300      	movs	r3, #0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10a      	bne.n	8005492 <xQueueGenericSend+0x8e>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	623b      	str	r3, [r7, #32]
}
 800548e:	bf00      	nop
 8005490:	e7fe      	b.n	8005490 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005492:	f001 fc87 	bl	8006da4 <xTaskGetSchedulerState>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d102      	bne.n	80054a2 <xQueueGenericSend+0x9e>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <xQueueGenericSend+0xa2>
 80054a2:	2301      	movs	r3, #1
 80054a4:	e000      	b.n	80054a8 <xQueueGenericSend+0xa4>
 80054a6:	2300      	movs	r3, #0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10a      	bne.n	80054c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	61fb      	str	r3, [r7, #28]
}
 80054be:	bf00      	nop
 80054c0:	e7fe      	b.n	80054c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054c2:	f002 fac7 	bl	8007a54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d302      	bcc.n	80054d8 <xQueueGenericSend+0xd4>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d129      	bne.n	800552c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054de:	f000 fc5e 	bl	8005d9e <prvCopyDataToQueue>
 80054e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d010      	beq.n	800550e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ee:	3324      	adds	r3, #36	; 0x24
 80054f0:	4618      	mov	r0, r3
 80054f2:	f001 fa85 	bl	8006a00 <xTaskRemoveFromEventList>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d013      	beq.n	8005524 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054fc:	4b3f      	ldr	r3, [pc, #252]	; (80055fc <xQueueGenericSend+0x1f8>)
 80054fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	e00a      	b.n	8005524 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d007      	beq.n	8005524 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005514:	4b39      	ldr	r3, [pc, #228]	; (80055fc <xQueueGenericSend+0x1f8>)
 8005516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005524:	f002 fac6 	bl	8007ab4 <vPortExitCritical>
				return pdPASS;
 8005528:	2301      	movs	r3, #1
 800552a:	e063      	b.n	80055f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d103      	bne.n	800553a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005532:	f002 fabf 	bl	8007ab4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005536:	2300      	movs	r3, #0
 8005538:	e05c      	b.n	80055f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800553a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553c:	2b00      	cmp	r3, #0
 800553e:	d106      	bne.n	800554e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005540:	f107 0314 	add.w	r3, r7, #20
 8005544:	4618      	mov	r0, r3
 8005546:	f001 fabf 	bl	8006ac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800554a:	2301      	movs	r3, #1
 800554c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800554e:	f002 fab1 	bl	8007ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005552:	f001 f819 	bl	8006588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005556:	f002 fa7d 	bl	8007a54 <vPortEnterCritical>
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005560:	b25b      	sxtb	r3, r3
 8005562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005566:	d103      	bne.n	8005570 <xQueueGenericSend+0x16c>
 8005568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005576:	b25b      	sxtb	r3, r3
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557c:	d103      	bne.n	8005586 <xQueueGenericSend+0x182>
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005586:	f002 fa95 	bl	8007ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800558a:	1d3a      	adds	r2, r7, #4
 800558c:	f107 0314 	add.w	r3, r7, #20
 8005590:	4611      	mov	r1, r2
 8005592:	4618      	mov	r0, r3
 8005594:	f001 faae 	bl	8006af4 <xTaskCheckForTimeOut>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d124      	bne.n	80055e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800559e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055a0:	f000 fcf5 	bl	8005f8e <prvIsQueueFull>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d018      	beq.n	80055dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ac:	3310      	adds	r3, #16
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	4611      	mov	r1, r2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 f9d4 	bl	8006960 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055ba:	f000 fc80 	bl	8005ebe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055be:	f000 fff1 	bl	80065a4 <xTaskResumeAll>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f47f af7c 	bne.w	80054c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80055ca:	4b0c      	ldr	r3, [pc, #48]	; (80055fc <xQueueGenericSend+0x1f8>)
 80055cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	e772      	b.n	80054c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055de:	f000 fc6e 	bl	8005ebe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055e2:	f000 ffdf 	bl	80065a4 <xTaskResumeAll>
 80055e6:	e76c      	b.n	80054c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055ea:	f000 fc68 	bl	8005ebe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055ee:	f000 ffd9 	bl	80065a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3738      	adds	r7, #56	; 0x38
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	e000ed04 	.word	0xe000ed04

08005600 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b090      	sub	sp, #64	; 0x40
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800562a:	bf00      	nop
 800562c:	e7fe      	b.n	800562c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d103      	bne.n	800563c <xQueueGenericSendFromISR+0x3c>
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <xQueueGenericSendFromISR+0x40>
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <xQueueGenericSendFromISR+0x42>
 8005640:	2300      	movs	r3, #0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10a      	bne.n	800565c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005658:	bf00      	nop
 800565a:	e7fe      	b.n	800565a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2b02      	cmp	r3, #2
 8005660:	d103      	bne.n	800566a <xQueueGenericSendFromISR+0x6a>
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005666:	2b01      	cmp	r3, #1
 8005668:	d101      	bne.n	800566e <xQueueGenericSendFromISR+0x6e>
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <xQueueGenericSendFromISR+0x70>
 800566e:	2300      	movs	r3, #0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10a      	bne.n	800568a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	623b      	str	r3, [r7, #32]
}
 8005686:	bf00      	nop
 8005688:	e7fe      	b.n	8005688 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800568a:	f002 fac5 	bl	8007c18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800568e:	f3ef 8211 	mrs	r2, BASEPRI
 8005692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	61fa      	str	r2, [r7, #28]
 80056a4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80056a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d302      	bcc.n	80056bc <xQueueGenericSendFromISR+0xbc>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d12f      	bne.n	800571c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	68b9      	ldr	r1, [r7, #8]
 80056d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056d2:	f000 fb64 	bl	8005d9e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80056da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056de:	d112      	bne.n	8005706 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d016      	beq.n	8005716 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	3324      	adds	r3, #36	; 0x24
 80056ec:	4618      	mov	r0, r3
 80056ee:	f001 f987 	bl	8006a00 <xTaskRemoveFromEventList>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00e      	beq.n	8005716 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00b      	beq.n	8005716 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	e007      	b.n	8005716 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005706:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800570a:	3301      	adds	r3, #1
 800570c:	b2db      	uxtb	r3, r3
 800570e:	b25a      	sxtb	r2, r3
 8005710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005716:	2301      	movs	r3, #1
 8005718:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800571a:	e001      	b.n	8005720 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800571c:	2300      	movs	r3, #0
 800571e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005722:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800572a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800572c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800572e:	4618      	mov	r0, r3
 8005730:	3740      	adds	r7, #64	; 0x40
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b08e      	sub	sp, #56	; 0x38
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10a      	bne.n	8005760 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	623b      	str	r3, [r7, #32]
}
 800575c:	bf00      	nop
 800575e:	e7fe      	b.n	800575e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00a      	beq.n	800577e <xQueueGiveFromISR+0x48>
	__asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	61fb      	str	r3, [r7, #28]
}
 800577a:	bf00      	nop
 800577c:	e7fe      	b.n	800577c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d103      	bne.n	800578e <xQueueGiveFromISR+0x58>
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <xQueueGiveFromISR+0x5c>
 800578e:	2301      	movs	r3, #1
 8005790:	e000      	b.n	8005794 <xQueueGiveFromISR+0x5e>
 8005792:	2300      	movs	r3, #0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10a      	bne.n	80057ae <xQueueGiveFromISR+0x78>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	61bb      	str	r3, [r7, #24]
}
 80057aa:	bf00      	nop
 80057ac:	e7fe      	b.n	80057ac <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057ae:	f002 fa33 	bl	8007c18 <vPortValidateInterruptPriority>
	__asm volatile
 80057b2:	f3ef 8211 	mrs	r2, BASEPRI
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	617a      	str	r2, [r7, #20]
 80057c8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80057ca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057da:	429a      	cmp	r2, r3
 80057dc:	d22b      	bcs.n	8005836 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f8:	d112      	bne.n	8005820 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d016      	beq.n	8005830 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	3324      	adds	r3, #36	; 0x24
 8005806:	4618      	mov	r0, r3
 8005808:	f001 f8fa 	bl	8006a00 <xTaskRemoveFromEventList>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00e      	beq.n	8005830 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00b      	beq.n	8005830 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2201      	movs	r2, #1
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	e007      	b.n	8005830 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005824:	3301      	adds	r3, #1
 8005826:	b2db      	uxtb	r3, r3
 8005828:	b25a      	sxtb	r2, r3
 800582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005830:	2301      	movs	r3, #1
 8005832:	637b      	str	r3, [r7, #52]	; 0x34
 8005834:	e001      	b.n	800583a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005836:	2300      	movs	r3, #0
 8005838:	637b      	str	r3, [r7, #52]	; 0x34
 800583a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f383 8811 	msr	BASEPRI, r3
}
 8005844:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005848:	4618      	mov	r0, r3
 800584a:	3738      	adds	r7, #56	; 0x38
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b08c      	sub	sp, #48	; 0x30
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800585c:	2300      	movs	r3, #0
 800585e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <xQueueReceive+0x30>
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	623b      	str	r3, [r7, #32]
}
 800587c:	bf00      	nop
 800587e:	e7fe      	b.n	800587e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d103      	bne.n	800588e <xQueueReceive+0x3e>
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <xQueueReceive+0x42>
 800588e:	2301      	movs	r3, #1
 8005890:	e000      	b.n	8005894 <xQueueReceive+0x44>
 8005892:	2300      	movs	r3, #0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10a      	bne.n	80058ae <xQueueReceive+0x5e>
	__asm volatile
 8005898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	61fb      	str	r3, [r7, #28]
}
 80058aa:	bf00      	nop
 80058ac:	e7fe      	b.n	80058ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058ae:	f001 fa79 	bl	8006da4 <xTaskGetSchedulerState>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d102      	bne.n	80058be <xQueueReceive+0x6e>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <xQueueReceive+0x72>
 80058be:	2301      	movs	r3, #1
 80058c0:	e000      	b.n	80058c4 <xQueueReceive+0x74>
 80058c2:	2300      	movs	r3, #0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <xQueueReceive+0x8e>
	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	61bb      	str	r3, [r7, #24]
}
 80058da:	bf00      	nop
 80058dc:	e7fe      	b.n	80058dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058de:	f002 f8b9 	bl	8007a54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d01f      	beq.n	800592e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058ee:	68b9      	ldr	r1, [r7, #8]
 80058f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058f2:	f000 fabe 	bl	8005e72 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	1e5a      	subs	r2, r3, #1
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00f      	beq.n	8005926 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	3310      	adds	r3, #16
 800590a:	4618      	mov	r0, r3
 800590c:	f001 f878 	bl	8006a00 <xTaskRemoveFromEventList>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005916:	4b3d      	ldr	r3, [pc, #244]	; (8005a0c <xQueueReceive+0x1bc>)
 8005918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005926:	f002 f8c5 	bl	8007ab4 <vPortExitCritical>
				return pdPASS;
 800592a:	2301      	movs	r3, #1
 800592c:	e069      	b.n	8005a02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d103      	bne.n	800593c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005934:	f002 f8be 	bl	8007ab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005938:	2300      	movs	r3, #0
 800593a:	e062      	b.n	8005a02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593e:	2b00      	cmp	r3, #0
 8005940:	d106      	bne.n	8005950 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005942:	f107 0310 	add.w	r3, r7, #16
 8005946:	4618      	mov	r0, r3
 8005948:	f001 f8be 	bl	8006ac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800594c:	2301      	movs	r3, #1
 800594e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005950:	f002 f8b0 	bl	8007ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005954:	f000 fe18 	bl	8006588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005958:	f002 f87c 	bl	8007a54 <vPortEnterCritical>
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005962:	b25b      	sxtb	r3, r3
 8005964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005968:	d103      	bne.n	8005972 <xQueueReceive+0x122>
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005978:	b25b      	sxtb	r3, r3
 800597a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597e:	d103      	bne.n	8005988 <xQueueReceive+0x138>
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005988:	f002 f894 	bl	8007ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800598c:	1d3a      	adds	r2, r7, #4
 800598e:	f107 0310 	add.w	r3, r7, #16
 8005992:	4611      	mov	r1, r2
 8005994:	4618      	mov	r0, r3
 8005996:	f001 f8ad 	bl	8006af4 <xTaskCheckForTimeOut>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d123      	bne.n	80059e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059a2:	f000 fade 	bl	8005f62 <prvIsQueueEmpty>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d017      	beq.n	80059dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	3324      	adds	r3, #36	; 0x24
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	4611      	mov	r1, r2
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 ffd3 	bl	8006960 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059bc:	f000 fa7f 	bl	8005ebe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059c0:	f000 fdf0 	bl	80065a4 <xTaskResumeAll>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d189      	bne.n	80058de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80059ca:	4b10      	ldr	r3, [pc, #64]	; (8005a0c <xQueueReceive+0x1bc>)
 80059cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	e780      	b.n	80058de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80059dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059de:	f000 fa6e 	bl	8005ebe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059e2:	f000 fddf 	bl	80065a4 <xTaskResumeAll>
 80059e6:	e77a      	b.n	80058de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80059e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059ea:	f000 fa68 	bl	8005ebe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059ee:	f000 fdd9 	bl	80065a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059f4:	f000 fab5 	bl	8005f62 <prvIsQueueEmpty>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f43f af6f 	beq.w	80058de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3730      	adds	r7, #48	; 0x30
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	e000ed04 	.word	0xe000ed04

08005a10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08e      	sub	sp, #56	; 0x38
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a22:	2300      	movs	r3, #0
 8005a24:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	623b      	str	r3, [r7, #32]
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	61fb      	str	r3, [r7, #28]
}
 8005a5c:	bf00      	nop
 8005a5e:	e7fe      	b.n	8005a5e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a60:	f001 f9a0 	bl	8006da4 <xTaskGetSchedulerState>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d102      	bne.n	8005a70 <xQueueSemaphoreTake+0x60>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <xQueueSemaphoreTake+0x64>
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <xQueueSemaphoreTake+0x66>
 8005a74:	2300      	movs	r3, #0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10a      	bne.n	8005a90 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	61bb      	str	r3, [r7, #24]
}
 8005a8c:	bf00      	nop
 8005a8e:	e7fe      	b.n	8005a8e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a90:	f001 ffe0 	bl	8007a54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a98:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d024      	beq.n	8005aea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa2:	1e5a      	subs	r2, r3, #1
 8005aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d104      	bne.n	8005aba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005ab0:	f001 faee 	bl	8007090 <pvTaskIncrementMutexHeldCount>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00f      	beq.n	8005ae2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac4:	3310      	adds	r3, #16
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 ff9a 	bl	8006a00 <xTaskRemoveFromEventList>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d007      	beq.n	8005ae2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ad2:	4b54      	ldr	r3, [pc, #336]	; (8005c24 <xQueueSemaphoreTake+0x214>)
 8005ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ae2:	f001 ffe7 	bl	8007ab4 <vPortExitCritical>
				return pdPASS;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e097      	b.n	8005c1a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d111      	bne.n	8005b14 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00a      	beq.n	8005b0c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	617b      	str	r3, [r7, #20]
}
 8005b08:	bf00      	nop
 8005b0a:	e7fe      	b.n	8005b0a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b0c:	f001 ffd2 	bl	8007ab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b10:	2300      	movs	r3, #0
 8005b12:	e082      	b.n	8005c1a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d106      	bne.n	8005b28 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b1a:	f107 030c 	add.w	r3, r7, #12
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 ffd2 	bl	8006ac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b24:	2301      	movs	r3, #1
 8005b26:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b28:	f001 ffc4 	bl	8007ab4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b2c:	f000 fd2c 	bl	8006588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b30:	f001 ff90 	bl	8007a54 <vPortEnterCritical>
 8005b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b3a:	b25b      	sxtb	r3, r3
 8005b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b40:	d103      	bne.n	8005b4a <xQueueSemaphoreTake+0x13a>
 8005b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b50:	b25b      	sxtb	r3, r3
 8005b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b56:	d103      	bne.n	8005b60 <xQueueSemaphoreTake+0x150>
 8005b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b60:	f001 ffa8 	bl	8007ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b64:	463a      	mov	r2, r7
 8005b66:	f107 030c 	add.w	r3, r7, #12
 8005b6a:	4611      	mov	r1, r2
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 ffc1 	bl	8006af4 <xTaskCheckForTimeOut>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d132      	bne.n	8005bde <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b7a:	f000 f9f2 	bl	8005f62 <prvIsQueueEmpty>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d026      	beq.n	8005bd2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d109      	bne.n	8005ba0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005b8c:	f001 ff62 	bl	8007a54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f001 f923 	bl	8006de0 <xTaskPriorityInherit>
 8005b9a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005b9c:	f001 ff8a 	bl	8007ab4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba2:	3324      	adds	r3, #36	; 0x24
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 fed9 	bl	8006960 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bb0:	f000 f985 	bl	8005ebe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bb4:	f000 fcf6 	bl	80065a4 <xTaskResumeAll>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f47f af68 	bne.w	8005a90 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005bc0:	4b18      	ldr	r3, [pc, #96]	; (8005c24 <xQueueSemaphoreTake+0x214>)
 8005bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	e75e      	b.n	8005a90 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005bd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bd4:	f000 f973 	bl	8005ebe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bd8:	f000 fce4 	bl	80065a4 <xTaskResumeAll>
 8005bdc:	e758      	b.n	8005a90 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005bde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005be0:	f000 f96d 	bl	8005ebe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005be4:	f000 fcde 	bl	80065a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005be8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bea:	f000 f9ba 	bl	8005f62 <prvIsQueueEmpty>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f43f af4d 	beq.w	8005a90 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00d      	beq.n	8005c18 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005bfc:	f001 ff2a 	bl	8007a54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c02:	f000 f8b4 	bl	8005d6e <prvGetDisinheritPriorityAfterTimeout>
 8005c06:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f001 f9bc 	bl	8006f8c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c14:	f001 ff4e 	bl	8007ab4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3738      	adds	r7, #56	; 0x38
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	e000ed04 	.word	0xe000ed04

08005c28 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08e      	sub	sp, #56	; 0x38
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10a      	bne.n	8005c54 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	623b      	str	r3, [r7, #32]
}
 8005c50:	bf00      	nop
 8005c52:	e7fe      	b.n	8005c52 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d103      	bne.n	8005c62 <xQueueReceiveFromISR+0x3a>
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <xQueueReceiveFromISR+0x3e>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <xQueueReceiveFromISR+0x40>
 8005c66:	2300      	movs	r3, #0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10a      	bne.n	8005c82 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	61fb      	str	r3, [r7, #28]
}
 8005c7e:	bf00      	nop
 8005c80:	e7fe      	b.n	8005c80 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c82:	f001 ffc9 	bl	8007c18 <vPortValidateInterruptPriority>
	__asm volatile
 8005c86:	f3ef 8211 	mrs	r2, BASEPRI
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	61ba      	str	r2, [r7, #24]
 8005c9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005c9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d02f      	beq.n	8005d0e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cbc:	f000 f8d9 	bl	8005e72 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc2:	1e5a      	subs	r2, r3, #1
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005cc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd0:	d112      	bne.n	8005cf8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d016      	beq.n	8005d08 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	3310      	adds	r3, #16
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 fe8e 	bl	8006a00 <xTaskRemoveFromEventList>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00e      	beq.n	8005d08 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00b      	beq.n	8005d08 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	e007      	b.n	8005d08 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	b25a      	sxtb	r2, r3
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d0c:	e001      	b.n	8005d12 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	637b      	str	r3, [r7, #52]	; 0x34
 8005d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d14:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f383 8811 	msr	BASEPRI, r3
}
 8005d1c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3738      	adds	r7, #56	; 0x38
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10a      	bne.n	8005d50 <vQueueDelete+0x28>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	60bb      	str	r3, [r7, #8]
}
 8005d4c:	bf00      	nop
 8005d4e:	e7fe      	b.n	8005d4e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 f95f 	bl	8006014 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d102      	bne.n	8005d66 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f002 f865 	bl	8007e30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005d66:	bf00      	nop
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005d6e:	b480      	push	{r7}
 8005d70:	b085      	sub	sp, #20
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d006      	beq.n	8005d8c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	e001      	b.n	8005d90 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005d90:	68fb      	ldr	r3, [r7, #12]
	}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b086      	sub	sp, #24
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005daa:	2300      	movs	r3, #0
 8005dac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10d      	bne.n	8005dd8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d14d      	bne.n	8005e60 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f001 f871 	bl	8006eb0 <xTaskPriorityDisinherit>
 8005dce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	609a      	str	r2, [r3, #8]
 8005dd6:	e043      	b.n	8005e60 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d119      	bne.n	8005e12 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6858      	ldr	r0, [r3, #4]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	461a      	mov	r2, r3
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	f00c fbe6 	bl	80125ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	441a      	add	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d32b      	bcc.n	8005e60 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	605a      	str	r2, [r3, #4]
 8005e10:	e026      	b.n	8005e60 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	68d8      	ldr	r0, [r3, #12]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	f00c fbcc 	bl	80125ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	425b      	negs	r3, r3
 8005e2c:	441a      	add	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d207      	bcs.n	8005e4e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	425b      	negs	r3, r3
 8005e48:	441a      	add	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d105      	bne.n	8005e60 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e68:	697b      	ldr	r3, [r7, #20]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b082      	sub	sp, #8
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d018      	beq.n	8005eb6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8c:	441a      	add	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d303      	bcc.n	8005ea6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68d9      	ldr	r1, [r3, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	461a      	mov	r2, r3
 8005eb0:	6838      	ldr	r0, [r7, #0]
 8005eb2:	f00c fb82 	bl	80125ba <memcpy>
	}
}
 8005eb6:	bf00      	nop
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ec6:	f001 fdc5 	bl	8007a54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ed0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ed2:	e011      	b.n	8005ef8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d012      	beq.n	8005f02 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3324      	adds	r3, #36	; 0x24
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 fd8d 	bl	8006a00 <xTaskRemoveFromEventList>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005eec:	f000 fe64 	bl	8006bb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	dce9      	bgt.n	8005ed4 <prvUnlockQueue+0x16>
 8005f00:	e000      	b.n	8005f04 <prvUnlockQueue+0x46>
					break;
 8005f02:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	22ff      	movs	r2, #255	; 0xff
 8005f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f0c:	f001 fdd2 	bl	8007ab4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f10:	f001 fda0 	bl	8007a54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f1a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f1c:	e011      	b.n	8005f42 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d012      	beq.n	8005f4c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3310      	adds	r3, #16
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fd68 	bl	8006a00 <xTaskRemoveFromEventList>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f36:	f000 fe3f 	bl	8006bb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f3a:	7bbb      	ldrb	r3, [r7, #14]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	dce9      	bgt.n	8005f1e <prvUnlockQueue+0x60>
 8005f4a:	e000      	b.n	8005f4e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f4c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	22ff      	movs	r2, #255	; 0xff
 8005f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f56:	f001 fdad 	bl	8007ab4 <vPortExitCritical>
}
 8005f5a:	bf00      	nop
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f6a:	f001 fd73 	bl	8007a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d102      	bne.n	8005f7c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f76:	2301      	movs	r3, #1
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	e001      	b.n	8005f80 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f80:	f001 fd98 	bl	8007ab4 <vPortExitCritical>

	return xReturn;
 8005f84:	68fb      	ldr	r3, [r7, #12]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f96:	f001 fd5d 	bl	8007a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d102      	bne.n	8005fac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	e001      	b.n	8005fb0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005fac:	2300      	movs	r3, #0
 8005fae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fb0:	f001 fd80 	bl	8007ab4 <vPortExitCritical>

	return xReturn;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
	...

08005fc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	e014      	b.n	8005ffa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005fd0:	4a0f      	ldr	r2, [pc, #60]	; (8006010 <vQueueAddToRegistry+0x50>)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10b      	bne.n	8005ff4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005fdc:	490c      	ldr	r1, [pc, #48]	; (8006010 <vQueueAddToRegistry+0x50>)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005fe6:	4a0a      	ldr	r2, [pc, #40]	; (8006010 <vQueueAddToRegistry+0x50>)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	4413      	add	r3, r2
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005ff2:	e006      	b.n	8006002 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b07      	cmp	r3, #7
 8005ffe:	d9e7      	bls.n	8005fd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006000:	bf00      	nop
 8006002:	bf00      	nop
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	2000549c 	.word	0x2000549c

08006014 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800601c:	2300      	movs	r3, #0
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	e016      	b.n	8006050 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006022:	4a10      	ldr	r2, [pc, #64]	; (8006064 <vQueueUnregisterQueue+0x50>)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	4413      	add	r3, r2
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	429a      	cmp	r2, r3
 8006030:	d10b      	bne.n	800604a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006032:	4a0c      	ldr	r2, [pc, #48]	; (8006064 <vQueueUnregisterQueue+0x50>)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2100      	movs	r1, #0
 8006038:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800603c:	4a09      	ldr	r2, [pc, #36]	; (8006064 <vQueueUnregisterQueue+0x50>)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	4413      	add	r3, r2
 8006044:	2200      	movs	r2, #0
 8006046:	605a      	str	r2, [r3, #4]
				break;
 8006048:	e006      	b.n	8006058 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3301      	adds	r3, #1
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b07      	cmp	r3, #7
 8006054:	d9e5      	bls.n	8006022 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006056:	bf00      	nop
 8006058:	bf00      	nop
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	2000549c 	.word	0x2000549c

08006068 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006078:	f001 fcec 	bl	8007a54 <vPortEnterCritical>
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006082:	b25b      	sxtb	r3, r3
 8006084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006088:	d103      	bne.n	8006092 <vQueueWaitForMessageRestricted+0x2a>
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006098:	b25b      	sxtb	r3, r3
 800609a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609e:	d103      	bne.n	80060a8 <vQueueWaitForMessageRestricted+0x40>
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060a8:	f001 fd04 	bl	8007ab4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d106      	bne.n	80060c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	3324      	adds	r3, #36	; 0x24
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	68b9      	ldr	r1, [r7, #8]
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 fc73 	bl	80069a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80060c2:	6978      	ldr	r0, [r7, #20]
 80060c4:	f7ff fefb 	bl	8005ebe <prvUnlockQueue>
	}
 80060c8:	bf00      	nop
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08e      	sub	sp, #56	; 0x38
 80060d4:	af04      	add	r7, sp, #16
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10a      	bne.n	80060fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80060e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e8:	f383 8811 	msr	BASEPRI, r3
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	623b      	str	r3, [r7, #32]
}
 80060f6:	bf00      	nop
 80060f8:	e7fe      	b.n	80060f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80060fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <xTaskCreateStatic+0x46>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	61fb      	str	r3, [r7, #28]
}
 8006112:	bf00      	nop
 8006114:	e7fe      	b.n	8006114 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006116:	23a8      	movs	r3, #168	; 0xa8
 8006118:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	2ba8      	cmp	r3, #168	; 0xa8
 800611e:	d00a      	beq.n	8006136 <xTaskCreateStatic+0x66>
	__asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	61bb      	str	r3, [r7, #24]
}
 8006132:	bf00      	nop
 8006134:	e7fe      	b.n	8006134 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006136:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	2b00      	cmp	r3, #0
 800613c:	d01e      	beq.n	800617c <xTaskCreateStatic+0xac>
 800613e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006140:	2b00      	cmp	r3, #0
 8006142:	d01b      	beq.n	800617c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800614c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	2202      	movs	r2, #2
 8006152:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006156:	2300      	movs	r3, #0
 8006158:	9303      	str	r3, [sp, #12]
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	9302      	str	r3, [sp, #8]
 800615e:	f107 0314 	add.w	r3, r7, #20
 8006162:	9301      	str	r3, [sp, #4]
 8006164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	68b9      	ldr	r1, [r7, #8]
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 f850 	bl	8006214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006174:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006176:	f000 f8f3 	bl	8006360 <prvAddNewTaskToReadyList>
 800617a:	e001      	b.n	8006180 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800617c:	2300      	movs	r3, #0
 800617e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006180:	697b      	ldr	r3, [r7, #20]
	}
 8006182:	4618      	mov	r0, r3
 8006184:	3728      	adds	r7, #40	; 0x28
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800618a:	b580      	push	{r7, lr}
 800618c:	b08c      	sub	sp, #48	; 0x30
 800618e:	af04      	add	r7, sp, #16
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	603b      	str	r3, [r7, #0]
 8006196:	4613      	mov	r3, r2
 8006198:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800619a:	88fb      	ldrh	r3, [r7, #6]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 fd7a 	bl	8007c98 <pvPortMalloc>
 80061a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00e      	beq.n	80061ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80061ac:	20a8      	movs	r0, #168	; 0xa8
 80061ae:	f001 fd73 	bl	8007c98 <pvPortMalloc>
 80061b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	631a      	str	r2, [r3, #48]	; 0x30
 80061c0:	e005      	b.n	80061ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061c2:	6978      	ldr	r0, [r7, #20]
 80061c4:	f001 fe34 	bl	8007e30 <vPortFree>
 80061c8:	e001      	b.n	80061ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061ca:	2300      	movs	r3, #0
 80061cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d017      	beq.n	8006204 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061dc:	88fa      	ldrh	r2, [r7, #6]
 80061de:	2300      	movs	r3, #0
 80061e0:	9303      	str	r3, [sp, #12]
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	9302      	str	r3, [sp, #8]
 80061e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e8:	9301      	str	r3, [sp, #4]
 80061ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	68b9      	ldr	r1, [r7, #8]
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 f80e 	bl	8006214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061f8:	69f8      	ldr	r0, [r7, #28]
 80061fa:	f000 f8b1 	bl	8006360 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061fe:	2301      	movs	r3, #1
 8006200:	61bb      	str	r3, [r7, #24]
 8006202:	e002      	b.n	800620a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006204:	f04f 33ff 	mov.w	r3, #4294967295
 8006208:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800620a:	69bb      	ldr	r3, [r7, #24]
	}
 800620c:	4618      	mov	r0, r3
 800620e:	3720      	adds	r7, #32
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	461a      	mov	r2, r3
 800622c:	21a5      	movs	r1, #165	; 0xa5
 800622e:	f00c f8f8 	bl	8012422 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800623c:	3b01      	subs	r3, #1
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	f023 0307 	bic.w	r3, r3, #7
 800624a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	f003 0307 	and.w	r3, r3, #7
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	617b      	str	r3, [r7, #20]
}
 8006268:	bf00      	nop
 800626a:	e7fe      	b.n	800626a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d01f      	beq.n	80062b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006272:	2300      	movs	r3, #0
 8006274:	61fb      	str	r3, [r7, #28]
 8006276:	e012      	b.n	800629e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	4413      	add	r3, r2
 800627e:	7819      	ldrb	r1, [r3, #0]
 8006280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	4413      	add	r3, r2
 8006286:	3334      	adds	r3, #52	; 0x34
 8006288:	460a      	mov	r2, r1
 800628a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	4413      	add	r3, r2
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d006      	beq.n	80062a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	3301      	adds	r3, #1
 800629c:	61fb      	str	r3, [r7, #28]
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	2b0f      	cmp	r3, #15
 80062a2:	d9e9      	bls.n	8006278 <prvInitialiseNewTask+0x64>
 80062a4:	e000      	b.n	80062a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80062a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062b0:	e003      	b.n	80062ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	2b37      	cmp	r3, #55	; 0x37
 80062be:	d901      	bls.n	80062c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062c0:	2337      	movs	r3, #55	; 0x37
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80062d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d2:	2200      	movs	r2, #0
 80062d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	3304      	adds	r3, #4
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fe fda0 	bl	8004e20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e2:	3318      	adds	r3, #24
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fe fd9b 	bl	8004e20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006302:	2200      	movs	r2, #0
 8006304:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	2200      	movs	r2, #0
 800630c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	3354      	adds	r3, #84	; 0x54
 8006314:	224c      	movs	r2, #76	; 0x4c
 8006316:	2100      	movs	r1, #0
 8006318:	4618      	mov	r0, r3
 800631a:	f00c f882 	bl	8012422 <memset>
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	4a0c      	ldr	r2, [pc, #48]	; (8006354 <prvInitialiseNewTask+0x140>)
 8006322:	659a      	str	r2, [r3, #88]	; 0x58
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	4a0c      	ldr	r2, [pc, #48]	; (8006358 <prvInitialiseNewTask+0x144>)
 8006328:	65da      	str	r2, [r3, #92]	; 0x5c
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	4a0b      	ldr	r2, [pc, #44]	; (800635c <prvInitialiseNewTask+0x148>)
 800632e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	68f9      	ldr	r1, [r7, #12]
 8006334:	69b8      	ldr	r0, [r7, #24]
 8006336:	f001 fa61 	bl	80077fc <pxPortInitialiseStack>
 800633a:	4602      	mov	r2, r0
 800633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800634c:	bf00      	nop
 800634e:	3720      	adds	r7, #32
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	2000f1b4 	.word	0x2000f1b4
 8006358:	2000f21c 	.word	0x2000f21c
 800635c:	2000f284 	.word	0x2000f284

08006360 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006368:	f001 fb74 	bl	8007a54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800636c:	4b2d      	ldr	r3, [pc, #180]	; (8006424 <prvAddNewTaskToReadyList+0xc4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3301      	adds	r3, #1
 8006372:	4a2c      	ldr	r2, [pc, #176]	; (8006424 <prvAddNewTaskToReadyList+0xc4>)
 8006374:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006376:	4b2c      	ldr	r3, [pc, #176]	; (8006428 <prvAddNewTaskToReadyList+0xc8>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d109      	bne.n	8006392 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800637e:	4a2a      	ldr	r2, [pc, #168]	; (8006428 <prvAddNewTaskToReadyList+0xc8>)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006384:	4b27      	ldr	r3, [pc, #156]	; (8006424 <prvAddNewTaskToReadyList+0xc4>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d110      	bne.n	80063ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800638c:	f000 fc38 	bl	8006c00 <prvInitialiseTaskLists>
 8006390:	e00d      	b.n	80063ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006392:	4b26      	ldr	r3, [pc, #152]	; (800642c <prvAddNewTaskToReadyList+0xcc>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d109      	bne.n	80063ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800639a:	4b23      	ldr	r3, [pc, #140]	; (8006428 <prvAddNewTaskToReadyList+0xc8>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d802      	bhi.n	80063ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063a8:	4a1f      	ldr	r2, [pc, #124]	; (8006428 <prvAddNewTaskToReadyList+0xc8>)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063ae:	4b20      	ldr	r3, [pc, #128]	; (8006430 <prvAddNewTaskToReadyList+0xd0>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3301      	adds	r3, #1
 80063b4:	4a1e      	ldr	r2, [pc, #120]	; (8006430 <prvAddNewTaskToReadyList+0xd0>)
 80063b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80063b8:	4b1d      	ldr	r3, [pc, #116]	; (8006430 <prvAddNewTaskToReadyList+0xd0>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c4:	4b1b      	ldr	r3, [pc, #108]	; (8006434 <prvAddNewTaskToReadyList+0xd4>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d903      	bls.n	80063d4 <prvAddNewTaskToReadyList+0x74>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	4a18      	ldr	r2, [pc, #96]	; (8006434 <prvAddNewTaskToReadyList+0xd4>)
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d8:	4613      	mov	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4a15      	ldr	r2, [pc, #84]	; (8006438 <prvAddNewTaskToReadyList+0xd8>)
 80063e2:	441a      	add	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3304      	adds	r3, #4
 80063e8:	4619      	mov	r1, r3
 80063ea:	4610      	mov	r0, r2
 80063ec:	f7fe fd25 	bl	8004e3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063f0:	f001 fb60 	bl	8007ab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063f4:	4b0d      	ldr	r3, [pc, #52]	; (800642c <prvAddNewTaskToReadyList+0xcc>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00e      	beq.n	800641a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063fc:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <prvAddNewTaskToReadyList+0xc8>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	429a      	cmp	r2, r3
 8006408:	d207      	bcs.n	800641a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800640a:	4b0c      	ldr	r3, [pc, #48]	; (800643c <prvAddNewTaskToReadyList+0xdc>)
 800640c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800641a:	bf00      	nop
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	200059b0 	.word	0x200059b0
 8006428:	200054dc 	.word	0x200054dc
 800642c:	200059bc 	.word	0x200059bc
 8006430:	200059cc 	.word	0x200059cc
 8006434:	200059b8 	.word	0x200059b8
 8006438:	200054e0 	.word	0x200054e0
 800643c:	e000ed04 	.word	0xe000ed04

08006440 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006448:	2300      	movs	r3, #0
 800644a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d017      	beq.n	8006482 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006452:	4b13      	ldr	r3, [pc, #76]	; (80064a0 <vTaskDelay+0x60>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <vTaskDelay+0x30>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	60bb      	str	r3, [r7, #8]
}
 800646c:	bf00      	nop
 800646e:	e7fe      	b.n	800646e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006470:	f000 f88a 	bl	8006588 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006474:	2100      	movs	r1, #0
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fe1e 	bl	80070b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800647c:	f000 f892 	bl	80065a4 <xTaskResumeAll>
 8006480:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d107      	bne.n	8006498 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006488:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <vTaskDelay+0x64>)
 800648a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006498:	bf00      	nop
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	200059d8 	.word	0x200059d8
 80064a4:	e000ed04 	.word	0xe000ed04

080064a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08a      	sub	sp, #40	; 0x28
 80064ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064b6:	463a      	mov	r2, r7
 80064b8:	1d39      	adds	r1, r7, #4
 80064ba:	f107 0308 	add.w	r3, r7, #8
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fe fc5a 	bl	8004d78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	9202      	str	r2, [sp, #8]
 80064cc:	9301      	str	r3, [sp, #4]
 80064ce:	2300      	movs	r3, #0
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	2300      	movs	r3, #0
 80064d4:	460a      	mov	r2, r1
 80064d6:	4924      	ldr	r1, [pc, #144]	; (8006568 <vTaskStartScheduler+0xc0>)
 80064d8:	4824      	ldr	r0, [pc, #144]	; (800656c <vTaskStartScheduler+0xc4>)
 80064da:	f7ff fdf9 	bl	80060d0 <xTaskCreateStatic>
 80064de:	4603      	mov	r3, r0
 80064e0:	4a23      	ldr	r2, [pc, #140]	; (8006570 <vTaskStartScheduler+0xc8>)
 80064e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064e4:	4b22      	ldr	r3, [pc, #136]	; (8006570 <vTaskStartScheduler+0xc8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064ec:	2301      	movs	r3, #1
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	e001      	b.n	80064f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d102      	bne.n	8006502 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80064fc:	f000 fe30 	bl	8007160 <xTimerCreateTimerTask>
 8006500:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d11b      	bne.n	8006540 <vTaskStartScheduler+0x98>
	__asm volatile
 8006508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	613b      	str	r3, [r7, #16]
}
 800651a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800651c:	4b15      	ldr	r3, [pc, #84]	; (8006574 <vTaskStartScheduler+0xcc>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3354      	adds	r3, #84	; 0x54
 8006522:	4a15      	ldr	r2, [pc, #84]	; (8006578 <vTaskStartScheduler+0xd0>)
 8006524:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006526:	4b15      	ldr	r3, [pc, #84]	; (800657c <vTaskStartScheduler+0xd4>)
 8006528:	f04f 32ff 	mov.w	r2, #4294967295
 800652c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800652e:	4b14      	ldr	r3, [pc, #80]	; (8006580 <vTaskStartScheduler+0xd8>)
 8006530:	2201      	movs	r2, #1
 8006532:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006534:	4b13      	ldr	r3, [pc, #76]	; (8006584 <vTaskStartScheduler+0xdc>)
 8006536:	2200      	movs	r2, #0
 8006538:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800653a:	f001 f9e9 	bl	8007910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800653e:	e00e      	b.n	800655e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006546:	d10a      	bne.n	800655e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	60fb      	str	r3, [r7, #12]
}
 800655a:	bf00      	nop
 800655c:	e7fe      	b.n	800655c <vTaskStartScheduler+0xb4>
}
 800655e:	bf00      	nop
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	080132b0 	.word	0x080132b0
 800656c:	08006bd1 	.word	0x08006bd1
 8006570:	200059d4 	.word	0x200059d4
 8006574:	200054dc 	.word	0x200054dc
 8006578:	20000088 	.word	0x20000088
 800657c:	200059d0 	.word	0x200059d0
 8006580:	200059bc 	.word	0x200059bc
 8006584:	200059b4 	.word	0x200059b4

08006588 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800658c:	4b04      	ldr	r3, [pc, #16]	; (80065a0 <vTaskSuspendAll+0x18>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3301      	adds	r3, #1
 8006592:	4a03      	ldr	r2, [pc, #12]	; (80065a0 <vTaskSuspendAll+0x18>)
 8006594:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006596:	bf00      	nop
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	200059d8 	.word	0x200059d8

080065a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065b2:	4b42      	ldr	r3, [pc, #264]	; (80066bc <xTaskResumeAll+0x118>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10a      	bne.n	80065d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	603b      	str	r3, [r7, #0]
}
 80065cc:	bf00      	nop
 80065ce:	e7fe      	b.n	80065ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065d0:	f001 fa40 	bl	8007a54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065d4:	4b39      	ldr	r3, [pc, #228]	; (80066bc <xTaskResumeAll+0x118>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3b01      	subs	r3, #1
 80065da:	4a38      	ldr	r2, [pc, #224]	; (80066bc <xTaskResumeAll+0x118>)
 80065dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065de:	4b37      	ldr	r3, [pc, #220]	; (80066bc <xTaskResumeAll+0x118>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d162      	bne.n	80066ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065e6:	4b36      	ldr	r3, [pc, #216]	; (80066c0 <xTaskResumeAll+0x11c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d05e      	beq.n	80066ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065ee:	e02f      	b.n	8006650 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f0:	4b34      	ldr	r3, [pc, #208]	; (80066c4 <xTaskResumeAll+0x120>)
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3318      	adds	r3, #24
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fe fc79 	bl	8004ef4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3304      	adds	r3, #4
 8006606:	4618      	mov	r0, r3
 8006608:	f7fe fc74 	bl	8004ef4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006610:	4b2d      	ldr	r3, [pc, #180]	; (80066c8 <xTaskResumeAll+0x124>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d903      	bls.n	8006620 <xTaskResumeAll+0x7c>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	4a2a      	ldr	r2, [pc, #168]	; (80066c8 <xTaskResumeAll+0x124>)
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4a27      	ldr	r2, [pc, #156]	; (80066cc <xTaskResumeAll+0x128>)
 800662e:	441a      	add	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3304      	adds	r3, #4
 8006634:	4619      	mov	r1, r3
 8006636:	4610      	mov	r0, r2
 8006638:	f7fe fbff 	bl	8004e3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006640:	4b23      	ldr	r3, [pc, #140]	; (80066d0 <xTaskResumeAll+0x12c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006646:	429a      	cmp	r2, r3
 8006648:	d302      	bcc.n	8006650 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800664a:	4b22      	ldr	r3, [pc, #136]	; (80066d4 <xTaskResumeAll+0x130>)
 800664c:	2201      	movs	r2, #1
 800664e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006650:	4b1c      	ldr	r3, [pc, #112]	; (80066c4 <xTaskResumeAll+0x120>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1cb      	bne.n	80065f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800665e:	f000 fb71 	bl	8006d44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006662:	4b1d      	ldr	r3, [pc, #116]	; (80066d8 <xTaskResumeAll+0x134>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d010      	beq.n	8006690 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800666e:	f000 f859 	bl	8006724 <xTaskIncrementTick>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006678:	4b16      	ldr	r3, [pc, #88]	; (80066d4 <xTaskResumeAll+0x130>)
 800667a:	2201      	movs	r2, #1
 800667c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3b01      	subs	r3, #1
 8006682:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1f1      	bne.n	800666e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800668a:	4b13      	ldr	r3, [pc, #76]	; (80066d8 <xTaskResumeAll+0x134>)
 800668c:	2200      	movs	r2, #0
 800668e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006690:	4b10      	ldr	r3, [pc, #64]	; (80066d4 <xTaskResumeAll+0x130>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d009      	beq.n	80066ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006698:	2301      	movs	r3, #1
 800669a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800669c:	4b0f      	ldr	r3, [pc, #60]	; (80066dc <xTaskResumeAll+0x138>)
 800669e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066ac:	f001 fa02 	bl	8007ab4 <vPortExitCritical>

	return xAlreadyYielded;
 80066b0:	68bb      	ldr	r3, [r7, #8]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	200059d8 	.word	0x200059d8
 80066c0:	200059b0 	.word	0x200059b0
 80066c4:	20005970 	.word	0x20005970
 80066c8:	200059b8 	.word	0x200059b8
 80066cc:	200054e0 	.word	0x200054e0
 80066d0:	200054dc 	.word	0x200054dc
 80066d4:	200059c4 	.word	0x200059c4
 80066d8:	200059c0 	.word	0x200059c0
 80066dc:	e000ed04 	.word	0xe000ed04

080066e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80066e6:	4b05      	ldr	r3, [pc, #20]	; (80066fc <xTaskGetTickCount+0x1c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80066ec:	687b      	ldr	r3, [r7, #4]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	200059b4 	.word	0x200059b4

08006700 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006706:	f001 fa87 	bl	8007c18 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800670a:	2300      	movs	r3, #0
 800670c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800670e:	4b04      	ldr	r3, [pc, #16]	; (8006720 <xTaskGetTickCountFromISR+0x20>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006714:	683b      	ldr	r3, [r7, #0]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	200059b4 	.word	0x200059b4

08006724 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800672a:	2300      	movs	r3, #0
 800672c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800672e:	4b4f      	ldr	r3, [pc, #316]	; (800686c <xTaskIncrementTick+0x148>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	f040 808f 	bne.w	8006856 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006738:	4b4d      	ldr	r3, [pc, #308]	; (8006870 <xTaskIncrementTick+0x14c>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3301      	adds	r3, #1
 800673e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006740:	4a4b      	ldr	r2, [pc, #300]	; (8006870 <xTaskIncrementTick+0x14c>)
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d120      	bne.n	800678e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800674c:	4b49      	ldr	r3, [pc, #292]	; (8006874 <xTaskIncrementTick+0x150>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <xTaskIncrementTick+0x48>
	__asm volatile
 8006756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	603b      	str	r3, [r7, #0]
}
 8006768:	bf00      	nop
 800676a:	e7fe      	b.n	800676a <xTaskIncrementTick+0x46>
 800676c:	4b41      	ldr	r3, [pc, #260]	; (8006874 <xTaskIncrementTick+0x150>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	60fb      	str	r3, [r7, #12]
 8006772:	4b41      	ldr	r3, [pc, #260]	; (8006878 <xTaskIncrementTick+0x154>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a3f      	ldr	r2, [pc, #252]	; (8006874 <xTaskIncrementTick+0x150>)
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	4a3f      	ldr	r2, [pc, #252]	; (8006878 <xTaskIncrementTick+0x154>)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	4b3e      	ldr	r3, [pc, #248]	; (800687c <xTaskIncrementTick+0x158>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3301      	adds	r3, #1
 8006786:	4a3d      	ldr	r2, [pc, #244]	; (800687c <xTaskIncrementTick+0x158>)
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	f000 fadb 	bl	8006d44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800678e:	4b3c      	ldr	r3, [pc, #240]	; (8006880 <xTaskIncrementTick+0x15c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	429a      	cmp	r2, r3
 8006796:	d349      	bcc.n	800682c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006798:	4b36      	ldr	r3, [pc, #216]	; (8006874 <xTaskIncrementTick+0x150>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d104      	bne.n	80067ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a2:	4b37      	ldr	r3, [pc, #220]	; (8006880 <xTaskIncrementTick+0x15c>)
 80067a4:	f04f 32ff 	mov.w	r2, #4294967295
 80067a8:	601a      	str	r2, [r3, #0]
					break;
 80067aa:	e03f      	b.n	800682c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ac:	4b31      	ldr	r3, [pc, #196]	; (8006874 <xTaskIncrementTick+0x150>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d203      	bcs.n	80067cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067c4:	4a2e      	ldr	r2, [pc, #184]	; (8006880 <xTaskIncrementTick+0x15c>)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067ca:	e02f      	b.n	800682c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	3304      	adds	r3, #4
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fe fb8f 	bl	8004ef4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d004      	beq.n	80067e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	3318      	adds	r3, #24
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe fb86 	bl	8004ef4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ec:	4b25      	ldr	r3, [pc, #148]	; (8006884 <xTaskIncrementTick+0x160>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d903      	bls.n	80067fc <xTaskIncrementTick+0xd8>
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f8:	4a22      	ldr	r2, [pc, #136]	; (8006884 <xTaskIncrementTick+0x160>)
 80067fa:	6013      	str	r3, [r2, #0]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006800:	4613      	mov	r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4a1f      	ldr	r2, [pc, #124]	; (8006888 <xTaskIncrementTick+0x164>)
 800680a:	441a      	add	r2, r3
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	3304      	adds	r3, #4
 8006810:	4619      	mov	r1, r3
 8006812:	4610      	mov	r0, r2
 8006814:	f7fe fb11 	bl	8004e3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681c:	4b1b      	ldr	r3, [pc, #108]	; (800688c <xTaskIncrementTick+0x168>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006822:	429a      	cmp	r2, r3
 8006824:	d3b8      	bcc.n	8006798 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006826:	2301      	movs	r3, #1
 8006828:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800682a:	e7b5      	b.n	8006798 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800682c:	4b17      	ldr	r3, [pc, #92]	; (800688c <xTaskIncrementTick+0x168>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006832:	4915      	ldr	r1, [pc, #84]	; (8006888 <xTaskIncrementTick+0x164>)
 8006834:	4613      	mov	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	440b      	add	r3, r1
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d901      	bls.n	8006848 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006844:	2301      	movs	r3, #1
 8006846:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006848:	4b11      	ldr	r3, [pc, #68]	; (8006890 <xTaskIncrementTick+0x16c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d007      	beq.n	8006860 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006850:	2301      	movs	r3, #1
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	e004      	b.n	8006860 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006856:	4b0f      	ldr	r3, [pc, #60]	; (8006894 <xTaskIncrementTick+0x170>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3301      	adds	r3, #1
 800685c:	4a0d      	ldr	r2, [pc, #52]	; (8006894 <xTaskIncrementTick+0x170>)
 800685e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006860:	697b      	ldr	r3, [r7, #20]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	200059d8 	.word	0x200059d8
 8006870:	200059b4 	.word	0x200059b4
 8006874:	20005968 	.word	0x20005968
 8006878:	2000596c 	.word	0x2000596c
 800687c:	200059c8 	.word	0x200059c8
 8006880:	200059d0 	.word	0x200059d0
 8006884:	200059b8 	.word	0x200059b8
 8006888:	200054e0 	.word	0x200054e0
 800688c:	200054dc 	.word	0x200054dc
 8006890:	200059c4 	.word	0x200059c4
 8006894:	200059c0 	.word	0x200059c0

08006898 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800689e:	4b2a      	ldr	r3, [pc, #168]	; (8006948 <vTaskSwitchContext+0xb0>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068a6:	4b29      	ldr	r3, [pc, #164]	; (800694c <vTaskSwitchContext+0xb4>)
 80068a8:	2201      	movs	r2, #1
 80068aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068ac:	e046      	b.n	800693c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80068ae:	4b27      	ldr	r3, [pc, #156]	; (800694c <vTaskSwitchContext+0xb4>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068b4:	4b26      	ldr	r3, [pc, #152]	; (8006950 <vTaskSwitchContext+0xb8>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	60fb      	str	r3, [r7, #12]
 80068ba:	e010      	b.n	80068de <vTaskSwitchContext+0x46>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10a      	bne.n	80068d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	607b      	str	r3, [r7, #4]
}
 80068d4:	bf00      	nop
 80068d6:	e7fe      	b.n	80068d6 <vTaskSwitchContext+0x3e>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	3b01      	subs	r3, #1
 80068dc:	60fb      	str	r3, [r7, #12]
 80068de:	491d      	ldr	r1, [pc, #116]	; (8006954 <vTaskSwitchContext+0xbc>)
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4613      	mov	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	440b      	add	r3, r1
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0e4      	beq.n	80068bc <vTaskSwitchContext+0x24>
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	4613      	mov	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4a15      	ldr	r2, [pc, #84]	; (8006954 <vTaskSwitchContext+0xbc>)
 80068fe:	4413      	add	r3, r2
 8006900:	60bb      	str	r3, [r7, #8]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	605a      	str	r2, [r3, #4]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	3308      	adds	r3, #8
 8006914:	429a      	cmp	r2, r3
 8006916:	d104      	bne.n	8006922 <vTaskSwitchContext+0x8a>
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	605a      	str	r2, [r3, #4]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	4a0b      	ldr	r2, [pc, #44]	; (8006958 <vTaskSwitchContext+0xc0>)
 800692a:	6013      	str	r3, [r2, #0]
 800692c:	4a08      	ldr	r2, [pc, #32]	; (8006950 <vTaskSwitchContext+0xb8>)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006932:	4b09      	ldr	r3, [pc, #36]	; (8006958 <vTaskSwitchContext+0xc0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3354      	adds	r3, #84	; 0x54
 8006938:	4a08      	ldr	r2, [pc, #32]	; (800695c <vTaskSwitchContext+0xc4>)
 800693a:	6013      	str	r3, [r2, #0]
}
 800693c:	bf00      	nop
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr
 8006948:	200059d8 	.word	0x200059d8
 800694c:	200059c4 	.word	0x200059c4
 8006950:	200059b8 	.word	0x200059b8
 8006954:	200054e0 	.word	0x200054e0
 8006958:	200054dc 	.word	0x200054dc
 800695c:	20000088 	.word	0x20000088

08006960 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10a      	bne.n	8006986 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	60fb      	str	r3, [r7, #12]
}
 8006982:	bf00      	nop
 8006984:	e7fe      	b.n	8006984 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006986:	4b07      	ldr	r3, [pc, #28]	; (80069a4 <vTaskPlaceOnEventList+0x44>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3318      	adds	r3, #24
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fe fa77 	bl	8004e82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006994:	2101      	movs	r1, #1
 8006996:	6838      	ldr	r0, [r7, #0]
 8006998:	f000 fb8e 	bl	80070b8 <prvAddCurrentTaskToDelayedList>
}
 800699c:	bf00      	nop
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	200054dc 	.word	0x200054dc

080069a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10a      	bne.n	80069d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	617b      	str	r3, [r7, #20]
}
 80069cc:	bf00      	nop
 80069ce:	e7fe      	b.n	80069ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069d0:	4b0a      	ldr	r3, [pc, #40]	; (80069fc <vTaskPlaceOnEventListRestricted+0x54>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3318      	adds	r3, #24
 80069d6:	4619      	mov	r1, r3
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f7fe fa2e 	bl	8004e3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80069e4:	f04f 33ff 	mov.w	r3, #4294967295
 80069e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069ea:	6879      	ldr	r1, [r7, #4]
 80069ec:	68b8      	ldr	r0, [r7, #8]
 80069ee:	f000 fb63 	bl	80070b8 <prvAddCurrentTaskToDelayedList>
	}
 80069f2:	bf00      	nop
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	200054dc 	.word	0x200054dc

08006a00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10a      	bne.n	8006a2c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	60fb      	str	r3, [r7, #12]
}
 8006a28:	bf00      	nop
 8006a2a:	e7fe      	b.n	8006a2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	3318      	adds	r3, #24
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7fe fa5f 	bl	8004ef4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a36:	4b1e      	ldr	r3, [pc, #120]	; (8006ab0 <xTaskRemoveFromEventList+0xb0>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d11d      	bne.n	8006a7a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	3304      	adds	r3, #4
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fe fa56 	bl	8004ef4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4c:	4b19      	ldr	r3, [pc, #100]	; (8006ab4 <xTaskRemoveFromEventList+0xb4>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d903      	bls.n	8006a5c <xTaskRemoveFromEventList+0x5c>
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a58:	4a16      	ldr	r2, [pc, #88]	; (8006ab4 <xTaskRemoveFromEventList+0xb4>)
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a60:	4613      	mov	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4a13      	ldr	r2, [pc, #76]	; (8006ab8 <xTaskRemoveFromEventList+0xb8>)
 8006a6a:	441a      	add	r2, r3
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	3304      	adds	r3, #4
 8006a70:	4619      	mov	r1, r3
 8006a72:	4610      	mov	r0, r2
 8006a74:	f7fe f9e1 	bl	8004e3a <vListInsertEnd>
 8006a78:	e005      	b.n	8006a86 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	3318      	adds	r3, #24
 8006a7e:	4619      	mov	r1, r3
 8006a80:	480e      	ldr	r0, [pc, #56]	; (8006abc <xTaskRemoveFromEventList+0xbc>)
 8006a82:	f7fe f9da 	bl	8004e3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8a:	4b0d      	ldr	r3, [pc, #52]	; (8006ac0 <xTaskRemoveFromEventList+0xc0>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d905      	bls.n	8006aa0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a94:	2301      	movs	r3, #1
 8006a96:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a98:	4b0a      	ldr	r3, [pc, #40]	; (8006ac4 <xTaskRemoveFromEventList+0xc4>)
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	e001      	b.n	8006aa4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006aa4:	697b      	ldr	r3, [r7, #20]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	200059d8 	.word	0x200059d8
 8006ab4:	200059b8 	.word	0x200059b8
 8006ab8:	200054e0 	.word	0x200054e0
 8006abc:	20005970 	.word	0x20005970
 8006ac0:	200054dc 	.word	0x200054dc
 8006ac4:	200059c4 	.word	0x200059c4

08006ac8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ad0:	4b06      	ldr	r3, [pc, #24]	; (8006aec <vTaskInternalSetTimeOutState+0x24>)
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ad8:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <vTaskInternalSetTimeOutState+0x28>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	605a      	str	r2, [r3, #4]
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	200059c8 	.word	0x200059c8
 8006af0:	200059b4 	.word	0x200059b4

08006af4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10a      	bne.n	8006b1a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	613b      	str	r3, [r7, #16]
}
 8006b16:	bf00      	nop
 8006b18:	e7fe      	b.n	8006b18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10a      	bne.n	8006b36 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	60fb      	str	r3, [r7, #12]
}
 8006b32:	bf00      	nop
 8006b34:	e7fe      	b.n	8006b34 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006b36:	f000 ff8d 	bl	8007a54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b3a:	4b1d      	ldr	r3, [pc, #116]	; (8006bb0 <xTaskCheckForTimeOut+0xbc>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b52:	d102      	bne.n	8006b5a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b54:	2300      	movs	r3, #0
 8006b56:	61fb      	str	r3, [r7, #28]
 8006b58:	e023      	b.n	8006ba2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	4b15      	ldr	r3, [pc, #84]	; (8006bb4 <xTaskCheckForTimeOut+0xc0>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d007      	beq.n	8006b76 <xTaskCheckForTimeOut+0x82>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d302      	bcc.n	8006b76 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b70:	2301      	movs	r3, #1
 8006b72:	61fb      	str	r3, [r7, #28]
 8006b74:	e015      	b.n	8006ba2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d20b      	bcs.n	8006b98 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	1ad2      	subs	r2, r2, r3
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff ff9b 	bl	8006ac8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b92:	2300      	movs	r3, #0
 8006b94:	61fb      	str	r3, [r7, #28]
 8006b96:	e004      	b.n	8006ba2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ba2:	f000 ff87 	bl	8007ab4 <vPortExitCritical>

	return xReturn;
 8006ba6:	69fb      	ldr	r3, [r7, #28]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3720      	adds	r7, #32
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	200059b4 	.word	0x200059b4
 8006bb4:	200059c8 	.word	0x200059c8

08006bb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006bb8:	b480      	push	{r7}
 8006bba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006bbc:	4b03      	ldr	r3, [pc, #12]	; (8006bcc <vTaskMissedYield+0x14>)
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]
}
 8006bc2:	bf00      	nop
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	200059c4 	.word	0x200059c4

08006bd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006bd8:	f000 f852 	bl	8006c80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006bdc:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <prvIdleTask+0x28>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d9f9      	bls.n	8006bd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006be4:	4b05      	ldr	r3, [pc, #20]	; (8006bfc <prvIdleTask+0x2c>)
 8006be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bf4:	e7f0      	b.n	8006bd8 <prvIdleTask+0x8>
 8006bf6:	bf00      	nop
 8006bf8:	200054e0 	.word	0x200054e0
 8006bfc:	e000ed04 	.word	0xe000ed04

08006c00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c06:	2300      	movs	r3, #0
 8006c08:	607b      	str	r3, [r7, #4]
 8006c0a:	e00c      	b.n	8006c26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4a12      	ldr	r2, [pc, #72]	; (8006c60 <prvInitialiseTaskLists+0x60>)
 8006c18:	4413      	add	r3, r2
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fe f8e0 	bl	8004de0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3301      	adds	r3, #1
 8006c24:	607b      	str	r3, [r7, #4]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b37      	cmp	r3, #55	; 0x37
 8006c2a:	d9ef      	bls.n	8006c0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c2c:	480d      	ldr	r0, [pc, #52]	; (8006c64 <prvInitialiseTaskLists+0x64>)
 8006c2e:	f7fe f8d7 	bl	8004de0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c32:	480d      	ldr	r0, [pc, #52]	; (8006c68 <prvInitialiseTaskLists+0x68>)
 8006c34:	f7fe f8d4 	bl	8004de0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c38:	480c      	ldr	r0, [pc, #48]	; (8006c6c <prvInitialiseTaskLists+0x6c>)
 8006c3a:	f7fe f8d1 	bl	8004de0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c3e:	480c      	ldr	r0, [pc, #48]	; (8006c70 <prvInitialiseTaskLists+0x70>)
 8006c40:	f7fe f8ce 	bl	8004de0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c44:	480b      	ldr	r0, [pc, #44]	; (8006c74 <prvInitialiseTaskLists+0x74>)
 8006c46:	f7fe f8cb 	bl	8004de0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c4a:	4b0b      	ldr	r3, [pc, #44]	; (8006c78 <prvInitialiseTaskLists+0x78>)
 8006c4c:	4a05      	ldr	r2, [pc, #20]	; (8006c64 <prvInitialiseTaskLists+0x64>)
 8006c4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c50:	4b0a      	ldr	r3, [pc, #40]	; (8006c7c <prvInitialiseTaskLists+0x7c>)
 8006c52:	4a05      	ldr	r2, [pc, #20]	; (8006c68 <prvInitialiseTaskLists+0x68>)
 8006c54:	601a      	str	r2, [r3, #0]
}
 8006c56:	bf00      	nop
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	200054e0 	.word	0x200054e0
 8006c64:	20005940 	.word	0x20005940
 8006c68:	20005954 	.word	0x20005954
 8006c6c:	20005970 	.word	0x20005970
 8006c70:	20005984 	.word	0x20005984
 8006c74:	2000599c 	.word	0x2000599c
 8006c78:	20005968 	.word	0x20005968
 8006c7c:	2000596c 	.word	0x2000596c

08006c80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c86:	e019      	b.n	8006cbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c88:	f000 fee4 	bl	8007a54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c8c:	4b10      	ldr	r3, [pc, #64]	; (8006cd0 <prvCheckTasksWaitingTermination+0x50>)
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	3304      	adds	r3, #4
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7fe f92b 	bl	8004ef4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c9e:	4b0d      	ldr	r3, [pc, #52]	; (8006cd4 <prvCheckTasksWaitingTermination+0x54>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	4a0b      	ldr	r2, [pc, #44]	; (8006cd4 <prvCheckTasksWaitingTermination+0x54>)
 8006ca6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ca8:	4b0b      	ldr	r3, [pc, #44]	; (8006cd8 <prvCheckTasksWaitingTermination+0x58>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3b01      	subs	r3, #1
 8006cae:	4a0a      	ldr	r2, [pc, #40]	; (8006cd8 <prvCheckTasksWaitingTermination+0x58>)
 8006cb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cb2:	f000 feff 	bl	8007ab4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f810 	bl	8006cdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cbc:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <prvCheckTasksWaitingTermination+0x58>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e1      	bne.n	8006c88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006cc4:	bf00      	nop
 8006cc6:	bf00      	nop
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20005984 	.word	0x20005984
 8006cd4:	200059b0 	.word	0x200059b0
 8006cd8:	20005998 	.word	0x20005998

08006cdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	3354      	adds	r3, #84	; 0x54
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f00b fbb3 	bl	8012454 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d108      	bne.n	8006d0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f001 f897 	bl	8007e30 <vPortFree>
				vPortFree( pxTCB );
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f001 f894 	bl	8007e30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d08:	e018      	b.n	8006d3c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d103      	bne.n	8006d1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 f88b 	bl	8007e30 <vPortFree>
	}
 8006d1a:	e00f      	b.n	8006d3c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d00a      	beq.n	8006d3c <prvDeleteTCB+0x60>
	__asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	60fb      	str	r3, [r7, #12]
}
 8006d38:	bf00      	nop
 8006d3a:	e7fe      	b.n	8006d3a <prvDeleteTCB+0x5e>
	}
 8006d3c:	bf00      	nop
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d4a:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <prvResetNextTaskUnblockTime+0x38>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d104      	bne.n	8006d5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d54:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <prvResetNextTaskUnblockTime+0x3c>)
 8006d56:	f04f 32ff 	mov.w	r2, #4294967295
 8006d5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d5c:	e008      	b.n	8006d70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d5e:	4b07      	ldr	r3, [pc, #28]	; (8006d7c <prvResetNextTaskUnblockTime+0x38>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	4a04      	ldr	r2, [pc, #16]	; (8006d80 <prvResetNextTaskUnblockTime+0x3c>)
 8006d6e:	6013      	str	r3, [r2, #0]
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	20005968 	.word	0x20005968
 8006d80:	200059d0 	.word	0x200059d0

08006d84 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006d8a:	4b05      	ldr	r3, [pc, #20]	; (8006da0 <xTaskGetCurrentTaskHandle+0x1c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006d90:	687b      	ldr	r3, [r7, #4]
	}
 8006d92:	4618      	mov	r0, r3
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	200054dc 	.word	0x200054dc

08006da4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006daa:	4b0b      	ldr	r3, [pc, #44]	; (8006dd8 <xTaskGetSchedulerState+0x34>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d102      	bne.n	8006db8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006db2:	2301      	movs	r3, #1
 8006db4:	607b      	str	r3, [r7, #4]
 8006db6:	e008      	b.n	8006dca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006db8:	4b08      	ldr	r3, [pc, #32]	; (8006ddc <xTaskGetSchedulerState+0x38>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d102      	bne.n	8006dc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	607b      	str	r3, [r7, #4]
 8006dc4:	e001      	b.n	8006dca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006dca:	687b      	ldr	r3, [r7, #4]
	}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	200059bc 	.word	0x200059bc
 8006ddc:	200059d8 	.word	0x200059d8

08006de0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006dec:	2300      	movs	r3, #0
 8006dee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d051      	beq.n	8006e9a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfa:	4b2a      	ldr	r3, [pc, #168]	; (8006ea4 <xTaskPriorityInherit+0xc4>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d241      	bcs.n	8006e88 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	db06      	blt.n	8006e1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e0c:	4b25      	ldr	r3, [pc, #148]	; (8006ea4 <xTaskPriorityInherit+0xc4>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	6959      	ldr	r1, [r3, #20]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e22:	4613      	mov	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4a1f      	ldr	r2, [pc, #124]	; (8006ea8 <xTaskPriorityInherit+0xc8>)
 8006e2c:	4413      	add	r3, r2
 8006e2e:	4299      	cmp	r1, r3
 8006e30:	d122      	bne.n	8006e78 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	3304      	adds	r3, #4
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7fe f85c 	bl	8004ef4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e3c:	4b19      	ldr	r3, [pc, #100]	; (8006ea4 <xTaskPriorityInherit+0xc4>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4a:	4b18      	ldr	r3, [pc, #96]	; (8006eac <xTaskPriorityInherit+0xcc>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d903      	bls.n	8006e5a <xTaskPriorityInherit+0x7a>
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e56:	4a15      	ldr	r2, [pc, #84]	; (8006eac <xTaskPriorityInherit+0xcc>)
 8006e58:	6013      	str	r3, [r2, #0]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e5e:	4613      	mov	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4a10      	ldr	r2, [pc, #64]	; (8006ea8 <xTaskPriorityInherit+0xc8>)
 8006e68:	441a      	add	r2, r3
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4610      	mov	r0, r2
 8006e72:	f7fd ffe2 	bl	8004e3a <vListInsertEnd>
 8006e76:	e004      	b.n	8006e82 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e78:	4b0a      	ldr	r3, [pc, #40]	; (8006ea4 <xTaskPriorityInherit+0xc4>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006e82:	2301      	movs	r3, #1
 8006e84:	60fb      	str	r3, [r7, #12]
 8006e86:	e008      	b.n	8006e9a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e8c:	4b05      	ldr	r3, [pc, #20]	; (8006ea4 <xTaskPriorityInherit+0xc4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d201      	bcs.n	8006e9a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006e96:	2301      	movs	r3, #1
 8006e98:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
	}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	200054dc 	.word	0x200054dc
 8006ea8:	200054e0 	.word	0x200054e0
 8006eac:	200059b8 	.word	0x200059b8

08006eb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d056      	beq.n	8006f74 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ec6:	4b2e      	ldr	r3, [pc, #184]	; (8006f80 <xTaskPriorityDisinherit+0xd0>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d00a      	beq.n	8006ee6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	60fb      	str	r3, [r7, #12]
}
 8006ee2:	bf00      	nop
 8006ee4:	e7fe      	b.n	8006ee4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10a      	bne.n	8006f04 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	60bb      	str	r3, [r7, #8]
}
 8006f00:	bf00      	nop
 8006f02:	e7fe      	b.n	8006f02 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f08:	1e5a      	subs	r2, r3, #1
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d02c      	beq.n	8006f74 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d128      	bne.n	8006f74 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	3304      	adds	r3, #4
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fd ffe4 	bl	8004ef4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f44:	4b0f      	ldr	r3, [pc, #60]	; (8006f84 <xTaskPriorityDisinherit+0xd4>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d903      	bls.n	8006f54 <xTaskPriorityDisinherit+0xa4>
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f50:	4a0c      	ldr	r2, [pc, #48]	; (8006f84 <xTaskPriorityDisinherit+0xd4>)
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f58:	4613      	mov	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4a09      	ldr	r2, [pc, #36]	; (8006f88 <xTaskPriorityDisinherit+0xd8>)
 8006f62:	441a      	add	r2, r3
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	3304      	adds	r3, #4
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	f7fd ff65 	bl	8004e3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f70:	2301      	movs	r3, #1
 8006f72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f74:	697b      	ldr	r3, [r7, #20]
	}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	200054dc 	.word	0x200054dc
 8006f84:	200059b8 	.word	0x200059b8
 8006f88:	200054e0 	.word	0x200054e0

08006f8c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b088      	sub	sp, #32
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d06a      	beq.n	800707a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10a      	bne.n	8006fc2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	60fb      	str	r3, [r7, #12]
}
 8006fbe:	bf00      	nop
 8006fc0:	e7fe      	b.n	8006fc0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d902      	bls.n	8006fd2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	61fb      	str	r3, [r7, #28]
 8006fd0:	e002      	b.n	8006fd8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fd6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	69fa      	ldr	r2, [r7, #28]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d04b      	beq.n	800707a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d146      	bne.n	800707a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006fec:	4b25      	ldr	r3, [pc, #148]	; (8007084 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d10a      	bne.n	800700c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	60bb      	str	r3, [r7, #8]
}
 8007008:	bf00      	nop
 800700a:	e7fe      	b.n	800700a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007010:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	69fa      	ldr	r2, [r7, #28]
 8007016:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	2b00      	cmp	r3, #0
 800701e:	db04      	blt.n	800702a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	6959      	ldr	r1, [r3, #20]
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	4613      	mov	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4a13      	ldr	r2, [pc, #76]	; (8007088 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800703a:	4413      	add	r3, r2
 800703c:	4299      	cmp	r1, r3
 800703e:	d11c      	bne.n	800707a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	3304      	adds	r3, #4
 8007044:	4618      	mov	r0, r3
 8007046:	f7fd ff55 	bl	8004ef4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704e:	4b0f      	ldr	r3, [pc, #60]	; (800708c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	429a      	cmp	r2, r3
 8007054:	d903      	bls.n	800705e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705a:	4a0c      	ldr	r2, [pc, #48]	; (800708c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4a07      	ldr	r2, [pc, #28]	; (8007088 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800706c:	441a      	add	r2, r3
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	3304      	adds	r3, #4
 8007072:	4619      	mov	r1, r3
 8007074:	4610      	mov	r0, r2
 8007076:	f7fd fee0 	bl	8004e3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800707a:	bf00      	nop
 800707c:	3720      	adds	r7, #32
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	200054dc 	.word	0x200054dc
 8007088:	200054e0 	.word	0x200054e0
 800708c:	200059b8 	.word	0x200059b8

08007090 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007090:	b480      	push	{r7}
 8007092:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007094:	4b07      	ldr	r3, [pc, #28]	; (80070b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d004      	beq.n	80070a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800709c:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070a2:	3201      	adds	r2, #1
 80070a4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80070a6:	4b03      	ldr	r3, [pc, #12]	; (80070b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80070a8:	681b      	ldr	r3, [r3, #0]
	}
 80070aa:	4618      	mov	r0, r3
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	200054dc 	.word	0x200054dc

080070b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070c2:	4b21      	ldr	r3, [pc, #132]	; (8007148 <prvAddCurrentTaskToDelayedList+0x90>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070c8:	4b20      	ldr	r3, [pc, #128]	; (800714c <prvAddCurrentTaskToDelayedList+0x94>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3304      	adds	r3, #4
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fd ff10 	bl	8004ef4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070da:	d10a      	bne.n	80070f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d007      	beq.n	80070f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070e2:	4b1a      	ldr	r3, [pc, #104]	; (800714c <prvAddCurrentTaskToDelayedList+0x94>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3304      	adds	r3, #4
 80070e8:	4619      	mov	r1, r3
 80070ea:	4819      	ldr	r0, [pc, #100]	; (8007150 <prvAddCurrentTaskToDelayedList+0x98>)
 80070ec:	f7fd fea5 	bl	8004e3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070f0:	e026      	b.n	8007140 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4413      	add	r3, r2
 80070f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070fa:	4b14      	ldr	r3, [pc, #80]	; (800714c <prvAddCurrentTaskToDelayedList+0x94>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	429a      	cmp	r2, r3
 8007108:	d209      	bcs.n	800711e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800710a:	4b12      	ldr	r3, [pc, #72]	; (8007154 <prvAddCurrentTaskToDelayedList+0x9c>)
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	4b0f      	ldr	r3, [pc, #60]	; (800714c <prvAddCurrentTaskToDelayedList+0x94>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3304      	adds	r3, #4
 8007114:	4619      	mov	r1, r3
 8007116:	4610      	mov	r0, r2
 8007118:	f7fd feb3 	bl	8004e82 <vListInsert>
}
 800711c:	e010      	b.n	8007140 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800711e:	4b0e      	ldr	r3, [pc, #56]	; (8007158 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	4b0a      	ldr	r3, [pc, #40]	; (800714c <prvAddCurrentTaskToDelayedList+0x94>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3304      	adds	r3, #4
 8007128:	4619      	mov	r1, r3
 800712a:	4610      	mov	r0, r2
 800712c:	f7fd fea9 	bl	8004e82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007130:	4b0a      	ldr	r3, [pc, #40]	; (800715c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	429a      	cmp	r2, r3
 8007138:	d202      	bcs.n	8007140 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800713a:	4a08      	ldr	r2, [pc, #32]	; (800715c <prvAddCurrentTaskToDelayedList+0xa4>)
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	6013      	str	r3, [r2, #0]
}
 8007140:	bf00      	nop
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	200059b4 	.word	0x200059b4
 800714c:	200054dc 	.word	0x200054dc
 8007150:	2000599c 	.word	0x2000599c
 8007154:	2000596c 	.word	0x2000596c
 8007158:	20005968 	.word	0x20005968
 800715c:	200059d0 	.word	0x200059d0

08007160 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b08a      	sub	sp, #40	; 0x28
 8007164:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007166:	2300      	movs	r3, #0
 8007168:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800716a:	f000 fb07 	bl	800777c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800716e:	4b1c      	ldr	r3, [pc, #112]	; (80071e0 <xTimerCreateTimerTask+0x80>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d021      	beq.n	80071ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007176:	2300      	movs	r3, #0
 8007178:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800717a:	2300      	movs	r3, #0
 800717c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800717e:	1d3a      	adds	r2, r7, #4
 8007180:	f107 0108 	add.w	r1, r7, #8
 8007184:	f107 030c 	add.w	r3, r7, #12
 8007188:	4618      	mov	r0, r3
 800718a:	f7fd fe0f 	bl	8004dac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800718e:	6879      	ldr	r1, [r7, #4]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	9202      	str	r2, [sp, #8]
 8007196:	9301      	str	r3, [sp, #4]
 8007198:	2302      	movs	r3, #2
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	2300      	movs	r3, #0
 800719e:	460a      	mov	r2, r1
 80071a0:	4910      	ldr	r1, [pc, #64]	; (80071e4 <xTimerCreateTimerTask+0x84>)
 80071a2:	4811      	ldr	r0, [pc, #68]	; (80071e8 <xTimerCreateTimerTask+0x88>)
 80071a4:	f7fe ff94 	bl	80060d0 <xTaskCreateStatic>
 80071a8:	4603      	mov	r3, r0
 80071aa:	4a10      	ldr	r2, [pc, #64]	; (80071ec <xTimerCreateTimerTask+0x8c>)
 80071ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80071ae:	4b0f      	ldr	r3, [pc, #60]	; (80071ec <xTimerCreateTimerTask+0x8c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80071b6:	2301      	movs	r3, #1
 80071b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10a      	bne.n	80071d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	613b      	str	r3, [r7, #16]
}
 80071d2:	bf00      	nop
 80071d4:	e7fe      	b.n	80071d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80071d6:	697b      	ldr	r3, [r7, #20]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	20005a0c 	.word	0x20005a0c
 80071e4:	080132b8 	.word	0x080132b8
 80071e8:	08007325 	.word	0x08007325
 80071ec:	20005a10 	.word	0x20005a10

080071f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08a      	sub	sp, #40	; 0x28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
 80071fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80071fe:	2300      	movs	r3, #0
 8007200:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10a      	bne.n	800721e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	623b      	str	r3, [r7, #32]
}
 800721a:	bf00      	nop
 800721c:	e7fe      	b.n	800721c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800721e:	4b1a      	ldr	r3, [pc, #104]	; (8007288 <xTimerGenericCommand+0x98>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d02a      	beq.n	800727c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2b05      	cmp	r3, #5
 8007236:	dc18      	bgt.n	800726a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007238:	f7ff fdb4 	bl	8006da4 <xTaskGetSchedulerState>
 800723c:	4603      	mov	r3, r0
 800723e:	2b02      	cmp	r3, #2
 8007240:	d109      	bne.n	8007256 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007242:	4b11      	ldr	r3, [pc, #68]	; (8007288 <xTimerGenericCommand+0x98>)
 8007244:	6818      	ldr	r0, [r3, #0]
 8007246:	f107 0110 	add.w	r1, r7, #16
 800724a:	2300      	movs	r3, #0
 800724c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800724e:	f7fe f8d9 	bl	8005404 <xQueueGenericSend>
 8007252:	6278      	str	r0, [r7, #36]	; 0x24
 8007254:	e012      	b.n	800727c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007256:	4b0c      	ldr	r3, [pc, #48]	; (8007288 <xTimerGenericCommand+0x98>)
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	f107 0110 	add.w	r1, r7, #16
 800725e:	2300      	movs	r3, #0
 8007260:	2200      	movs	r2, #0
 8007262:	f7fe f8cf 	bl	8005404 <xQueueGenericSend>
 8007266:	6278      	str	r0, [r7, #36]	; 0x24
 8007268:	e008      	b.n	800727c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800726a:	4b07      	ldr	r3, [pc, #28]	; (8007288 <xTimerGenericCommand+0x98>)
 800726c:	6818      	ldr	r0, [r3, #0]
 800726e:	f107 0110 	add.w	r1, r7, #16
 8007272:	2300      	movs	r3, #0
 8007274:	683a      	ldr	r2, [r7, #0]
 8007276:	f7fe f9c3 	bl	8005600 <xQueueGenericSendFromISR>
 800727a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800727e:	4618      	mov	r0, r3
 8007280:	3728      	adds	r7, #40	; 0x28
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20005a0c 	.word	0x20005a0c

0800728c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b088      	sub	sp, #32
 8007290:	af02      	add	r7, sp, #8
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007296:	4b22      	ldr	r3, [pc, #136]	; (8007320 <prvProcessExpiredTimer+0x94>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	3304      	adds	r3, #4
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fd fe25 	bl	8004ef4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d022      	beq.n	80072fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	699a      	ldr	r2, [r3, #24]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	18d1      	adds	r1, r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	6978      	ldr	r0, [r7, #20]
 80072c6:	f000 f8d1 	bl	800746c <prvInsertTimerInActiveList>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d01f      	beq.n	8007310 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072d0:	2300      	movs	r3, #0
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	2300      	movs	r3, #0
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	2100      	movs	r1, #0
 80072da:	6978      	ldr	r0, [r7, #20]
 80072dc:	f7ff ff88 	bl	80071f0 <xTimerGenericCommand>
 80072e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d113      	bne.n	8007310 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80072e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	60fb      	str	r3, [r7, #12]
}
 80072fa:	bf00      	nop
 80072fc:	e7fe      	b.n	80072fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007304:	f023 0301 	bic.w	r3, r3, #1
 8007308:	b2da      	uxtb	r2, r3
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	6978      	ldr	r0, [r7, #20]
 8007316:	4798      	blx	r3
}
 8007318:	bf00      	nop
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	20005a04 	.word	0x20005a04

08007324 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800732c:	f107 0308 	add.w	r3, r7, #8
 8007330:	4618      	mov	r0, r3
 8007332:	f000 f857 	bl	80073e4 <prvGetNextExpireTime>
 8007336:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	4619      	mov	r1, r3
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 f803 	bl	8007348 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007342:	f000 f8d5 	bl	80074f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007346:	e7f1      	b.n	800732c <prvTimerTask+0x8>

08007348 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007352:	f7ff f919 	bl	8006588 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007356:	f107 0308 	add.w	r3, r7, #8
 800735a:	4618      	mov	r0, r3
 800735c:	f000 f866 	bl	800742c <prvSampleTimeNow>
 8007360:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d130      	bne.n	80073ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10a      	bne.n	8007384 <prvProcessTimerOrBlockTask+0x3c>
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	429a      	cmp	r2, r3
 8007374:	d806      	bhi.n	8007384 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007376:	f7ff f915 	bl	80065a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800737a:	68f9      	ldr	r1, [r7, #12]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7ff ff85 	bl	800728c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007382:	e024      	b.n	80073ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d008      	beq.n	800739c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800738a:	4b13      	ldr	r3, [pc, #76]	; (80073d8 <prvProcessTimerOrBlockTask+0x90>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <prvProcessTimerOrBlockTask+0x50>
 8007394:	2301      	movs	r3, #1
 8007396:	e000      	b.n	800739a <prvProcessTimerOrBlockTask+0x52>
 8007398:	2300      	movs	r3, #0
 800739a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800739c:	4b0f      	ldr	r3, [pc, #60]	; (80073dc <prvProcessTimerOrBlockTask+0x94>)
 800739e:	6818      	ldr	r0, [r3, #0]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	4619      	mov	r1, r3
 80073aa:	f7fe fe5d 	bl	8006068 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80073ae:	f7ff f8f9 	bl	80065a4 <xTaskResumeAll>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10a      	bne.n	80073ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80073b8:	4b09      	ldr	r3, [pc, #36]	; (80073e0 <prvProcessTimerOrBlockTask+0x98>)
 80073ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073be:	601a      	str	r2, [r3, #0]
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	f3bf 8f6f 	isb	sy
}
 80073c8:	e001      	b.n	80073ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80073ca:	f7ff f8eb 	bl	80065a4 <xTaskResumeAll>
}
 80073ce:	bf00      	nop
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20005a08 	.word	0x20005a08
 80073dc:	20005a0c 	.word	0x20005a0c
 80073e0:	e000ed04 	.word	0xe000ed04

080073e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80073ec:	4b0e      	ldr	r3, [pc, #56]	; (8007428 <prvGetNextExpireTime+0x44>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <prvGetNextExpireTime+0x16>
 80073f6:	2201      	movs	r2, #1
 80073f8:	e000      	b.n	80073fc <prvGetNextExpireTime+0x18>
 80073fa:	2200      	movs	r2, #0
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d105      	bne.n	8007414 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007408:	4b07      	ldr	r3, [pc, #28]	; (8007428 <prvGetNextExpireTime+0x44>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	60fb      	str	r3, [r7, #12]
 8007412:	e001      	b.n	8007418 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007418:	68fb      	ldr	r3, [r7, #12]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	20005a04 	.word	0x20005a04

0800742c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007434:	f7ff f954 	bl	80066e0 <xTaskGetTickCount>
 8007438:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800743a:	4b0b      	ldr	r3, [pc, #44]	; (8007468 <prvSampleTimeNow+0x3c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	429a      	cmp	r2, r3
 8007442:	d205      	bcs.n	8007450 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007444:	f000 f936 	bl	80076b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	e002      	b.n	8007456 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007456:	4a04      	ldr	r2, [pc, #16]	; (8007468 <prvSampleTimeNow+0x3c>)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800745c:	68fb      	ldr	r3, [r7, #12]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20005a14 	.word	0x20005a14

0800746c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800747a:	2300      	movs	r3, #0
 800747c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	429a      	cmp	r2, r3
 8007490:	d812      	bhi.n	80074b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	1ad2      	subs	r2, r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	429a      	cmp	r2, r3
 800749e:	d302      	bcc.n	80074a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80074a0:	2301      	movs	r3, #1
 80074a2:	617b      	str	r3, [r7, #20]
 80074a4:	e01b      	b.n	80074de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80074a6:	4b10      	ldr	r3, [pc, #64]	; (80074e8 <prvInsertTimerInActiveList+0x7c>)
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3304      	adds	r3, #4
 80074ae:	4619      	mov	r1, r3
 80074b0:	4610      	mov	r0, r2
 80074b2:	f7fd fce6 	bl	8004e82 <vListInsert>
 80074b6:	e012      	b.n	80074de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d206      	bcs.n	80074ce <prvInsertTimerInActiveList+0x62>
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d302      	bcc.n	80074ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80074c8:	2301      	movs	r3, #1
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	e007      	b.n	80074de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074ce:	4b07      	ldr	r3, [pc, #28]	; (80074ec <prvInsertTimerInActiveList+0x80>)
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	3304      	adds	r3, #4
 80074d6:	4619      	mov	r1, r3
 80074d8:	4610      	mov	r0, r2
 80074da:	f7fd fcd2 	bl	8004e82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80074de:	697b      	ldr	r3, [r7, #20]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	20005a08 	.word	0x20005a08
 80074ec:	20005a04 	.word	0x20005a04

080074f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08e      	sub	sp, #56	; 0x38
 80074f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074f6:	e0ca      	b.n	800768e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	da18      	bge.n	8007530 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80074fe:	1d3b      	adds	r3, r7, #4
 8007500:	3304      	adds	r3, #4
 8007502:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10a      	bne.n	8007520 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	61fb      	str	r3, [r7, #28]
}
 800751c:	bf00      	nop
 800751e:	e7fe      	b.n	800751e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007526:	6850      	ldr	r0, [r2, #4]
 8007528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800752a:	6892      	ldr	r2, [r2, #8]
 800752c:	4611      	mov	r1, r2
 800752e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	f2c0 80ab 	blt.w	800768e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800753c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d004      	beq.n	800754e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007546:	3304      	adds	r3, #4
 8007548:	4618      	mov	r0, r3
 800754a:	f7fd fcd3 	bl	8004ef4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800754e:	463b      	mov	r3, r7
 8007550:	4618      	mov	r0, r3
 8007552:	f7ff ff6b 	bl	800742c <prvSampleTimeNow>
 8007556:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b09      	cmp	r3, #9
 800755c:	f200 8096 	bhi.w	800768c <prvProcessReceivedCommands+0x19c>
 8007560:	a201      	add	r2, pc, #4	; (adr r2, 8007568 <prvProcessReceivedCommands+0x78>)
 8007562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007566:	bf00      	nop
 8007568:	08007591 	.word	0x08007591
 800756c:	08007591 	.word	0x08007591
 8007570:	08007591 	.word	0x08007591
 8007574:	08007605 	.word	0x08007605
 8007578:	08007619 	.word	0x08007619
 800757c:	08007663 	.word	0x08007663
 8007580:	08007591 	.word	0x08007591
 8007584:	08007591 	.word	0x08007591
 8007588:	08007605 	.word	0x08007605
 800758c:	08007619 	.word	0x08007619
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007596:	f043 0301 	orr.w	r3, r3, #1
 800759a:	b2da      	uxtb	r2, r3
 800759c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	18d1      	adds	r1, r2, r3
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075b0:	f7ff ff5c 	bl	800746c <prvInsertTimerInActiveList>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d069      	beq.n	800768e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075c8:	f003 0304 	and.w	r3, r3, #4
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d05e      	beq.n	800768e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	441a      	add	r2, r3
 80075d8:	2300      	movs	r3, #0
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	2300      	movs	r3, #0
 80075de:	2100      	movs	r1, #0
 80075e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075e2:	f7ff fe05 	bl	80071f0 <xTimerGenericCommand>
 80075e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d14f      	bne.n	800768e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	61bb      	str	r3, [r7, #24]
}
 8007600:	bf00      	nop
 8007602:	e7fe      	b.n	8007602 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007606:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800760a:	f023 0301 	bic.w	r3, r3, #1
 800760e:	b2da      	uxtb	r2, r3
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007616:	e03a      	b.n	800768e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800761e:	f043 0301 	orr.w	r3, r3, #1
 8007622:	b2da      	uxtb	r2, r3
 8007624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10a      	bne.n	800764e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	617b      	str	r3, [r7, #20]
}
 800764a:	bf00      	nop
 800764c:	e7fe      	b.n	800764c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800764e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007650:	699a      	ldr	r2, [r3, #24]
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	18d1      	adds	r1, r2, r3
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800765a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800765c:	f7ff ff06 	bl	800746c <prvInsertTimerInActiveList>
					break;
 8007660:	e015      	b.n	800768e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007668:	f003 0302 	and.w	r3, r3, #2
 800766c:	2b00      	cmp	r3, #0
 800766e:	d103      	bne.n	8007678 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007672:	f000 fbdd 	bl	8007e30 <vPortFree>
 8007676:	e00a      	b.n	800768e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800767e:	f023 0301 	bic.w	r3, r3, #1
 8007682:	b2da      	uxtb	r2, r3
 8007684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007686:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800768a:	e000      	b.n	800768e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800768c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800768e:	4b08      	ldr	r3, [pc, #32]	; (80076b0 <prvProcessReceivedCommands+0x1c0>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	1d39      	adds	r1, r7, #4
 8007694:	2200      	movs	r2, #0
 8007696:	4618      	mov	r0, r3
 8007698:	f7fe f8da 	bl	8005850 <xQueueReceive>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f47f af2a 	bne.w	80074f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop
 80076a8:	3730      	adds	r7, #48	; 0x30
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	20005a0c 	.word	0x20005a0c

080076b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076ba:	e048      	b.n	800774e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076bc:	4b2d      	ldr	r3, [pc, #180]	; (8007774 <prvSwitchTimerLists+0xc0>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076c6:	4b2b      	ldr	r3, [pc, #172]	; (8007774 <prvSwitchTimerLists+0xc0>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	3304      	adds	r3, #4
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fd fc0d 	bl	8004ef4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d02e      	beq.n	800774e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	4413      	add	r3, r2
 80076f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d90e      	bls.n	8007720 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800770e:	4b19      	ldr	r3, [pc, #100]	; (8007774 <prvSwitchTimerLists+0xc0>)
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	3304      	adds	r3, #4
 8007716:	4619      	mov	r1, r3
 8007718:	4610      	mov	r0, r2
 800771a:	f7fd fbb2 	bl	8004e82 <vListInsert>
 800771e:	e016      	b.n	800774e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007720:	2300      	movs	r3, #0
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	2300      	movs	r3, #0
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	2100      	movs	r1, #0
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f7ff fd60 	bl	80071f0 <xTimerGenericCommand>
 8007730:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10a      	bne.n	800774e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773c:	f383 8811 	msr	BASEPRI, r3
 8007740:	f3bf 8f6f 	isb	sy
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	603b      	str	r3, [r7, #0]
}
 800774a:	bf00      	nop
 800774c:	e7fe      	b.n	800774c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800774e:	4b09      	ldr	r3, [pc, #36]	; (8007774 <prvSwitchTimerLists+0xc0>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1b1      	bne.n	80076bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007758:	4b06      	ldr	r3, [pc, #24]	; (8007774 <prvSwitchTimerLists+0xc0>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800775e:	4b06      	ldr	r3, [pc, #24]	; (8007778 <prvSwitchTimerLists+0xc4>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a04      	ldr	r2, [pc, #16]	; (8007774 <prvSwitchTimerLists+0xc0>)
 8007764:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007766:	4a04      	ldr	r2, [pc, #16]	; (8007778 <prvSwitchTimerLists+0xc4>)
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	6013      	str	r3, [r2, #0]
}
 800776c:	bf00      	nop
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	20005a04 	.word	0x20005a04
 8007778:	20005a08 	.word	0x20005a08

0800777c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007782:	f000 f967 	bl	8007a54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007786:	4b15      	ldr	r3, [pc, #84]	; (80077dc <prvCheckForValidListAndQueue+0x60>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d120      	bne.n	80077d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800778e:	4814      	ldr	r0, [pc, #80]	; (80077e0 <prvCheckForValidListAndQueue+0x64>)
 8007790:	f7fd fb26 	bl	8004de0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007794:	4813      	ldr	r0, [pc, #76]	; (80077e4 <prvCheckForValidListAndQueue+0x68>)
 8007796:	f7fd fb23 	bl	8004de0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800779a:	4b13      	ldr	r3, [pc, #76]	; (80077e8 <prvCheckForValidListAndQueue+0x6c>)
 800779c:	4a10      	ldr	r2, [pc, #64]	; (80077e0 <prvCheckForValidListAndQueue+0x64>)
 800779e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80077a0:	4b12      	ldr	r3, [pc, #72]	; (80077ec <prvCheckForValidListAndQueue+0x70>)
 80077a2:	4a10      	ldr	r2, [pc, #64]	; (80077e4 <prvCheckForValidListAndQueue+0x68>)
 80077a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80077a6:	2300      	movs	r3, #0
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	4b11      	ldr	r3, [pc, #68]	; (80077f0 <prvCheckForValidListAndQueue+0x74>)
 80077ac:	4a11      	ldr	r2, [pc, #68]	; (80077f4 <prvCheckForValidListAndQueue+0x78>)
 80077ae:	2110      	movs	r1, #16
 80077b0:	200a      	movs	r0, #10
 80077b2:	f7fd fc31 	bl	8005018 <xQueueGenericCreateStatic>
 80077b6:	4603      	mov	r3, r0
 80077b8:	4a08      	ldr	r2, [pc, #32]	; (80077dc <prvCheckForValidListAndQueue+0x60>)
 80077ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80077bc:	4b07      	ldr	r3, [pc, #28]	; (80077dc <prvCheckForValidListAndQueue+0x60>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d005      	beq.n	80077d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80077c4:	4b05      	ldr	r3, [pc, #20]	; (80077dc <prvCheckForValidListAndQueue+0x60>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	490b      	ldr	r1, [pc, #44]	; (80077f8 <prvCheckForValidListAndQueue+0x7c>)
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fe fbf8 	bl	8005fc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077d0:	f000 f970 	bl	8007ab4 <vPortExitCritical>
}
 80077d4:	bf00      	nop
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	20005a0c 	.word	0x20005a0c
 80077e0:	200059dc 	.word	0x200059dc
 80077e4:	200059f0 	.word	0x200059f0
 80077e8:	20005a04 	.word	0x20005a04
 80077ec:	20005a08 	.word	0x20005a08
 80077f0:	20005ab8 	.word	0x20005ab8
 80077f4:	20005a18 	.word	0x20005a18
 80077f8:	080132c0 	.word	0x080132c0

080077fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3b04      	subs	r3, #4
 800780c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007814:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3b04      	subs	r3, #4
 800781a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f023 0201 	bic.w	r2, r3, #1
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3b04      	subs	r3, #4
 800782a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800782c:	4a0c      	ldr	r2, [pc, #48]	; (8007860 <pxPortInitialiseStack+0x64>)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	3b14      	subs	r3, #20
 8007836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3b04      	subs	r3, #4
 8007842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f06f 0202 	mvn.w	r2, #2
 800784a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	3b20      	subs	r3, #32
 8007850:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007852:	68fb      	ldr	r3, [r7, #12]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	08007865 	.word	0x08007865

08007864 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800786a:	2300      	movs	r3, #0
 800786c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800786e:	4b12      	ldr	r3, [pc, #72]	; (80078b8 <prvTaskExitError+0x54>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007876:	d00a      	beq.n	800788e <prvTaskExitError+0x2a>
	__asm volatile
 8007878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787c:	f383 8811 	msr	BASEPRI, r3
 8007880:	f3bf 8f6f 	isb	sy
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	60fb      	str	r3, [r7, #12]
}
 800788a:	bf00      	nop
 800788c:	e7fe      	b.n	800788c <prvTaskExitError+0x28>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	60bb      	str	r3, [r7, #8]
}
 80078a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078a2:	bf00      	nop
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d0fc      	beq.n	80078a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078aa:	bf00      	nop
 80078ac:	bf00      	nop
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	20000020 	.word	0x20000020
 80078bc:	00000000 	.word	0x00000000

080078c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80078c0:	4b07      	ldr	r3, [pc, #28]	; (80078e0 <pxCurrentTCBConst2>)
 80078c2:	6819      	ldr	r1, [r3, #0]
 80078c4:	6808      	ldr	r0, [r1, #0]
 80078c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ca:	f380 8809 	msr	PSP, r0
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f04f 0000 	mov.w	r0, #0
 80078d6:	f380 8811 	msr	BASEPRI, r0
 80078da:	4770      	bx	lr
 80078dc:	f3af 8000 	nop.w

080078e0 <pxCurrentTCBConst2>:
 80078e0:	200054dc 	.word	0x200054dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop

080078e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80078e8:	4808      	ldr	r0, [pc, #32]	; (800790c <prvPortStartFirstTask+0x24>)
 80078ea:	6800      	ldr	r0, [r0, #0]
 80078ec:	6800      	ldr	r0, [r0, #0]
 80078ee:	f380 8808 	msr	MSP, r0
 80078f2:	f04f 0000 	mov.w	r0, #0
 80078f6:	f380 8814 	msr	CONTROL, r0
 80078fa:	b662      	cpsie	i
 80078fc:	b661      	cpsie	f
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	df00      	svc	0
 8007908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800790a:	bf00      	nop
 800790c:	e000ed08 	.word	0xe000ed08

08007910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007916:	4b46      	ldr	r3, [pc, #280]	; (8007a30 <xPortStartScheduler+0x120>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a46      	ldr	r2, [pc, #280]	; (8007a34 <xPortStartScheduler+0x124>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d10a      	bne.n	8007936 <xPortStartScheduler+0x26>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	613b      	str	r3, [r7, #16]
}
 8007932:	bf00      	nop
 8007934:	e7fe      	b.n	8007934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007936:	4b3e      	ldr	r3, [pc, #248]	; (8007a30 <xPortStartScheduler+0x120>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a3f      	ldr	r2, [pc, #252]	; (8007a38 <xPortStartScheduler+0x128>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d10a      	bne.n	8007956 <xPortStartScheduler+0x46>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	60fb      	str	r3, [r7, #12]
}
 8007952:	bf00      	nop
 8007954:	e7fe      	b.n	8007954 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007956:	4b39      	ldr	r3, [pc, #228]	; (8007a3c <xPortStartScheduler+0x12c>)
 8007958:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	b2db      	uxtb	r3, r3
 8007960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	22ff      	movs	r2, #255	; 0xff
 8007966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	b2db      	uxtb	r3, r3
 800796e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007970:	78fb      	ldrb	r3, [r7, #3]
 8007972:	b2db      	uxtb	r3, r3
 8007974:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007978:	b2da      	uxtb	r2, r3
 800797a:	4b31      	ldr	r3, [pc, #196]	; (8007a40 <xPortStartScheduler+0x130>)
 800797c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800797e:	4b31      	ldr	r3, [pc, #196]	; (8007a44 <xPortStartScheduler+0x134>)
 8007980:	2207      	movs	r2, #7
 8007982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007984:	e009      	b.n	800799a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007986:	4b2f      	ldr	r3, [pc, #188]	; (8007a44 <xPortStartScheduler+0x134>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3b01      	subs	r3, #1
 800798c:	4a2d      	ldr	r2, [pc, #180]	; (8007a44 <xPortStartScheduler+0x134>)
 800798e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007990:	78fb      	ldrb	r3, [r7, #3]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	b2db      	uxtb	r3, r3
 8007998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800799a:	78fb      	ldrb	r3, [r7, #3]
 800799c:	b2db      	uxtb	r3, r3
 800799e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079a2:	2b80      	cmp	r3, #128	; 0x80
 80079a4:	d0ef      	beq.n	8007986 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079a6:	4b27      	ldr	r3, [pc, #156]	; (8007a44 <xPortStartScheduler+0x134>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f1c3 0307 	rsb	r3, r3, #7
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	d00a      	beq.n	80079c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	60bb      	str	r3, [r7, #8]
}
 80079c4:	bf00      	nop
 80079c6:	e7fe      	b.n	80079c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80079c8:	4b1e      	ldr	r3, [pc, #120]	; (8007a44 <xPortStartScheduler+0x134>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	021b      	lsls	r3, r3, #8
 80079ce:	4a1d      	ldr	r2, [pc, #116]	; (8007a44 <xPortStartScheduler+0x134>)
 80079d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079d2:	4b1c      	ldr	r3, [pc, #112]	; (8007a44 <xPortStartScheduler+0x134>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079da:	4a1a      	ldr	r2, [pc, #104]	; (8007a44 <xPortStartScheduler+0x134>)
 80079dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	b2da      	uxtb	r2, r3
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079e6:	4b18      	ldr	r3, [pc, #96]	; (8007a48 <xPortStartScheduler+0x138>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a17      	ldr	r2, [pc, #92]	; (8007a48 <xPortStartScheduler+0x138>)
 80079ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079f2:	4b15      	ldr	r3, [pc, #84]	; (8007a48 <xPortStartScheduler+0x138>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a14      	ldr	r2, [pc, #80]	; (8007a48 <xPortStartScheduler+0x138>)
 80079f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80079fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079fe:	f000 f8dd 	bl	8007bbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a02:	4b12      	ldr	r3, [pc, #72]	; (8007a4c <xPortStartScheduler+0x13c>)
 8007a04:	2200      	movs	r2, #0
 8007a06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a08:	f000 f8fc 	bl	8007c04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a0c:	4b10      	ldr	r3, [pc, #64]	; (8007a50 <xPortStartScheduler+0x140>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a0f      	ldr	r2, [pc, #60]	; (8007a50 <xPortStartScheduler+0x140>)
 8007a12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a18:	f7ff ff66 	bl	80078e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a1c:	f7fe ff3c 	bl	8006898 <vTaskSwitchContext>
	prvTaskExitError();
 8007a20:	f7ff ff20 	bl	8007864 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3718      	adds	r7, #24
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	e000ed00 	.word	0xe000ed00
 8007a34:	410fc271 	.word	0x410fc271
 8007a38:	410fc270 	.word	0x410fc270
 8007a3c:	e000e400 	.word	0xe000e400
 8007a40:	20005b08 	.word	0x20005b08
 8007a44:	20005b0c 	.word	0x20005b0c
 8007a48:	e000ed20 	.word	0xe000ed20
 8007a4c:	20000020 	.word	0x20000020
 8007a50:	e000ef34 	.word	0xe000ef34

08007a54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	607b      	str	r3, [r7, #4]
}
 8007a6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a6e:	4b0f      	ldr	r3, [pc, #60]	; (8007aac <vPortEnterCritical+0x58>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	3301      	adds	r3, #1
 8007a74:	4a0d      	ldr	r2, [pc, #52]	; (8007aac <vPortEnterCritical+0x58>)
 8007a76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a78:	4b0c      	ldr	r3, [pc, #48]	; (8007aac <vPortEnterCritical+0x58>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d10f      	bne.n	8007aa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a80:	4b0b      	ldr	r3, [pc, #44]	; (8007ab0 <vPortEnterCritical+0x5c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	603b      	str	r3, [r7, #0]
}
 8007a9c:	bf00      	nop
 8007a9e:	e7fe      	b.n	8007a9e <vPortEnterCritical+0x4a>
	}
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	20000020 	.word	0x20000020
 8007ab0:	e000ed04 	.word	0xe000ed04

08007ab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007aba:	4b12      	ldr	r3, [pc, #72]	; (8007b04 <vPortExitCritical+0x50>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10a      	bne.n	8007ad8 <vPortExitCritical+0x24>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	607b      	str	r3, [r7, #4]
}
 8007ad4:	bf00      	nop
 8007ad6:	e7fe      	b.n	8007ad6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ad8:	4b0a      	ldr	r3, [pc, #40]	; (8007b04 <vPortExitCritical+0x50>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	3b01      	subs	r3, #1
 8007ade:	4a09      	ldr	r2, [pc, #36]	; (8007b04 <vPortExitCritical+0x50>)
 8007ae0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ae2:	4b08      	ldr	r3, [pc, #32]	; (8007b04 <vPortExitCritical+0x50>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d105      	bne.n	8007af6 <vPortExitCritical+0x42>
 8007aea:	2300      	movs	r3, #0
 8007aec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	f383 8811 	msr	BASEPRI, r3
}
 8007af4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007af6:	bf00      	nop
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20000020 	.word	0x20000020
	...

08007b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b10:	f3ef 8009 	mrs	r0, PSP
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	4b15      	ldr	r3, [pc, #84]	; (8007b70 <pxCurrentTCBConst>)
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	f01e 0f10 	tst.w	lr, #16
 8007b20:	bf08      	it	eq
 8007b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2a:	6010      	str	r0, [r2, #0]
 8007b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b34:	f380 8811 	msr	BASEPRI, r0
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f7fe feaa 	bl	8006898 <vTaskSwitchContext>
 8007b44:	f04f 0000 	mov.w	r0, #0
 8007b48:	f380 8811 	msr	BASEPRI, r0
 8007b4c:	bc09      	pop	{r0, r3}
 8007b4e:	6819      	ldr	r1, [r3, #0]
 8007b50:	6808      	ldr	r0, [r1, #0]
 8007b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b56:	f01e 0f10 	tst.w	lr, #16
 8007b5a:	bf08      	it	eq
 8007b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b60:	f380 8809 	msr	PSP, r0
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	f3af 8000 	nop.w

08007b70 <pxCurrentTCBConst>:
 8007b70:	200054dc 	.word	0x200054dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop

08007b78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	607b      	str	r3, [r7, #4]
}
 8007b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b92:	f7fe fdc7 	bl	8006724 <xTaskIncrementTick>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d003      	beq.n	8007ba4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b9c:	4b06      	ldr	r3, [pc, #24]	; (8007bb8 <xPortSysTickHandler+0x40>)
 8007b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	f383 8811 	msr	BASEPRI, r3
}
 8007bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007bb0:	bf00      	nop
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	e000ed04 	.word	0xe000ed04

08007bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007bc0:	4b0b      	ldr	r3, [pc, #44]	; (8007bf0 <vPortSetupTimerInterrupt+0x34>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007bc6:	4b0b      	ldr	r3, [pc, #44]	; (8007bf4 <vPortSetupTimerInterrupt+0x38>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007bcc:	4b0a      	ldr	r3, [pc, #40]	; (8007bf8 <vPortSetupTimerInterrupt+0x3c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a0a      	ldr	r2, [pc, #40]	; (8007bfc <vPortSetupTimerInterrupt+0x40>)
 8007bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd6:	099b      	lsrs	r3, r3, #6
 8007bd8:	4a09      	ldr	r2, [pc, #36]	; (8007c00 <vPortSetupTimerInterrupt+0x44>)
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bde:	4b04      	ldr	r3, [pc, #16]	; (8007bf0 <vPortSetupTimerInterrupt+0x34>)
 8007be0:	2207      	movs	r2, #7
 8007be2:	601a      	str	r2, [r3, #0]
}
 8007be4:	bf00      	nop
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	e000e010 	.word	0xe000e010
 8007bf4:	e000e018 	.word	0xe000e018
 8007bf8:	20000000 	.word	0x20000000
 8007bfc:	10624dd3 	.word	0x10624dd3
 8007c00:	e000e014 	.word	0xe000e014

08007c04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c14 <vPortEnableVFP+0x10>
 8007c08:	6801      	ldr	r1, [r0, #0]
 8007c0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c0e:	6001      	str	r1, [r0, #0]
 8007c10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c12:	bf00      	nop
 8007c14:	e000ed88 	.word	0xe000ed88

08007c18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007c1e:	f3ef 8305 	mrs	r3, IPSR
 8007c22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b0f      	cmp	r3, #15
 8007c28:	d914      	bls.n	8007c54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007c2a:	4a17      	ldr	r2, [pc, #92]	; (8007c88 <vPortValidateInterruptPriority+0x70>)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4413      	add	r3, r2
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c34:	4b15      	ldr	r3, [pc, #84]	; (8007c8c <vPortValidateInterruptPriority+0x74>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	7afa      	ldrb	r2, [r7, #11]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d20a      	bcs.n	8007c54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	607b      	str	r3, [r7, #4]
}
 8007c50:	bf00      	nop
 8007c52:	e7fe      	b.n	8007c52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c54:	4b0e      	ldr	r3, [pc, #56]	; (8007c90 <vPortValidateInterruptPriority+0x78>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c5c:	4b0d      	ldr	r3, [pc, #52]	; (8007c94 <vPortValidateInterruptPriority+0x7c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d90a      	bls.n	8007c7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c68:	f383 8811 	msr	BASEPRI, r3
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	603b      	str	r3, [r7, #0]
}
 8007c76:	bf00      	nop
 8007c78:	e7fe      	b.n	8007c78 <vPortValidateInterruptPriority+0x60>
	}
 8007c7a:	bf00      	nop
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	e000e3f0 	.word	0xe000e3f0
 8007c8c:	20005b08 	.word	0x20005b08
 8007c90:	e000ed0c 	.word	0xe000ed0c
 8007c94:	20005b0c 	.word	0x20005b0c

08007c98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b08a      	sub	sp, #40	; 0x28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ca4:	f7fe fc70 	bl	8006588 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ca8:	4b5b      	ldr	r3, [pc, #364]	; (8007e18 <pvPortMalloc+0x180>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d101      	bne.n	8007cb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007cb0:	f000 f920 	bl	8007ef4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007cb4:	4b59      	ldr	r3, [pc, #356]	; (8007e1c <pvPortMalloc+0x184>)
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f040 8093 	bne.w	8007de8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d01d      	beq.n	8007d04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007cc8:	2208      	movs	r2, #8
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4413      	add	r3, r2
 8007cce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d014      	beq.n	8007d04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f023 0307 	bic.w	r3, r3, #7
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f003 0307 	and.w	r3, r3, #7
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00a      	beq.n	8007d04 <pvPortMalloc+0x6c>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	617b      	str	r3, [r7, #20]
}
 8007d00:	bf00      	nop
 8007d02:	e7fe      	b.n	8007d02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d06e      	beq.n	8007de8 <pvPortMalloc+0x150>
 8007d0a:	4b45      	ldr	r3, [pc, #276]	; (8007e20 <pvPortMalloc+0x188>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d869      	bhi.n	8007de8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d14:	4b43      	ldr	r3, [pc, #268]	; (8007e24 <pvPortMalloc+0x18c>)
 8007d16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d18:	4b42      	ldr	r3, [pc, #264]	; (8007e24 <pvPortMalloc+0x18c>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d1e:	e004      	b.n	8007d2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d903      	bls.n	8007d3c <pvPortMalloc+0xa4>
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1f1      	bne.n	8007d20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d3c:	4b36      	ldr	r3, [pc, #216]	; (8007e18 <pvPortMalloc+0x180>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d050      	beq.n	8007de8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2208      	movs	r2, #8
 8007d4c:	4413      	add	r3, r2
 8007d4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	6a3b      	ldr	r3, [r7, #32]
 8007d56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	1ad2      	subs	r2, r2, r3
 8007d60:	2308      	movs	r3, #8
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d91f      	bls.n	8007da8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	f003 0307 	and.w	r3, r3, #7
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00a      	beq.n	8007d90 <pvPortMalloc+0xf8>
	__asm volatile
 8007d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	613b      	str	r3, [r7, #16]
}
 8007d8c:	bf00      	nop
 8007d8e:	e7fe      	b.n	8007d8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	685a      	ldr	r2, [r3, #4]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	1ad2      	subs	r2, r2, r3
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007da2:	69b8      	ldr	r0, [r7, #24]
 8007da4:	f000 f908 	bl	8007fb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007da8:	4b1d      	ldr	r3, [pc, #116]	; (8007e20 <pvPortMalloc+0x188>)
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	4a1b      	ldr	r2, [pc, #108]	; (8007e20 <pvPortMalloc+0x188>)
 8007db4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007db6:	4b1a      	ldr	r3, [pc, #104]	; (8007e20 <pvPortMalloc+0x188>)
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	4b1b      	ldr	r3, [pc, #108]	; (8007e28 <pvPortMalloc+0x190>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d203      	bcs.n	8007dca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007dc2:	4b17      	ldr	r3, [pc, #92]	; (8007e20 <pvPortMalloc+0x188>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a18      	ldr	r2, [pc, #96]	; (8007e28 <pvPortMalloc+0x190>)
 8007dc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	4b13      	ldr	r3, [pc, #76]	; (8007e1c <pvPortMalloc+0x184>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	2200      	movs	r2, #0
 8007ddc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007dde:	4b13      	ldr	r3, [pc, #76]	; (8007e2c <pvPortMalloc+0x194>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3301      	adds	r3, #1
 8007de4:	4a11      	ldr	r2, [pc, #68]	; (8007e2c <pvPortMalloc+0x194>)
 8007de6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007de8:	f7fe fbdc 	bl	80065a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	f003 0307 	and.w	r3, r3, #7
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00a      	beq.n	8007e0c <pvPortMalloc+0x174>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	60fb      	str	r3, [r7, #12]
}
 8007e08:	bf00      	nop
 8007e0a:	e7fe      	b.n	8007e0a <pvPortMalloc+0x172>
	return pvReturn;
 8007e0c:	69fb      	ldr	r3, [r7, #28]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3728      	adds	r7, #40	; 0x28
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	20009718 	.word	0x20009718
 8007e1c:	2000972c 	.word	0x2000972c
 8007e20:	2000971c 	.word	0x2000971c
 8007e24:	20009710 	.word	0x20009710
 8007e28:	20009720 	.word	0x20009720
 8007e2c:	20009724 	.word	0x20009724

08007e30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d04d      	beq.n	8007ede <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e42:	2308      	movs	r3, #8
 8007e44:	425b      	negs	r3, r3
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	4413      	add	r3, r2
 8007e4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	4b24      	ldr	r3, [pc, #144]	; (8007ee8 <vPortFree+0xb8>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4013      	ands	r3, r2
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10a      	bne.n	8007e74 <vPortFree+0x44>
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	60fb      	str	r3, [r7, #12]
}
 8007e70:	bf00      	nop
 8007e72:	e7fe      	b.n	8007e72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00a      	beq.n	8007e92 <vPortFree+0x62>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	60bb      	str	r3, [r7, #8]
}
 8007e8e:	bf00      	nop
 8007e90:	e7fe      	b.n	8007e90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	4b14      	ldr	r3, [pc, #80]	; (8007ee8 <vPortFree+0xb8>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d01e      	beq.n	8007ede <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d11a      	bne.n	8007ede <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	4b0e      	ldr	r3, [pc, #56]	; (8007ee8 <vPortFree+0xb8>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	43db      	mvns	r3, r3
 8007eb2:	401a      	ands	r2, r3
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007eb8:	f7fe fb66 	bl	8006588 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	4b0a      	ldr	r3, [pc, #40]	; (8007eec <vPortFree+0xbc>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	4a09      	ldr	r2, [pc, #36]	; (8007eec <vPortFree+0xbc>)
 8007ec8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007eca:	6938      	ldr	r0, [r7, #16]
 8007ecc:	f000 f874 	bl	8007fb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ed0:	4b07      	ldr	r3, [pc, #28]	; (8007ef0 <vPortFree+0xc0>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	4a06      	ldr	r2, [pc, #24]	; (8007ef0 <vPortFree+0xc0>)
 8007ed8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007eda:	f7fe fb63 	bl	80065a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ede:	bf00      	nop
 8007ee0:	3718      	adds	r7, #24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	2000972c 	.word	0x2000972c
 8007eec:	2000971c 	.word	0x2000971c
 8007ef0:	20009728 	.word	0x20009728

08007ef4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007efa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007efe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f00:	4b27      	ldr	r3, [pc, #156]	; (8007fa0 <prvHeapInit+0xac>)
 8007f02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f003 0307 	and.w	r3, r3, #7
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00c      	beq.n	8007f28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3307      	adds	r3, #7
 8007f12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f023 0307 	bic.w	r3, r3, #7
 8007f1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	4a1f      	ldr	r2, [pc, #124]	; (8007fa0 <prvHeapInit+0xac>)
 8007f24:	4413      	add	r3, r2
 8007f26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f2c:	4a1d      	ldr	r2, [pc, #116]	; (8007fa4 <prvHeapInit+0xb0>)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f32:	4b1c      	ldr	r3, [pc, #112]	; (8007fa4 <prvHeapInit+0xb0>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f40:	2208      	movs	r2, #8
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	1a9b      	subs	r3, r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f023 0307 	bic.w	r3, r3, #7
 8007f4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4a15      	ldr	r2, [pc, #84]	; (8007fa8 <prvHeapInit+0xb4>)
 8007f54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f56:	4b14      	ldr	r3, [pc, #80]	; (8007fa8 <prvHeapInit+0xb4>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f5e:	4b12      	ldr	r3, [pc, #72]	; (8007fa8 <prvHeapInit+0xb4>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2200      	movs	r2, #0
 8007f64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	1ad2      	subs	r2, r2, r3
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f74:	4b0c      	ldr	r3, [pc, #48]	; (8007fa8 <prvHeapInit+0xb4>)
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	4a0a      	ldr	r2, [pc, #40]	; (8007fac <prvHeapInit+0xb8>)
 8007f82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	4a09      	ldr	r2, [pc, #36]	; (8007fb0 <prvHeapInit+0xbc>)
 8007f8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f8c:	4b09      	ldr	r3, [pc, #36]	; (8007fb4 <prvHeapInit+0xc0>)
 8007f8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f92:	601a      	str	r2, [r3, #0]
}
 8007f94:	bf00      	nop
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	20005b10 	.word	0x20005b10
 8007fa4:	20009710 	.word	0x20009710
 8007fa8:	20009718 	.word	0x20009718
 8007fac:	20009720 	.word	0x20009720
 8007fb0:	2000971c 	.word	0x2000971c
 8007fb4:	2000972c 	.word	0x2000972c

08007fb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007fc0:	4b28      	ldr	r3, [pc, #160]	; (8008064 <prvInsertBlockIntoFreeList+0xac>)
 8007fc2:	60fb      	str	r3, [r7, #12]
 8007fc4:	e002      	b.n	8007fcc <prvInsertBlockIntoFreeList+0x14>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	60fb      	str	r3, [r7, #12]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d8f7      	bhi.n	8007fc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d108      	bne.n	8007ffa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	441a      	add	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	441a      	add	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d118      	bne.n	8008040 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	4b15      	ldr	r3, [pc, #84]	; (8008068 <prvInsertBlockIntoFreeList+0xb0>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	429a      	cmp	r2, r3
 8008018:	d00d      	beq.n	8008036 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	441a      	add	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	e008      	b.n	8008048 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008036:	4b0c      	ldr	r3, [pc, #48]	; (8008068 <prvInsertBlockIntoFreeList+0xb0>)
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	e003      	b.n	8008048 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	429a      	cmp	r2, r3
 800804e:	d002      	beq.n	8008056 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008056:	bf00      	nop
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	20009710 	.word	0x20009710
 8008068:	20009718 	.word	0x20009718

0800806c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8008076:	f007 fac5 	bl	800f604 <sys_timeouts_sleeptime>
 800807a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008082:	d10b      	bne.n	800809c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8008084:	4813      	ldr	r0, [pc, #76]	; (80080d4 <tcpip_timeouts_mbox_fetch+0x68>)
 8008086:	f00a f81c 	bl	80120c2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800808a:	2200      	movs	r2, #0
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f009 ffa4 	bl	8011fdc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008094:	480f      	ldr	r0, [pc, #60]	; (80080d4 <tcpip_timeouts_mbox_fetch+0x68>)
 8008096:	f00a f805 	bl	80120a4 <sys_mutex_lock>
    return;
 800809a:	e018      	b.n	80080ce <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d102      	bne.n	80080a8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80080a2:	f007 fa75 	bl	800f590 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80080a6:	e7e6      	b.n	8008076 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80080a8:	480a      	ldr	r0, [pc, #40]	; (80080d4 <tcpip_timeouts_mbox_fetch+0x68>)
 80080aa:	f00a f80a 	bl	80120c2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f009 ff92 	bl	8011fdc <sys_arch_mbox_fetch>
 80080b8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80080ba:	4806      	ldr	r0, [pc, #24]	; (80080d4 <tcpip_timeouts_mbox_fetch+0x68>)
 80080bc:	f009 fff2 	bl	80120a4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c6:	d102      	bne.n	80080ce <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80080c8:	f007 fa62 	bl	800f590 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80080cc:	e7d3      	b.n	8008076 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	2000973c 	.word	0x2000973c

080080d8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80080e0:	4810      	ldr	r0, [pc, #64]	; (8008124 <tcpip_thread+0x4c>)
 80080e2:	f009 ffdf 	bl	80120a4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80080e6:	4b10      	ldr	r3, [pc, #64]	; (8008128 <tcpip_thread+0x50>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d005      	beq.n	80080fa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80080ee:	4b0e      	ldr	r3, [pc, #56]	; (8008128 <tcpip_thread+0x50>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a0e      	ldr	r2, [pc, #56]	; (800812c <tcpip_thread+0x54>)
 80080f4:	6812      	ldr	r2, [r2, #0]
 80080f6:	4610      	mov	r0, r2
 80080f8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80080fa:	f107 030c 	add.w	r3, r7, #12
 80080fe:	4619      	mov	r1, r3
 8008100:	480b      	ldr	r0, [pc, #44]	; (8008130 <tcpip_thread+0x58>)
 8008102:	f7ff ffb3 	bl	800806c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d106      	bne.n	800811a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800810c:	4b09      	ldr	r3, [pc, #36]	; (8008134 <tcpip_thread+0x5c>)
 800810e:	2291      	movs	r2, #145	; 0x91
 8008110:	4909      	ldr	r1, [pc, #36]	; (8008138 <tcpip_thread+0x60>)
 8008112:	480a      	ldr	r0, [pc, #40]	; (800813c <tcpip_thread+0x64>)
 8008114:	f00a f920 	bl	8012358 <iprintf>
      continue;
 8008118:	e003      	b.n	8008122 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	4618      	mov	r0, r3
 800811e:	f000 f80f 	bl	8008140 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008122:	e7ea      	b.n	80080fa <tcpip_thread+0x22>
 8008124:	2000973c 	.word	0x2000973c
 8008128:	20009730 	.word	0x20009730
 800812c:	20009734 	.word	0x20009734
 8008130:	20009738 	.word	0x20009738
 8008134:	080132c8 	.word	0x080132c8
 8008138:	080132f8 	.word	0x080132f8
 800813c:	08013318 	.word	0x08013318

08008140 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2b02      	cmp	r3, #2
 800814e:	d026      	beq.n	800819e <tcpip_thread_handle_msg+0x5e>
 8008150:	2b02      	cmp	r3, #2
 8008152:	dc2b      	bgt.n	80081ac <tcpip_thread_handle_msg+0x6c>
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <tcpip_thread_handle_msg+0x1e>
 8008158:	2b01      	cmp	r3, #1
 800815a:	d015      	beq.n	8008188 <tcpip_thread_handle_msg+0x48>
 800815c:	e026      	b.n	80081ac <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	6850      	ldr	r0, [r2, #4]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	6892      	ldr	r2, [r2, #8]
 800816a:	4611      	mov	r1, r2
 800816c:	4798      	blx	r3
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d004      	beq.n	800817e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	4618      	mov	r0, r3
 800817a:	f001 fd0b 	bl	8009b94 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800817e:	6879      	ldr	r1, [r7, #4]
 8008180:	2009      	movs	r0, #9
 8008182:	f000 fe63 	bl	8008e4c <memp_free>
      break;
 8008186:	e018      	b.n	80081ba <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	6892      	ldr	r2, [r2, #8]
 8008190:	4610      	mov	r0, r2
 8008192:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008194:	6879      	ldr	r1, [r7, #4]
 8008196:	2008      	movs	r0, #8
 8008198:	f000 fe58 	bl	8008e4c <memp_free>
      break;
 800819c:	e00d      	b.n	80081ba <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	6892      	ldr	r2, [r2, #8]
 80081a6:	4610      	mov	r0, r2
 80081a8:	4798      	blx	r3
      break;
 80081aa:	e006      	b.n	80081ba <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80081ac:	4b05      	ldr	r3, [pc, #20]	; (80081c4 <tcpip_thread_handle_msg+0x84>)
 80081ae:	22cf      	movs	r2, #207	; 0xcf
 80081b0:	4905      	ldr	r1, [pc, #20]	; (80081c8 <tcpip_thread_handle_msg+0x88>)
 80081b2:	4806      	ldr	r0, [pc, #24]	; (80081cc <tcpip_thread_handle_msg+0x8c>)
 80081b4:	f00a f8d0 	bl	8012358 <iprintf>
      break;
 80081b8:	bf00      	nop
  }
}
 80081ba:	bf00      	nop
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	080132c8 	.word	0x080132c8
 80081c8:	080132f8 	.word	0x080132f8
 80081cc:	08013318 	.word	0x08013318

080081d0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80081dc:	481a      	ldr	r0, [pc, #104]	; (8008248 <tcpip_inpkt+0x78>)
 80081de:	f009 ff2e 	bl	801203e <sys_mbox_valid>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d105      	bne.n	80081f4 <tcpip_inpkt+0x24>
 80081e8:	4b18      	ldr	r3, [pc, #96]	; (800824c <tcpip_inpkt+0x7c>)
 80081ea:	22fc      	movs	r2, #252	; 0xfc
 80081ec:	4918      	ldr	r1, [pc, #96]	; (8008250 <tcpip_inpkt+0x80>)
 80081ee:	4819      	ldr	r0, [pc, #100]	; (8008254 <tcpip_inpkt+0x84>)
 80081f0:	f00a f8b2 	bl	8012358 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80081f4:	2009      	movs	r0, #9
 80081f6:	f000 fdb3 	bl	8008d60 <memp_malloc>
 80081fa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d102      	bne.n	8008208 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008202:	f04f 33ff 	mov.w	r3, #4294967295
 8008206:	e01a      	b.n	800823e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	2200      	movs	r2, #0
 800820c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008220:	6979      	ldr	r1, [r7, #20]
 8008222:	4809      	ldr	r0, [pc, #36]	; (8008248 <tcpip_inpkt+0x78>)
 8008224:	f009 fec0 	bl	8011fa8 <sys_mbox_trypost>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d006      	beq.n	800823c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800822e:	6979      	ldr	r1, [r7, #20]
 8008230:	2009      	movs	r0, #9
 8008232:	f000 fe0b 	bl	8008e4c <memp_free>
    return ERR_MEM;
 8008236:	f04f 33ff 	mov.w	r3, #4294967295
 800823a:	e000      	b.n	800823e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800823c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800823e:	4618      	mov	r0, r3
 8008240:	3718      	adds	r7, #24
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	20009738 	.word	0x20009738
 800824c:	080132c8 	.word	0x080132c8
 8008250:	08013340 	.word	0x08013340
 8008254:	08013318 	.word	0x08013318

08008258 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008268:	f003 0318 	and.w	r3, r3, #24
 800826c:	2b00      	cmp	r3, #0
 800826e:	d006      	beq.n	800827e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008270:	4a08      	ldr	r2, [pc, #32]	; (8008294 <tcpip_input+0x3c>)
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f7ff ffab 	bl	80081d0 <tcpip_inpkt>
 800827a:	4603      	mov	r3, r0
 800827c:	e005      	b.n	800828a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800827e:	4a06      	ldr	r2, [pc, #24]	; (8008298 <tcpip_input+0x40>)
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7ff ffa4 	bl	80081d0 <tcpip_inpkt>
 8008288:	4603      	mov	r3, r0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	08011dc9 	.word	0x08011dc9
 8008298:	08010cd1 	.word	0x08010cd1

0800829c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80082a6:	4819      	ldr	r0, [pc, #100]	; (800830c <tcpip_try_callback+0x70>)
 80082a8:	f009 fec9 	bl	801203e <sys_mbox_valid>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d106      	bne.n	80082c0 <tcpip_try_callback+0x24>
 80082b2:	4b17      	ldr	r3, [pc, #92]	; (8008310 <tcpip_try_callback+0x74>)
 80082b4:	f240 125d 	movw	r2, #349	; 0x15d
 80082b8:	4916      	ldr	r1, [pc, #88]	; (8008314 <tcpip_try_callback+0x78>)
 80082ba:	4817      	ldr	r0, [pc, #92]	; (8008318 <tcpip_try_callback+0x7c>)
 80082bc:	f00a f84c 	bl	8012358 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80082c0:	2008      	movs	r0, #8
 80082c2:	f000 fd4d 	bl	8008d60 <memp_malloc>
 80082c6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d102      	bne.n	80082d4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80082ce:	f04f 33ff 	mov.w	r3, #4294967295
 80082d2:	e017      	b.n	8008304 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2201      	movs	r2, #1
 80082d8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80082e6:	68f9      	ldr	r1, [r7, #12]
 80082e8:	4808      	ldr	r0, [pc, #32]	; (800830c <tcpip_try_callback+0x70>)
 80082ea:	f009 fe5d 	bl	8011fa8 <sys_mbox_trypost>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d006      	beq.n	8008302 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80082f4:	68f9      	ldr	r1, [r7, #12]
 80082f6:	2008      	movs	r0, #8
 80082f8:	f000 fda8 	bl	8008e4c <memp_free>
    return ERR_MEM;
 80082fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008300:	e000      	b.n	8008304 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	20009738 	.word	0x20009738
 8008310:	080132c8 	.word	0x080132c8
 8008314:	08013340 	.word	0x08013340
 8008318:	08013318 	.word	0x08013318

0800831c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af02      	add	r7, sp, #8
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008326:	f000 f871 	bl	800840c <lwip_init>

  tcpip_init_done = initfunc;
 800832a:	4a17      	ldr	r2, [pc, #92]	; (8008388 <tcpip_init+0x6c>)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008330:	4a16      	ldr	r2, [pc, #88]	; (800838c <tcpip_init+0x70>)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008336:	2106      	movs	r1, #6
 8008338:	4815      	ldr	r0, [pc, #84]	; (8008390 <tcpip_init+0x74>)
 800833a:	f009 fe1b 	bl	8011f74 <sys_mbox_new>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d006      	beq.n	8008352 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008344:	4b13      	ldr	r3, [pc, #76]	; (8008394 <tcpip_init+0x78>)
 8008346:	f240 2261 	movw	r2, #609	; 0x261
 800834a:	4913      	ldr	r1, [pc, #76]	; (8008398 <tcpip_init+0x7c>)
 800834c:	4813      	ldr	r0, [pc, #76]	; (800839c <tcpip_init+0x80>)
 800834e:	f00a f803 	bl	8012358 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008352:	4813      	ldr	r0, [pc, #76]	; (80083a0 <tcpip_init+0x84>)
 8008354:	f009 fe90 	bl	8012078 <sys_mutex_new>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d006      	beq.n	800836c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800835e:	4b0d      	ldr	r3, [pc, #52]	; (8008394 <tcpip_init+0x78>)
 8008360:	f240 2265 	movw	r2, #613	; 0x265
 8008364:	490f      	ldr	r1, [pc, #60]	; (80083a4 <tcpip_init+0x88>)
 8008366:	480d      	ldr	r0, [pc, #52]	; (800839c <tcpip_init+0x80>)
 8008368:	f009 fff6 	bl	8012358 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800836c:	2318      	movs	r3, #24
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008374:	2200      	movs	r2, #0
 8008376:	490c      	ldr	r1, [pc, #48]	; (80083a8 <tcpip_init+0x8c>)
 8008378:	480c      	ldr	r0, [pc, #48]	; (80083ac <tcpip_init+0x90>)
 800837a:	f009 feaf 	bl	80120dc <sys_thread_new>
}
 800837e:	bf00      	nop
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	20009730 	.word	0x20009730
 800838c:	20009734 	.word	0x20009734
 8008390:	20009738 	.word	0x20009738
 8008394:	080132c8 	.word	0x080132c8
 8008398:	08013350 	.word	0x08013350
 800839c:	08013318 	.word	0x08013318
 80083a0:	2000973c 	.word	0x2000973c
 80083a4:	08013374 	.word	0x08013374
 80083a8:	080080d9 	.word	0x080080d9
 80083ac:	08013398 	.word	0x08013398

080083b0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	4603      	mov	r3, r0
 80083b8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80083ba:	88fb      	ldrh	r3, [r7, #6]
 80083bc:	021b      	lsls	r3, r3, #8
 80083be:	b21a      	sxth	r2, r3
 80083c0:	88fb      	ldrh	r3, [r7, #6]
 80083c2:	0a1b      	lsrs	r3, r3, #8
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	b21b      	sxth	r3, r3
 80083c8:	4313      	orrs	r3, r2
 80083ca:	b21b      	sxth	r3, r3
 80083cc:	b29b      	uxth	r3, r3
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80083da:	b480      	push	{r7}
 80083dc:	b083      	sub	sp, #12
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	061a      	lsls	r2, r3, #24
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	021b      	lsls	r3, r3, #8
 80083ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80083ee:	431a      	orrs	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	0a1b      	lsrs	r3, r3, #8
 80083f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80083f8:	431a      	orrs	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	0e1b      	lsrs	r3, r3, #24
 80083fe:	4313      	orrs	r3, r2
}
 8008400:	4618      	mov	r0, r3
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008412:	2300      	movs	r3, #0
 8008414:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8008416:	f009 fe23 	bl	8012060 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800841a:	f000 f8d5 	bl	80085c8 <mem_init>
  memp_init();
 800841e:	f000 fc31 	bl	8008c84 <memp_init>
  pbuf_init();
  netif_init();
 8008422:	f000 fd3d 	bl	8008ea0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008426:	f007 f925 	bl	800f674 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800842a:	f001 fe4d 	bl	800a0c8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800842e:	f007 f867 	bl	800f500 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008432:	bf00      	nop
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	4603      	mov	r3, r0
 8008444:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8008446:	4b05      	ldr	r3, [pc, #20]	; (800845c <ptr_to_mem+0x20>)
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	88fb      	ldrh	r3, [r7, #6]
 800844c:	4413      	add	r3, r2
}
 800844e:	4618      	mov	r0, r3
 8008450:	370c      	adds	r7, #12
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	2000bf6c 	.word	0x2000bf6c

08008460 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008468:	4b05      	ldr	r3, [pc, #20]	; (8008480 <mem_to_ptr+0x20>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	b29b      	uxth	r3, r3
}
 8008472:	4618      	mov	r0, r3
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	2000bf6c 	.word	0x2000bf6c

08008484 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008484:	b590      	push	{r4, r7, lr}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800848c:	4b45      	ldr	r3, [pc, #276]	; (80085a4 <plug_holes+0x120>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	429a      	cmp	r2, r3
 8008494:	d206      	bcs.n	80084a4 <plug_holes+0x20>
 8008496:	4b44      	ldr	r3, [pc, #272]	; (80085a8 <plug_holes+0x124>)
 8008498:	f240 12df 	movw	r2, #479	; 0x1df
 800849c:	4943      	ldr	r1, [pc, #268]	; (80085ac <plug_holes+0x128>)
 800849e:	4844      	ldr	r0, [pc, #272]	; (80085b0 <plug_holes+0x12c>)
 80084a0:	f009 ff5a 	bl	8012358 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80084a4:	4b43      	ldr	r3, [pc, #268]	; (80085b4 <plug_holes+0x130>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d306      	bcc.n	80084bc <plug_holes+0x38>
 80084ae:	4b3e      	ldr	r3, [pc, #248]	; (80085a8 <plug_holes+0x124>)
 80084b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80084b4:	4940      	ldr	r1, [pc, #256]	; (80085b8 <plug_holes+0x134>)
 80084b6:	483e      	ldr	r0, [pc, #248]	; (80085b0 <plug_holes+0x12c>)
 80084b8:	f009 ff4e 	bl	8012358 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	791b      	ldrb	r3, [r3, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d006      	beq.n	80084d2 <plug_holes+0x4e>
 80084c4:	4b38      	ldr	r3, [pc, #224]	; (80085a8 <plug_holes+0x124>)
 80084c6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80084ca:	493c      	ldr	r1, [pc, #240]	; (80085bc <plug_holes+0x138>)
 80084cc:	4838      	ldr	r0, [pc, #224]	; (80085b0 <plug_holes+0x12c>)
 80084ce:	f009 ff43 	bl	8012358 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	881b      	ldrh	r3, [r3, #0]
 80084d6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80084da:	d906      	bls.n	80084ea <plug_holes+0x66>
 80084dc:	4b32      	ldr	r3, [pc, #200]	; (80085a8 <plug_holes+0x124>)
 80084de:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80084e2:	4937      	ldr	r1, [pc, #220]	; (80085c0 <plug_holes+0x13c>)
 80084e4:	4832      	ldr	r0, [pc, #200]	; (80085b0 <plug_holes+0x12c>)
 80084e6:	f009 ff37 	bl	8012358 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7ff ffa4 	bl	800843c <ptr_to_mem>
 80084f4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d024      	beq.n	8008548 <plug_holes+0xc4>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	791b      	ldrb	r3, [r3, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d120      	bne.n	8008548 <plug_holes+0xc4>
 8008506:	4b2b      	ldr	r3, [pc, #172]	; (80085b4 <plug_holes+0x130>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	429a      	cmp	r2, r3
 800850e:	d01b      	beq.n	8008548 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008510:	4b2c      	ldr	r3, [pc, #176]	; (80085c4 <plug_holes+0x140>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	429a      	cmp	r2, r3
 8008518:	d102      	bne.n	8008520 <plug_holes+0x9c>
      lfree = mem;
 800851a:	4a2a      	ldr	r2, [pc, #168]	; (80085c4 <plug_holes+0x140>)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	881a      	ldrh	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	881b      	ldrh	r3, [r3, #0]
 800852c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008530:	d00a      	beq.n	8008548 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	4618      	mov	r0, r3
 8008538:	f7ff ff80 	bl	800843c <ptr_to_mem>
 800853c:	4604      	mov	r4, r0
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7ff ff8e 	bl	8008460 <mem_to_ptr>
 8008544:	4603      	mov	r3, r0
 8008546:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	885b      	ldrh	r3, [r3, #2]
 800854c:	4618      	mov	r0, r3
 800854e:	f7ff ff75 	bl	800843c <ptr_to_mem>
 8008552:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	429a      	cmp	r2, r3
 800855a:	d01f      	beq.n	800859c <plug_holes+0x118>
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	791b      	ldrb	r3, [r3, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d11b      	bne.n	800859c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008564:	4b17      	ldr	r3, [pc, #92]	; (80085c4 <plug_holes+0x140>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	429a      	cmp	r2, r3
 800856c:	d102      	bne.n	8008574 <plug_holes+0xf0>
      lfree = pmem;
 800856e:	4a15      	ldr	r2, [pc, #84]	; (80085c4 <plug_holes+0x140>)
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	881a      	ldrh	r2, [r3, #0]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	881b      	ldrh	r3, [r3, #0]
 8008580:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008584:	d00a      	beq.n	800859c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	4618      	mov	r0, r3
 800858c:	f7ff ff56 	bl	800843c <ptr_to_mem>
 8008590:	4604      	mov	r4, r0
 8008592:	68b8      	ldr	r0, [r7, #8]
 8008594:	f7ff ff64 	bl	8008460 <mem_to_ptr>
 8008598:	4603      	mov	r3, r0
 800859a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800859c:	bf00      	nop
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd90      	pop	{r4, r7, pc}
 80085a4:	2000bf6c 	.word	0x2000bf6c
 80085a8:	080133a8 	.word	0x080133a8
 80085ac:	080133d8 	.word	0x080133d8
 80085b0:	080133f0 	.word	0x080133f0
 80085b4:	2000bf70 	.word	0x2000bf70
 80085b8:	08013418 	.word	0x08013418
 80085bc:	08013434 	.word	0x08013434
 80085c0:	08013450 	.word	0x08013450
 80085c4:	2000bf78 	.word	0x2000bf78

080085c8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80085ce:	4b1f      	ldr	r3, [pc, #124]	; (800864c <mem_init+0x84>)
 80085d0:	3303      	adds	r3, #3
 80085d2:	f023 0303 	bic.w	r3, r3, #3
 80085d6:	461a      	mov	r2, r3
 80085d8:	4b1d      	ldr	r3, [pc, #116]	; (8008650 <mem_init+0x88>)
 80085da:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80085dc:	4b1c      	ldr	r3, [pc, #112]	; (8008650 <mem_init+0x88>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80085e8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80085f6:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80085fa:	f7ff ff1f 	bl	800843c <ptr_to_mem>
 80085fe:	4603      	mov	r3, r0
 8008600:	4a14      	ldr	r2, [pc, #80]	; (8008654 <mem_init+0x8c>)
 8008602:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008604:	4b13      	ldr	r3, [pc, #76]	; (8008654 <mem_init+0x8c>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2201      	movs	r2, #1
 800860a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800860c:	4b11      	ldr	r3, [pc, #68]	; (8008654 <mem_init+0x8c>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8008614:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008616:	4b0f      	ldr	r3, [pc, #60]	; (8008654 <mem_init+0x8c>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800861e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008620:	4b0b      	ldr	r3, [pc, #44]	; (8008650 <mem_init+0x88>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a0c      	ldr	r2, [pc, #48]	; (8008658 <mem_init+0x90>)
 8008626:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8008628:	480c      	ldr	r0, [pc, #48]	; (800865c <mem_init+0x94>)
 800862a:	f009 fd25 	bl	8012078 <sys_mutex_new>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d006      	beq.n	8008642 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8008634:	4b0a      	ldr	r3, [pc, #40]	; (8008660 <mem_init+0x98>)
 8008636:	f240 221f 	movw	r2, #543	; 0x21f
 800863a:	490a      	ldr	r1, [pc, #40]	; (8008664 <mem_init+0x9c>)
 800863c:	480a      	ldr	r0, [pc, #40]	; (8008668 <mem_init+0xa0>)
 800863e:	f009 fe8b 	bl	8012358 <iprintf>
  }
}
 8008642:	bf00      	nop
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20009758 	.word	0x20009758
 8008650:	2000bf6c 	.word	0x2000bf6c
 8008654:	2000bf70 	.word	0x2000bf70
 8008658:	2000bf78 	.word	0x2000bf78
 800865c:	2000bf74 	.word	0x2000bf74
 8008660:	080133a8 	.word	0x080133a8
 8008664:	0801347c 	.word	0x0801347c
 8008668:	080133f0 	.word	0x080133f0

0800866c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7ff fef3 	bl	8008460 <mem_to_ptr>
 800867a:	4603      	mov	r3, r0
 800867c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	881b      	ldrh	r3, [r3, #0]
 8008682:	4618      	mov	r0, r3
 8008684:	f7ff feda 	bl	800843c <ptr_to_mem>
 8008688:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	885b      	ldrh	r3, [r3, #2]
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff fed4 	bl	800843c <ptr_to_mem>
 8008694:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	881b      	ldrh	r3, [r3, #0]
 800869a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800869e:	d818      	bhi.n	80086d2 <mem_link_valid+0x66>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	885b      	ldrh	r3, [r3, #2]
 80086a4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80086a8:	d813      	bhi.n	80086d2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80086ae:	8afa      	ldrh	r2, [r7, #22]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d004      	beq.n	80086be <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	8afa      	ldrh	r2, [r7, #22]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d109      	bne.n	80086d2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80086be:	4b08      	ldr	r3, [pc, #32]	; (80086e0 <mem_link_valid+0x74>)
 80086c0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d006      	beq.n	80086d6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	885b      	ldrh	r3, [r3, #2]
 80086cc:	8afa      	ldrh	r2, [r7, #22]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d001      	beq.n	80086d6 <mem_link_valid+0x6a>
    return 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	e000      	b.n	80086d8 <mem_link_valid+0x6c>
  }
  return 1;
 80086d6:	2301      	movs	r3, #1
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3718      	adds	r7, #24
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	2000bf70 	.word	0x2000bf70

080086e4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b088      	sub	sp, #32
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d070      	beq.n	80087d4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f003 0303 	and.w	r3, r3, #3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00d      	beq.n	8008718 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80086fc:	4b37      	ldr	r3, [pc, #220]	; (80087dc <mem_free+0xf8>)
 80086fe:	f240 2273 	movw	r2, #627	; 0x273
 8008702:	4937      	ldr	r1, [pc, #220]	; (80087e0 <mem_free+0xfc>)
 8008704:	4837      	ldr	r0, [pc, #220]	; (80087e4 <mem_free+0x100>)
 8008706:	f009 fe27 	bl	8012358 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800870a:	f009 fd07 	bl	801211c <sys_arch_protect>
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f009 fd11 	bl	8012138 <sys_arch_unprotect>
    return;
 8008716:	e05e      	b.n	80087d6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3b08      	subs	r3, #8
 800871c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800871e:	4b32      	ldr	r3, [pc, #200]	; (80087e8 <mem_free+0x104>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	69fa      	ldr	r2, [r7, #28]
 8008724:	429a      	cmp	r2, r3
 8008726:	d306      	bcc.n	8008736 <mem_free+0x52>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f103 020c 	add.w	r2, r3, #12
 800872e:	4b2f      	ldr	r3, [pc, #188]	; (80087ec <mem_free+0x108>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	429a      	cmp	r2, r3
 8008734:	d90d      	bls.n	8008752 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008736:	4b29      	ldr	r3, [pc, #164]	; (80087dc <mem_free+0xf8>)
 8008738:	f240 227f 	movw	r2, #639	; 0x27f
 800873c:	492c      	ldr	r1, [pc, #176]	; (80087f0 <mem_free+0x10c>)
 800873e:	4829      	ldr	r0, [pc, #164]	; (80087e4 <mem_free+0x100>)
 8008740:	f009 fe0a 	bl	8012358 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008744:	f009 fcea 	bl	801211c <sys_arch_protect>
 8008748:	6138      	str	r0, [r7, #16]
 800874a:	6938      	ldr	r0, [r7, #16]
 800874c:	f009 fcf4 	bl	8012138 <sys_arch_unprotect>
    return;
 8008750:	e041      	b.n	80087d6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8008752:	4828      	ldr	r0, [pc, #160]	; (80087f4 <mem_free+0x110>)
 8008754:	f009 fca6 	bl	80120a4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	791b      	ldrb	r3, [r3, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d110      	bne.n	8008782 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008760:	4b1e      	ldr	r3, [pc, #120]	; (80087dc <mem_free+0xf8>)
 8008762:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8008766:	4924      	ldr	r1, [pc, #144]	; (80087f8 <mem_free+0x114>)
 8008768:	481e      	ldr	r0, [pc, #120]	; (80087e4 <mem_free+0x100>)
 800876a:	f009 fdf5 	bl	8012358 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800876e:	4821      	ldr	r0, [pc, #132]	; (80087f4 <mem_free+0x110>)
 8008770:	f009 fca7 	bl	80120c2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008774:	f009 fcd2 	bl	801211c <sys_arch_protect>
 8008778:	6178      	str	r0, [r7, #20]
 800877a:	6978      	ldr	r0, [r7, #20]
 800877c:	f009 fcdc 	bl	8012138 <sys_arch_unprotect>
    return;
 8008780:	e029      	b.n	80087d6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8008782:	69f8      	ldr	r0, [r7, #28]
 8008784:	f7ff ff72 	bl	800866c <mem_link_valid>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d110      	bne.n	80087b0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800878e:	4b13      	ldr	r3, [pc, #76]	; (80087dc <mem_free+0xf8>)
 8008790:	f240 2295 	movw	r2, #661	; 0x295
 8008794:	4919      	ldr	r1, [pc, #100]	; (80087fc <mem_free+0x118>)
 8008796:	4813      	ldr	r0, [pc, #76]	; (80087e4 <mem_free+0x100>)
 8008798:	f009 fdde 	bl	8012358 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800879c:	4815      	ldr	r0, [pc, #84]	; (80087f4 <mem_free+0x110>)
 800879e:	f009 fc90 	bl	80120c2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80087a2:	f009 fcbb 	bl	801211c <sys_arch_protect>
 80087a6:	61b8      	str	r0, [r7, #24]
 80087a8:	69b8      	ldr	r0, [r7, #24]
 80087aa:	f009 fcc5 	bl	8012138 <sys_arch_unprotect>
    return;
 80087ae:	e012      	b.n	80087d6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	2200      	movs	r2, #0
 80087b4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80087b6:	4b12      	ldr	r3, [pc, #72]	; (8008800 <mem_free+0x11c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	69fa      	ldr	r2, [r7, #28]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d202      	bcs.n	80087c6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80087c0:	4a0f      	ldr	r2, [pc, #60]	; (8008800 <mem_free+0x11c>)
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80087c6:	69f8      	ldr	r0, [r7, #28]
 80087c8:	f7ff fe5c 	bl	8008484 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80087cc:	4809      	ldr	r0, [pc, #36]	; (80087f4 <mem_free+0x110>)
 80087ce:	f009 fc78 	bl	80120c2 <sys_mutex_unlock>
 80087d2:	e000      	b.n	80087d6 <mem_free+0xf2>
    return;
 80087d4:	bf00      	nop
}
 80087d6:	3720      	adds	r7, #32
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	080133a8 	.word	0x080133a8
 80087e0:	08013498 	.word	0x08013498
 80087e4:	080133f0 	.word	0x080133f0
 80087e8:	2000bf6c 	.word	0x2000bf6c
 80087ec:	2000bf70 	.word	0x2000bf70
 80087f0:	080134bc 	.word	0x080134bc
 80087f4:	2000bf74 	.word	0x2000bf74
 80087f8:	080134d8 	.word	0x080134d8
 80087fc:	08013500 	.word	0x08013500
 8008800:	2000bf78 	.word	0x2000bf78

08008804 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b088      	sub	sp, #32
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	460b      	mov	r3, r1
 800880e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008810:	887b      	ldrh	r3, [r7, #2]
 8008812:	3303      	adds	r3, #3
 8008814:	b29b      	uxth	r3, r3
 8008816:	f023 0303 	bic.w	r3, r3, #3
 800881a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800881c:	8bfb      	ldrh	r3, [r7, #30]
 800881e:	2b0b      	cmp	r3, #11
 8008820:	d801      	bhi.n	8008826 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008822:	230c      	movs	r3, #12
 8008824:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008826:	8bfb      	ldrh	r3, [r7, #30]
 8008828:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800882c:	d803      	bhi.n	8008836 <mem_trim+0x32>
 800882e:	8bfa      	ldrh	r2, [r7, #30]
 8008830:	887b      	ldrh	r3, [r7, #2]
 8008832:	429a      	cmp	r2, r3
 8008834:	d201      	bcs.n	800883a <mem_trim+0x36>
    return NULL;
 8008836:	2300      	movs	r3, #0
 8008838:	e0d8      	b.n	80089ec <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800883a:	4b6e      	ldr	r3, [pc, #440]	; (80089f4 <mem_trim+0x1f0>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	429a      	cmp	r2, r3
 8008842:	d304      	bcc.n	800884e <mem_trim+0x4a>
 8008844:	4b6c      	ldr	r3, [pc, #432]	; (80089f8 <mem_trim+0x1f4>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	429a      	cmp	r2, r3
 800884c:	d306      	bcc.n	800885c <mem_trim+0x58>
 800884e:	4b6b      	ldr	r3, [pc, #428]	; (80089fc <mem_trim+0x1f8>)
 8008850:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008854:	496a      	ldr	r1, [pc, #424]	; (8008a00 <mem_trim+0x1fc>)
 8008856:	486b      	ldr	r0, [pc, #428]	; (8008a04 <mem_trim+0x200>)
 8008858:	f009 fd7e 	bl	8012358 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800885c:	4b65      	ldr	r3, [pc, #404]	; (80089f4 <mem_trim+0x1f0>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	429a      	cmp	r2, r3
 8008864:	d304      	bcc.n	8008870 <mem_trim+0x6c>
 8008866:	4b64      	ldr	r3, [pc, #400]	; (80089f8 <mem_trim+0x1f4>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	429a      	cmp	r2, r3
 800886e:	d307      	bcc.n	8008880 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008870:	f009 fc54 	bl	801211c <sys_arch_protect>
 8008874:	60b8      	str	r0, [r7, #8]
 8008876:	68b8      	ldr	r0, [r7, #8]
 8008878:	f009 fc5e 	bl	8012138 <sys_arch_unprotect>
    return rmem;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	e0b5      	b.n	80089ec <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	3b08      	subs	r3, #8
 8008884:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008886:	69b8      	ldr	r0, [r7, #24]
 8008888:	f7ff fdea 	bl	8008460 <mem_to_ptr>
 800888c:	4603      	mov	r3, r0
 800888e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	881a      	ldrh	r2, [r3, #0]
 8008894:	8afb      	ldrh	r3, [r7, #22]
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	b29b      	uxth	r3, r3
 800889a:	3b08      	subs	r3, #8
 800889c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800889e:	8bfa      	ldrh	r2, [r7, #30]
 80088a0:	8abb      	ldrh	r3, [r7, #20]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d906      	bls.n	80088b4 <mem_trim+0xb0>
 80088a6:	4b55      	ldr	r3, [pc, #340]	; (80089fc <mem_trim+0x1f8>)
 80088a8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80088ac:	4956      	ldr	r1, [pc, #344]	; (8008a08 <mem_trim+0x204>)
 80088ae:	4855      	ldr	r0, [pc, #340]	; (8008a04 <mem_trim+0x200>)
 80088b0:	f009 fd52 	bl	8012358 <iprintf>
  if (newsize > size) {
 80088b4:	8bfa      	ldrh	r2, [r7, #30]
 80088b6:	8abb      	ldrh	r3, [r7, #20]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d901      	bls.n	80088c0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80088bc:	2300      	movs	r3, #0
 80088be:	e095      	b.n	80089ec <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80088c0:	8bfa      	ldrh	r2, [r7, #30]
 80088c2:	8abb      	ldrh	r3, [r7, #20]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d101      	bne.n	80088cc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	e08f      	b.n	80089ec <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80088cc:	484f      	ldr	r0, [pc, #316]	; (8008a0c <mem_trim+0x208>)
 80088ce:	f009 fbe9 	bl	80120a4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	881b      	ldrh	r3, [r3, #0]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7ff fdb0 	bl	800843c <ptr_to_mem>
 80088dc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	791b      	ldrb	r3, [r3, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d13f      	bne.n	8008966 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80088ee:	d106      	bne.n	80088fe <mem_trim+0xfa>
 80088f0:	4b42      	ldr	r3, [pc, #264]	; (80089fc <mem_trim+0x1f8>)
 80088f2:	f240 22f5 	movw	r2, #757	; 0x2f5
 80088f6:	4946      	ldr	r1, [pc, #280]	; (8008a10 <mem_trim+0x20c>)
 80088f8:	4842      	ldr	r0, [pc, #264]	; (8008a04 <mem_trim+0x200>)
 80088fa:	f009 fd2d 	bl	8012358 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	881b      	ldrh	r3, [r3, #0]
 8008902:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008904:	8afa      	ldrh	r2, [r7, #22]
 8008906:	8bfb      	ldrh	r3, [r7, #30]
 8008908:	4413      	add	r3, r2
 800890a:	b29b      	uxth	r3, r3
 800890c:	3308      	adds	r3, #8
 800890e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8008910:	4b40      	ldr	r3, [pc, #256]	; (8008a14 <mem_trim+0x210>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	429a      	cmp	r2, r3
 8008918:	d106      	bne.n	8008928 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800891a:	89fb      	ldrh	r3, [r7, #14]
 800891c:	4618      	mov	r0, r3
 800891e:	f7ff fd8d 	bl	800843c <ptr_to_mem>
 8008922:	4603      	mov	r3, r0
 8008924:	4a3b      	ldr	r2, [pc, #236]	; (8008a14 <mem_trim+0x210>)
 8008926:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008928:	89fb      	ldrh	r3, [r7, #14]
 800892a:	4618      	mov	r0, r3
 800892c:	f7ff fd86 	bl	800843c <ptr_to_mem>
 8008930:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	2200      	movs	r2, #0
 8008936:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	89ba      	ldrh	r2, [r7, #12]
 800893c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	8afa      	ldrh	r2, [r7, #22]
 8008942:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	89fa      	ldrh	r2, [r7, #14]
 8008948:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	881b      	ldrh	r3, [r3, #0]
 800894e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008952:	d047      	beq.n	80089e4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	881b      	ldrh	r3, [r3, #0]
 8008958:	4618      	mov	r0, r3
 800895a:	f7ff fd6f 	bl	800843c <ptr_to_mem>
 800895e:	4602      	mov	r2, r0
 8008960:	89fb      	ldrh	r3, [r7, #14]
 8008962:	8053      	strh	r3, [r2, #2]
 8008964:	e03e      	b.n	80089e4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008966:	8bfb      	ldrh	r3, [r7, #30]
 8008968:	f103 0214 	add.w	r2, r3, #20
 800896c:	8abb      	ldrh	r3, [r7, #20]
 800896e:	429a      	cmp	r2, r3
 8008970:	d838      	bhi.n	80089e4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008972:	8afa      	ldrh	r2, [r7, #22]
 8008974:	8bfb      	ldrh	r3, [r7, #30]
 8008976:	4413      	add	r3, r2
 8008978:	b29b      	uxth	r3, r3
 800897a:	3308      	adds	r3, #8
 800897c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	881b      	ldrh	r3, [r3, #0]
 8008982:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008986:	d106      	bne.n	8008996 <mem_trim+0x192>
 8008988:	4b1c      	ldr	r3, [pc, #112]	; (80089fc <mem_trim+0x1f8>)
 800898a:	f240 3216 	movw	r2, #790	; 0x316
 800898e:	4920      	ldr	r1, [pc, #128]	; (8008a10 <mem_trim+0x20c>)
 8008990:	481c      	ldr	r0, [pc, #112]	; (8008a04 <mem_trim+0x200>)
 8008992:	f009 fce1 	bl	8012358 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008996:	89fb      	ldrh	r3, [r7, #14]
 8008998:	4618      	mov	r0, r3
 800899a:	f7ff fd4f 	bl	800843c <ptr_to_mem>
 800899e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80089a0:	4b1c      	ldr	r3, [pc, #112]	; (8008a14 <mem_trim+0x210>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d202      	bcs.n	80089b0 <mem_trim+0x1ac>
      lfree = mem2;
 80089aa:	4a1a      	ldr	r2, [pc, #104]	; (8008a14 <mem_trim+0x210>)
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	2200      	movs	r2, #0
 80089b4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	881a      	ldrh	r2, [r3, #0]
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	8afa      	ldrh	r2, [r7, #22]
 80089c2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	89fa      	ldrh	r2, [r7, #14]
 80089c8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	881b      	ldrh	r3, [r3, #0]
 80089ce:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80089d2:	d007      	beq.n	80089e4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	881b      	ldrh	r3, [r3, #0]
 80089d8:	4618      	mov	r0, r3
 80089da:	f7ff fd2f 	bl	800843c <ptr_to_mem>
 80089de:	4602      	mov	r2, r0
 80089e0:	89fb      	ldrh	r3, [r7, #14]
 80089e2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80089e4:	4809      	ldr	r0, [pc, #36]	; (8008a0c <mem_trim+0x208>)
 80089e6:	f009 fb6c 	bl	80120c2 <sys_mutex_unlock>
  return rmem;
 80089ea:	687b      	ldr	r3, [r7, #4]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3720      	adds	r7, #32
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	2000bf6c 	.word	0x2000bf6c
 80089f8:	2000bf70 	.word	0x2000bf70
 80089fc:	080133a8 	.word	0x080133a8
 8008a00:	08013534 	.word	0x08013534
 8008a04:	080133f0 	.word	0x080133f0
 8008a08:	0801354c 	.word	0x0801354c
 8008a0c:	2000bf74 	.word	0x2000bf74
 8008a10:	0801356c 	.word	0x0801356c
 8008a14:	2000bf78 	.word	0x2000bf78

08008a18 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b088      	sub	sp, #32
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	4603      	mov	r3, r0
 8008a20:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008a22:	88fb      	ldrh	r3, [r7, #6]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d101      	bne.n	8008a2c <mem_malloc+0x14>
    return NULL;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	e0e2      	b.n	8008bf2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008a2c:	88fb      	ldrh	r3, [r7, #6]
 8008a2e:	3303      	adds	r3, #3
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	f023 0303 	bic.w	r3, r3, #3
 8008a36:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008a38:	8bbb      	ldrh	r3, [r7, #28]
 8008a3a:	2b0b      	cmp	r3, #11
 8008a3c:	d801      	bhi.n	8008a42 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008a3e:	230c      	movs	r3, #12
 8008a40:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008a42:	8bbb      	ldrh	r3, [r7, #28]
 8008a44:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008a48:	d803      	bhi.n	8008a52 <mem_malloc+0x3a>
 8008a4a:	8bba      	ldrh	r2, [r7, #28]
 8008a4c:	88fb      	ldrh	r3, [r7, #6]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d201      	bcs.n	8008a56 <mem_malloc+0x3e>
    return NULL;
 8008a52:	2300      	movs	r3, #0
 8008a54:	e0cd      	b.n	8008bf2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8008a56:	4869      	ldr	r0, [pc, #420]	; (8008bfc <mem_malloc+0x1e4>)
 8008a58:	f009 fb24 	bl	80120a4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008a5c:	4b68      	ldr	r3, [pc, #416]	; (8008c00 <mem_malloc+0x1e8>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7ff fcfd 	bl	8008460 <mem_to_ptr>
 8008a66:	4603      	mov	r3, r0
 8008a68:	83fb      	strh	r3, [r7, #30]
 8008a6a:	e0b7      	b.n	8008bdc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008a6c:	8bfb      	ldrh	r3, [r7, #30]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7ff fce4 	bl	800843c <ptr_to_mem>
 8008a74:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	791b      	ldrb	r3, [r3, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f040 80a7 	bne.w	8008bce <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	881b      	ldrh	r3, [r3, #0]
 8008a84:	461a      	mov	r2, r3
 8008a86:	8bfb      	ldrh	r3, [r7, #30]
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	f1a3 0208 	sub.w	r2, r3, #8
 8008a8e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008a90:	429a      	cmp	r2, r3
 8008a92:	f0c0 809c 	bcc.w	8008bce <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	881b      	ldrh	r3, [r3, #0]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	8bfb      	ldrh	r3, [r7, #30]
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	f1a3 0208 	sub.w	r2, r3, #8
 8008aa4:	8bbb      	ldrh	r3, [r7, #28]
 8008aa6:	3314      	adds	r3, #20
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d333      	bcc.n	8008b14 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008aac:	8bfa      	ldrh	r2, [r7, #30]
 8008aae:	8bbb      	ldrh	r3, [r7, #28]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	3308      	adds	r3, #8
 8008ab6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008ab8:	8a7b      	ldrh	r3, [r7, #18]
 8008aba:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008abe:	d106      	bne.n	8008ace <mem_malloc+0xb6>
 8008ac0:	4b50      	ldr	r3, [pc, #320]	; (8008c04 <mem_malloc+0x1ec>)
 8008ac2:	f240 3287 	movw	r2, #903	; 0x387
 8008ac6:	4950      	ldr	r1, [pc, #320]	; (8008c08 <mem_malloc+0x1f0>)
 8008ac8:	4850      	ldr	r0, [pc, #320]	; (8008c0c <mem_malloc+0x1f4>)
 8008aca:	f009 fc45 	bl	8012358 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008ace:	8a7b      	ldrh	r3, [r7, #18]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7ff fcb3 	bl	800843c <ptr_to_mem>
 8008ad6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	881a      	ldrh	r2, [r3, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	8bfa      	ldrh	r2, [r7, #30]
 8008aea:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	8a7a      	ldrh	r2, [r7, #18]
 8008af0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2201      	movs	r2, #1
 8008af6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	881b      	ldrh	r3, [r3, #0]
 8008afc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8008b00:	d00b      	beq.n	8008b1a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	881b      	ldrh	r3, [r3, #0]
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7ff fc98 	bl	800843c <ptr_to_mem>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	8a7b      	ldrh	r3, [r7, #18]
 8008b10:	8053      	strh	r3, [r2, #2]
 8008b12:	e002      	b.n	8008b1a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	2201      	movs	r2, #1
 8008b18:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008b1a:	4b39      	ldr	r3, [pc, #228]	; (8008c00 <mem_malloc+0x1e8>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d127      	bne.n	8008b74 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8008b24:	4b36      	ldr	r3, [pc, #216]	; (8008c00 <mem_malloc+0x1e8>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008b2a:	e005      	b.n	8008b38 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	881b      	ldrh	r3, [r3, #0]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7ff fc83 	bl	800843c <ptr_to_mem>
 8008b36:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	791b      	ldrb	r3, [r3, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d004      	beq.n	8008b4a <mem_malloc+0x132>
 8008b40:	4b33      	ldr	r3, [pc, #204]	; (8008c10 <mem_malloc+0x1f8>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d1f0      	bne.n	8008b2c <mem_malloc+0x114>
          }
          lfree = cur;
 8008b4a:	4a2d      	ldr	r2, [pc, #180]	; (8008c00 <mem_malloc+0x1e8>)
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008b50:	4b2b      	ldr	r3, [pc, #172]	; (8008c00 <mem_malloc+0x1e8>)
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	4b2e      	ldr	r3, [pc, #184]	; (8008c10 <mem_malloc+0x1f8>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d00b      	beq.n	8008b74 <mem_malloc+0x15c>
 8008b5c:	4b28      	ldr	r3, [pc, #160]	; (8008c00 <mem_malloc+0x1e8>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	791b      	ldrb	r3, [r3, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d006      	beq.n	8008b74 <mem_malloc+0x15c>
 8008b66:	4b27      	ldr	r3, [pc, #156]	; (8008c04 <mem_malloc+0x1ec>)
 8008b68:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008b6c:	4929      	ldr	r1, [pc, #164]	; (8008c14 <mem_malloc+0x1fc>)
 8008b6e:	4827      	ldr	r0, [pc, #156]	; (8008c0c <mem_malloc+0x1f4>)
 8008b70:	f009 fbf2 	bl	8012358 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8008b74:	4821      	ldr	r0, [pc, #132]	; (8008bfc <mem_malloc+0x1e4>)
 8008b76:	f009 faa4 	bl	80120c2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008b7a:	8bba      	ldrh	r2, [r7, #28]
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	4413      	add	r3, r2
 8008b80:	3308      	adds	r3, #8
 8008b82:	4a23      	ldr	r2, [pc, #140]	; (8008c10 <mem_malloc+0x1f8>)
 8008b84:	6812      	ldr	r2, [r2, #0]
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d906      	bls.n	8008b98 <mem_malloc+0x180>
 8008b8a:	4b1e      	ldr	r3, [pc, #120]	; (8008c04 <mem_malloc+0x1ec>)
 8008b8c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008b90:	4921      	ldr	r1, [pc, #132]	; (8008c18 <mem_malloc+0x200>)
 8008b92:	481e      	ldr	r0, [pc, #120]	; (8008c0c <mem_malloc+0x1f4>)
 8008b94:	f009 fbe0 	bl	8012358 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	f003 0303 	and.w	r3, r3, #3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d006      	beq.n	8008bb0 <mem_malloc+0x198>
 8008ba2:	4b18      	ldr	r3, [pc, #96]	; (8008c04 <mem_malloc+0x1ec>)
 8008ba4:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008ba8:	491c      	ldr	r1, [pc, #112]	; (8008c1c <mem_malloc+0x204>)
 8008baa:	4818      	ldr	r0, [pc, #96]	; (8008c0c <mem_malloc+0x1f4>)
 8008bac:	f009 fbd4 	bl	8012358 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f003 0303 	and.w	r3, r3, #3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d006      	beq.n	8008bc8 <mem_malloc+0x1b0>
 8008bba:	4b12      	ldr	r3, [pc, #72]	; (8008c04 <mem_malloc+0x1ec>)
 8008bbc:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008bc0:	4917      	ldr	r1, [pc, #92]	; (8008c20 <mem_malloc+0x208>)
 8008bc2:	4812      	ldr	r0, [pc, #72]	; (8008c0c <mem_malloc+0x1f4>)
 8008bc4:	f009 fbc8 	bl	8012358 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	3308      	adds	r3, #8
 8008bcc:	e011      	b.n	8008bf2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8008bce:	8bfb      	ldrh	r3, [r7, #30]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7ff fc33 	bl	800843c <ptr_to_mem>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	881b      	ldrh	r3, [r3, #0]
 8008bda:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008bdc:	8bfa      	ldrh	r2, [r7, #30]
 8008bde:	8bbb      	ldrh	r3, [r7, #28]
 8008be0:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8008be4:	429a      	cmp	r2, r3
 8008be6:	f4ff af41 	bcc.w	8008a6c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8008bea:	4804      	ldr	r0, [pc, #16]	; (8008bfc <mem_malloc+0x1e4>)
 8008bec:	f009 fa69 	bl	80120c2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3720      	adds	r7, #32
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	2000bf74 	.word	0x2000bf74
 8008c00:	2000bf78 	.word	0x2000bf78
 8008c04:	080133a8 	.word	0x080133a8
 8008c08:	0801356c 	.word	0x0801356c
 8008c0c:	080133f0 	.word	0x080133f0
 8008c10:	2000bf70 	.word	0x2000bf70
 8008c14:	08013580 	.word	0x08013580
 8008c18:	0801359c 	.word	0x0801359c
 8008c1c:	080135cc 	.word	0x080135cc
 8008c20:	080135fc 	.word	0x080135fc

08008c24 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	2200      	movs	r2, #0
 8008c32:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	3303      	adds	r3, #3
 8008c3a:	f023 0303 	bic.w	r3, r3, #3
 8008c3e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008c40:	2300      	movs	r3, #0
 8008c42:	60fb      	str	r3, [r7, #12]
 8008c44:	e011      	b.n	8008c6a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	881b      	ldrh	r3, [r3, #0]
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	4413      	add	r3, r2
 8008c62:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	3301      	adds	r3, #1
 8008c68:	60fb      	str	r3, [r7, #12]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	885b      	ldrh	r3, [r3, #2]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	4293      	cmp	r3, r2
 8008c74:	dbe7      	blt.n	8008c46 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008c76:	bf00      	nop
 8008c78:	bf00      	nop
 8008c7a:	3714      	adds	r7, #20
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	80fb      	strh	r3, [r7, #6]
 8008c8e:	e009      	b.n	8008ca4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008c90:	88fb      	ldrh	r3, [r7, #6]
 8008c92:	4a08      	ldr	r2, [pc, #32]	; (8008cb4 <memp_init+0x30>)
 8008c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7ff ffc3 	bl	8008c24 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008c9e:	88fb      	ldrh	r3, [r7, #6]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	80fb      	strh	r3, [r7, #6]
 8008ca4:	88fb      	ldrh	r3, [r7, #6]
 8008ca6:	2b0c      	cmp	r3, #12
 8008ca8:	d9f2      	bls.n	8008c90 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008caa:	bf00      	nop
 8008cac:	bf00      	nop
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	08015e34 	.word	0x08015e34

08008cb8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008cc0:	f009 fa2c 	bl	801211c <sys_arch_protect>
 8008cc4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d015      	beq.n	8008d00 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	6812      	ldr	r2, [r2, #0]
 8008cdc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	f003 0303 	and.w	r3, r3, #3
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d006      	beq.n	8008cf6 <do_memp_malloc_pool+0x3e>
 8008ce8:	4b09      	ldr	r3, [pc, #36]	; (8008d10 <do_memp_malloc_pool+0x58>)
 8008cea:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008cee:	4909      	ldr	r1, [pc, #36]	; (8008d14 <do_memp_malloc_pool+0x5c>)
 8008cf0:	4809      	ldr	r0, [pc, #36]	; (8008d18 <do_memp_malloc_pool+0x60>)
 8008cf2:	f009 fb31 	bl	8012358 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f009 fa1e 	bl	8012138 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	e003      	b.n	8008d08 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f009 fa19 	bl	8012138 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	08013620 	.word	0x08013620
 8008d14:	08013650 	.word	0x08013650
 8008d18:	08013674 	.word	0x08013674

08008d1c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d106      	bne.n	8008d38 <memp_malloc_pool+0x1c>
 8008d2a:	4b0a      	ldr	r3, [pc, #40]	; (8008d54 <memp_malloc_pool+0x38>)
 8008d2c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8008d30:	4909      	ldr	r1, [pc, #36]	; (8008d58 <memp_malloc_pool+0x3c>)
 8008d32:	480a      	ldr	r0, [pc, #40]	; (8008d5c <memp_malloc_pool+0x40>)
 8008d34:	f009 fb10 	bl	8012358 <iprintf>
  if (desc == NULL) {
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <memp_malloc_pool+0x26>
    return NULL;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	e003      	b.n	8008d4a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7ff ffb8 	bl	8008cb8 <do_memp_malloc_pool>
 8008d48:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	08013620 	.word	0x08013620
 8008d58:	0801369c 	.word	0x0801369c
 8008d5c:	08013674 	.word	0x08013674

08008d60 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	4603      	mov	r3, r0
 8008d68:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008d6a:	79fb      	ldrb	r3, [r7, #7]
 8008d6c:	2b0c      	cmp	r3, #12
 8008d6e:	d908      	bls.n	8008d82 <memp_malloc+0x22>
 8008d70:	4b0a      	ldr	r3, [pc, #40]	; (8008d9c <memp_malloc+0x3c>)
 8008d72:	f240 1257 	movw	r2, #343	; 0x157
 8008d76:	490a      	ldr	r1, [pc, #40]	; (8008da0 <memp_malloc+0x40>)
 8008d78:	480a      	ldr	r0, [pc, #40]	; (8008da4 <memp_malloc+0x44>)
 8008d7a:	f009 faed 	bl	8012358 <iprintf>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	e008      	b.n	8008d94 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008d82:	79fb      	ldrb	r3, [r7, #7]
 8008d84:	4a08      	ldr	r2, [pc, #32]	; (8008da8 <memp_malloc+0x48>)
 8008d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7ff ff94 	bl	8008cb8 <do_memp_malloc_pool>
 8008d90:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008d92:	68fb      	ldr	r3, [r7, #12]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	08013620 	.word	0x08013620
 8008da0:	080136b0 	.word	0x080136b0
 8008da4:	08013674 	.word	0x08013674
 8008da8:	08015e34 	.word	0x08015e34

08008dac <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	f003 0303 	and.w	r3, r3, #3
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d006      	beq.n	8008dce <do_memp_free_pool+0x22>
 8008dc0:	4b0d      	ldr	r3, [pc, #52]	; (8008df8 <do_memp_free_pool+0x4c>)
 8008dc2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008dc6:	490d      	ldr	r1, [pc, #52]	; (8008dfc <do_memp_free_pool+0x50>)
 8008dc8:	480d      	ldr	r0, [pc, #52]	; (8008e00 <do_memp_free_pool+0x54>)
 8008dca:	f009 fac5 	bl	8012358 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8008dd2:	f009 f9a3 	bl	801211c <sys_arch_protect>
 8008dd6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8008dea:	68b8      	ldr	r0, [r7, #8]
 8008dec:	f009 f9a4 	bl	8012138 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8008df0:	bf00      	nop
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	08013620 	.word	0x08013620
 8008dfc:	080136d0 	.word	0x080136d0
 8008e00:	08013674 	.word	0x08013674

08008e04 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d106      	bne.n	8008e22 <memp_free_pool+0x1e>
 8008e14:	4b0a      	ldr	r3, [pc, #40]	; (8008e40 <memp_free_pool+0x3c>)
 8008e16:	f240 1295 	movw	r2, #405	; 0x195
 8008e1a:	490a      	ldr	r1, [pc, #40]	; (8008e44 <memp_free_pool+0x40>)
 8008e1c:	480a      	ldr	r0, [pc, #40]	; (8008e48 <memp_free_pool+0x44>)
 8008e1e:	f009 fa9b 	bl	8012358 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d007      	beq.n	8008e38 <memp_free_pool+0x34>
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d004      	beq.n	8008e38 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f7ff ffbb 	bl	8008dac <do_memp_free_pool>
 8008e36:	e000      	b.n	8008e3a <memp_free_pool+0x36>
    return;
 8008e38:	bf00      	nop
}
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	08013620 	.word	0x08013620
 8008e44:	0801369c 	.word	0x0801369c
 8008e48:	08013674 	.word	0x08013674

08008e4c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	4603      	mov	r3, r0
 8008e54:	6039      	str	r1, [r7, #0]
 8008e56:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008e58:	79fb      	ldrb	r3, [r7, #7]
 8008e5a:	2b0c      	cmp	r3, #12
 8008e5c:	d907      	bls.n	8008e6e <memp_free+0x22>
 8008e5e:	4b0c      	ldr	r3, [pc, #48]	; (8008e90 <memp_free+0x44>)
 8008e60:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008e64:	490b      	ldr	r1, [pc, #44]	; (8008e94 <memp_free+0x48>)
 8008e66:	480c      	ldr	r0, [pc, #48]	; (8008e98 <memp_free+0x4c>)
 8008e68:	f009 fa76 	bl	8012358 <iprintf>
 8008e6c:	e00c      	b.n	8008e88 <memp_free+0x3c>

  if (mem == NULL) {
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d008      	beq.n	8008e86 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008e74:	79fb      	ldrb	r3, [r7, #7]
 8008e76:	4a09      	ldr	r2, [pc, #36]	; (8008e9c <memp_free+0x50>)
 8008e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7ff ff94 	bl	8008dac <do_memp_free_pool>
 8008e84:	e000      	b.n	8008e88 <memp_free+0x3c>
    return;
 8008e86:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	08013620 	.word	0x08013620
 8008e94:	080136f0 	.word	0x080136f0
 8008e98:	08013674 	.word	0x08013674
 8008e9c:	08015e34 	.word	0x08015e34

08008ea0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008ea4:	bf00      	nop
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
	...

08008eb0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
 8008ebc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d108      	bne.n	8008ed6 <netif_add+0x26>
 8008ec4:	4b57      	ldr	r3, [pc, #348]	; (8009024 <netif_add+0x174>)
 8008ec6:	f240 1227 	movw	r2, #295	; 0x127
 8008eca:	4957      	ldr	r1, [pc, #348]	; (8009028 <netif_add+0x178>)
 8008ecc:	4857      	ldr	r0, [pc, #348]	; (800902c <netif_add+0x17c>)
 8008ece:	f009 fa43 	bl	8012358 <iprintf>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	e0a2      	b.n	800901c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d108      	bne.n	8008eee <netif_add+0x3e>
 8008edc:	4b51      	ldr	r3, [pc, #324]	; (8009024 <netif_add+0x174>)
 8008ede:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008ee2:	4953      	ldr	r1, [pc, #332]	; (8009030 <netif_add+0x180>)
 8008ee4:	4851      	ldr	r0, [pc, #324]	; (800902c <netif_add+0x17c>)
 8008ee6:	f009 fa37 	bl	8012358 <iprintf>
 8008eea:	2300      	movs	r3, #0
 8008eec:	e096      	b.n	800901c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008ef4:	4b4f      	ldr	r3, [pc, #316]	; (8009034 <netif_add+0x184>)
 8008ef6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d101      	bne.n	8008f02 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008efe:	4b4d      	ldr	r3, [pc, #308]	; (8009034 <netif_add+0x184>)
 8008f00:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d101      	bne.n	8008f0c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008f08:	4b4a      	ldr	r3, [pc, #296]	; (8009034 <netif_add+0x184>)
 8008f0a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	4a45      	ldr	r2, [pc, #276]	; (8009038 <netif_add+0x188>)
 8008f22:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6a3a      	ldr	r2, [r7, #32]
 8008f3c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008f3e:	4b3f      	ldr	r3, [pc, #252]	; (800903c <netif_add+0x18c>)
 8008f40:	781a      	ldrb	r2, [r3, #0]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f4c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	68b9      	ldr	r1, [r7, #8]
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f000 f913 	bl	8009180 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	4798      	blx	r3
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <netif_add+0xba>
    return NULL;
 8008f66:	2300      	movs	r3, #0
 8008f68:	e058      	b.n	800901c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f70:	2bff      	cmp	r3, #255	; 0xff
 8008f72:	d103      	bne.n	8008f7c <netif_add+0xcc>
        netif->num = 0;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008f80:	4b2f      	ldr	r3, [pc, #188]	; (8009040 <netif_add+0x190>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	617b      	str	r3, [r7, #20]
 8008f86:	e02b      	b.n	8008fe0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d106      	bne.n	8008f9e <netif_add+0xee>
 8008f90:	4b24      	ldr	r3, [pc, #144]	; (8009024 <netif_add+0x174>)
 8008f92:	f240 128b 	movw	r2, #395	; 0x18b
 8008f96:	492b      	ldr	r1, [pc, #172]	; (8009044 <netif_add+0x194>)
 8008f98:	4824      	ldr	r0, [pc, #144]	; (800902c <netif_add+0x17c>)
 8008f9a:	f009 f9dd 	bl	8012358 <iprintf>
        num_netifs++;
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	2bff      	cmp	r3, #255	; 0xff
 8008fa8:	dd06      	ble.n	8008fb8 <netif_add+0x108>
 8008faa:	4b1e      	ldr	r3, [pc, #120]	; (8009024 <netif_add+0x174>)
 8008fac:	f240 128d 	movw	r2, #397	; 0x18d
 8008fb0:	4925      	ldr	r1, [pc, #148]	; (8009048 <netif_add+0x198>)
 8008fb2:	481e      	ldr	r0, [pc, #120]	; (800902c <netif_add+0x17c>)
 8008fb4:	f009 f9d0 	bl	8012358 <iprintf>
        if (netif2->num == netif->num) {
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d108      	bne.n	8008fda <netif_add+0x12a>
          netif->num++;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008fce:	3301      	adds	r3, #1
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8008fd8:	e005      	b.n	8008fe6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	617b      	str	r3, [r7, #20]
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1d0      	bne.n	8008f88 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1be      	bne.n	8008f6a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008ff2:	2bfe      	cmp	r3, #254	; 0xfe
 8008ff4:	d103      	bne.n	8008ffe <netif_add+0x14e>
    netif_num = 0;
 8008ff6:	4b11      	ldr	r3, [pc, #68]	; (800903c <netif_add+0x18c>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	701a      	strb	r2, [r3, #0]
 8008ffc:	e006      	b.n	800900c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009004:	3301      	adds	r3, #1
 8009006:	b2da      	uxtb	r2, r3
 8009008:	4b0c      	ldr	r3, [pc, #48]	; (800903c <netif_add+0x18c>)
 800900a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800900c:	4b0c      	ldr	r3, [pc, #48]	; (8009040 <netif_add+0x190>)
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009014:	4a0a      	ldr	r2, [pc, #40]	; (8009040 <netif_add+0x190>)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800901a:	68fb      	ldr	r3, [r7, #12]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3718      	adds	r7, #24
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	0801370c 	.word	0x0801370c
 8009028:	080137a0 	.word	0x080137a0
 800902c:	0801375c 	.word	0x0801375c
 8009030:	080137bc 	.word	0x080137bc
 8009034:	08015ea8 	.word	0x08015ea8
 8009038:	0800945b 	.word	0x0800945b
 800903c:	2000f050 	.word	0x2000f050
 8009040:	2000f048 	.word	0x2000f048
 8009044:	080137e0 	.word	0x080137e0
 8009048:	080137f4 	.word	0x080137f4

0800904c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f002 fb7d 	bl	800b758 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f006 fc91 	bl	800f988 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009066:	bf00      	nop
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
	...

08009070 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d106      	bne.n	8009090 <netif_do_set_ipaddr+0x20>
 8009082:	4b1d      	ldr	r3, [pc, #116]	; (80090f8 <netif_do_set_ipaddr+0x88>)
 8009084:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009088:	491c      	ldr	r1, [pc, #112]	; (80090fc <netif_do_set_ipaddr+0x8c>)
 800908a:	481d      	ldr	r0, [pc, #116]	; (8009100 <netif_do_set_ipaddr+0x90>)
 800908c:	f009 f964 	bl	8012358 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d106      	bne.n	80090a4 <netif_do_set_ipaddr+0x34>
 8009096:	4b18      	ldr	r3, [pc, #96]	; (80090f8 <netif_do_set_ipaddr+0x88>)
 8009098:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800909c:	4917      	ldr	r1, [pc, #92]	; (80090fc <netif_do_set_ipaddr+0x8c>)
 800909e:	4818      	ldr	r0, [pc, #96]	; (8009100 <netif_do_set_ipaddr+0x90>)
 80090a0:	f009 f95a 	bl	8012358 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	3304      	adds	r3, #4
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d01c      	beq.n	80090ec <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3304      	adds	r3, #4
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80090c2:	f107 0314 	add.w	r3, r7, #20
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7ff ffbf 	bl	800904c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d002      	beq.n	80090da <netif_do_set_ipaddr+0x6a>
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	e000      	b.n	80090dc <netif_do_set_ipaddr+0x6c>
 80090da:	2300      	movs	r3, #0
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80090e0:	2101      	movs	r1, #1
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 f8d2 	bl	800928c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80090e8:	2301      	movs	r3, #1
 80090ea:	e000      	b.n	80090ee <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3718      	adds	r7, #24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	0801370c 	.word	0x0801370c
 80090fc:	08013824 	.word	0x08013824
 8009100:	0801375c 	.word	0x0801375c

08009104 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	3308      	adds	r3, #8
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	429a      	cmp	r2, r3
 800911c:	d00a      	beq.n	8009134 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d002      	beq.n	800912a <netif_do_set_netmask+0x26>
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	e000      	b.n	800912c <netif_do_set_netmask+0x28>
 800912a:	2300      	movs	r3, #0
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009130:	2301      	movs	r3, #1
 8009132:	e000      	b.n	8009136 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3714      	adds	r7, #20
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009142:	b480      	push	{r7}
 8009144:	b085      	sub	sp, #20
 8009146:	af00      	add	r7, sp, #0
 8009148:	60f8      	str	r0, [r7, #12]
 800914a:	60b9      	str	r1, [r7, #8]
 800914c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	330c      	adds	r3, #12
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	429a      	cmp	r2, r3
 800915a:	d00a      	beq.n	8009172 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d002      	beq.n	8009168 <netif_do_set_gw+0x26>
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	e000      	b.n	800916a <netif_do_set_gw+0x28>
 8009168:	2300      	movs	r3, #0
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800916e:	2301      	movs	r3, #1
 8009170:	e000      	b.n	8009174 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b088      	sub	sp, #32
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
 800918c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800918e:	2300      	movs	r3, #0
 8009190:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009192:	2300      	movs	r3, #0
 8009194:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d101      	bne.n	80091a0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800919c:	4b1c      	ldr	r3, [pc, #112]	; (8009210 <netif_set_addr+0x90>)
 800919e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80091a6:	4b1a      	ldr	r3, [pc, #104]	; (8009210 <netif_set_addr+0x90>)
 80091a8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80091b0:	4b17      	ldr	r3, [pc, #92]	; (8009210 <netif_set_addr+0x90>)
 80091b2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <netif_set_addr+0x42>
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d101      	bne.n	80091c6 <netif_set_addr+0x46>
 80091c2:	2301      	movs	r3, #1
 80091c4:	e000      	b.n	80091c8 <netif_set_addr+0x48>
 80091c6:	2300      	movs	r3, #0
 80091c8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d006      	beq.n	80091de <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80091d0:	f107 0310 	add.w	r3, r7, #16
 80091d4:	461a      	mov	r2, r3
 80091d6:	68b9      	ldr	r1, [r7, #8]
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f7ff ff49 	bl	8009070 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80091de:	69fa      	ldr	r2, [r7, #28]
 80091e0:	6879      	ldr	r1, [r7, #4]
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f7ff ff8e 	bl	8009104 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80091e8:	69ba      	ldr	r2, [r7, #24]
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f7ff ffa8 	bl	8009142 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d106      	bne.n	8009206 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80091f8:	f107 0310 	add.w	r3, r7, #16
 80091fc:	461a      	mov	r2, r3
 80091fe:	68b9      	ldr	r1, [r7, #8]
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f7ff ff35 	bl	8009070 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009206:	bf00      	nop
 8009208:	3720      	adds	r7, #32
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	08015ea8 	.word	0x08015ea8

08009214 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800921c:	4a04      	ldr	r2, [pc, #16]	; (8009230 <netif_set_default+0x1c>)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009222:	bf00      	nop
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	2000f04c 	.word	0x2000f04c

08009234 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d107      	bne.n	8009252 <netif_set_up+0x1e>
 8009242:	4b0f      	ldr	r3, [pc, #60]	; (8009280 <netif_set_up+0x4c>)
 8009244:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009248:	490e      	ldr	r1, [pc, #56]	; (8009284 <netif_set_up+0x50>)
 800924a:	480f      	ldr	r0, [pc, #60]	; (8009288 <netif_set_up+0x54>)
 800924c:	f009 f884 	bl	8012358 <iprintf>
 8009250:	e013      	b.n	800927a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10c      	bne.n	800927a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009266:	f043 0301 	orr.w	r3, r3, #1
 800926a:	b2da      	uxtb	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009272:	2103      	movs	r1, #3
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 f809 	bl	800928c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	0801370c 	.word	0x0801370c
 8009284:	08013894 	.word	0x08013894
 8009288:	0801375c 	.word	0x0801375c

0800928c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d106      	bne.n	80092ac <netif_issue_reports+0x20>
 800929e:	4b18      	ldr	r3, [pc, #96]	; (8009300 <netif_issue_reports+0x74>)
 80092a0:	f240 326d 	movw	r2, #877	; 0x36d
 80092a4:	4917      	ldr	r1, [pc, #92]	; (8009304 <netif_issue_reports+0x78>)
 80092a6:	4818      	ldr	r0, [pc, #96]	; (8009308 <netif_issue_reports+0x7c>)
 80092a8:	f009 f856 	bl	8012358 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80092b2:	f003 0304 	and.w	r3, r3, #4
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d01e      	beq.n	80092f8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80092c0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d017      	beq.n	80092f8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80092c8:	78fb      	ldrb	r3, [r7, #3]
 80092ca:	f003 0301 	and.w	r3, r3, #1
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d013      	beq.n	80092fa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	3304      	adds	r3, #4
 80092d6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00e      	beq.n	80092fa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80092e2:	f003 0308 	and.w	r3, r3, #8
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d007      	beq.n	80092fa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	3304      	adds	r3, #4
 80092ee:	4619      	mov	r1, r3
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f007 fab3 	bl	801085c <etharp_request>
 80092f6:	e000      	b.n	80092fa <netif_issue_reports+0x6e>
    return;
 80092f8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	0801370c 	.word	0x0801370c
 8009304:	080138b0 	.word	0x080138b0
 8009308:	0801375c 	.word	0x0801375c

0800930c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d107      	bne.n	800932a <netif_set_down+0x1e>
 800931a:	4b12      	ldr	r3, [pc, #72]	; (8009364 <netif_set_down+0x58>)
 800931c:	f240 329b 	movw	r2, #923	; 0x39b
 8009320:	4911      	ldr	r1, [pc, #68]	; (8009368 <netif_set_down+0x5c>)
 8009322:	4812      	ldr	r0, [pc, #72]	; (800936c <netif_set_down+0x60>)
 8009324:	f009 f818 	bl	8012358 <iprintf>
 8009328:	e019      	b.n	800935e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009330:	f003 0301 	and.w	r3, r3, #1
 8009334:	2b00      	cmp	r3, #0
 8009336:	d012      	beq.n	800935e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800933e:	f023 0301 	bic.w	r3, r3, #1
 8009342:	b2da      	uxtb	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009350:	f003 0308 	and.w	r3, r3, #8
 8009354:	2b00      	cmp	r3, #0
 8009356:	d002      	beq.n	800935e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f006 fe3d 	bl	800ffd8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	0801370c 	.word	0x0801370c
 8009368:	080138d4 	.word	0x080138d4
 800936c:	0801375c 	.word	0x0801375c

08009370 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d107      	bne.n	800938e <netif_set_link_up+0x1e>
 800937e:	4b13      	ldr	r3, [pc, #76]	; (80093cc <netif_set_link_up+0x5c>)
 8009380:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8009384:	4912      	ldr	r1, [pc, #72]	; (80093d0 <netif_set_link_up+0x60>)
 8009386:	4813      	ldr	r0, [pc, #76]	; (80093d4 <netif_set_link_up+0x64>)
 8009388:	f008 ffe6 	bl	8012358 <iprintf>
 800938c:	e01b      	b.n	80093c6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009394:	f003 0304 	and.w	r3, r3, #4
 8009398:	2b00      	cmp	r3, #0
 800939a:	d114      	bne.n	80093c6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093a2:	f043 0304 	orr.w	r3, r3, #4
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80093ae:	2103      	movs	r1, #3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7ff ff6b 	bl	800928c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	69db      	ldr	r3, [r3, #28]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d003      	beq.n	80093c6 <netif_set_link_up+0x56>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	69db      	ldr	r3, [r3, #28]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	0801370c 	.word	0x0801370c
 80093d0:	080138f4 	.word	0x080138f4
 80093d4:	0801375c 	.word	0x0801375c

080093d8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d107      	bne.n	80093f6 <netif_set_link_down+0x1e>
 80093e6:	4b11      	ldr	r3, [pc, #68]	; (800942c <netif_set_link_down+0x54>)
 80093e8:	f240 4206 	movw	r2, #1030	; 0x406
 80093ec:	4910      	ldr	r1, [pc, #64]	; (8009430 <netif_set_link_down+0x58>)
 80093ee:	4811      	ldr	r0, [pc, #68]	; (8009434 <netif_set_link_down+0x5c>)
 80093f0:	f008 ffb2 	bl	8012358 <iprintf>
 80093f4:	e017      	b.n	8009426 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093fc:	f003 0304 	and.w	r3, r3, #4
 8009400:	2b00      	cmp	r3, #0
 8009402:	d010      	beq.n	8009426 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800940a:	f023 0304 	bic.w	r3, r3, #4
 800940e:	b2da      	uxtb	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <netif_set_link_down+0x4e>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	69db      	ldr	r3, [r3, #28]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	0801370c 	.word	0x0801370c
 8009430:	08013918 	.word	0x08013918
 8009434:	0801375c 	.word	0x0801375c

08009438 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	61da      	str	r2, [r3, #28]
  }
}
 800944e:	bf00      	nop
 8009450:	370c      	adds	r7, #12
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr

0800945a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800945a:	b480      	push	{r7}
 800945c:	b085      	sub	sp, #20
 800945e:	af00      	add	r7, sp, #0
 8009460:	60f8      	str	r0, [r7, #12]
 8009462:	60b9      	str	r1, [r7, #8]
 8009464:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009466:	f06f 030b 	mvn.w	r3, #11
}
 800946a:	4618      	mov	r0, r3
 800946c:	3714      	adds	r7, #20
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
	...

08009478 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	4603      	mov	r3, r0
 8009480:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009482:	79fb      	ldrb	r3, [r7, #7]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d013      	beq.n	80094b0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009488:	4b0d      	ldr	r3, [pc, #52]	; (80094c0 <netif_get_by_index+0x48>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	60fb      	str	r3, [r7, #12]
 800948e:	e00c      	b.n	80094aa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009496:	3301      	adds	r3, #1
 8009498:	b2db      	uxtb	r3, r3
 800949a:	79fa      	ldrb	r2, [r7, #7]
 800949c:	429a      	cmp	r2, r3
 800949e:	d101      	bne.n	80094a4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	e006      	b.n	80094b2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	60fb      	str	r3, [r7, #12]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1ef      	bne.n	8009490 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	2000f048 	.word	0x2000f048

080094c4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80094ca:	f008 fe27 	bl	801211c <sys_arch_protect>
 80094ce:	6038      	str	r0, [r7, #0]
 80094d0:	4b0d      	ldr	r3, [pc, #52]	; (8009508 <pbuf_free_ooseq+0x44>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	701a      	strb	r2, [r3, #0]
 80094d6:	6838      	ldr	r0, [r7, #0]
 80094d8:	f008 fe2e 	bl	8012138 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80094dc:	4b0b      	ldr	r3, [pc, #44]	; (800950c <pbuf_free_ooseq+0x48>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	607b      	str	r3, [r7, #4]
 80094e2:	e00a      	b.n	80094fa <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d003      	beq.n	80094f4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f002 f971 	bl	800b7d4 <tcp_free_ooseq>
      return;
 80094f2:	e005      	b.n	8009500 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	607b      	str	r3, [r7, #4]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1f1      	bne.n	80094e4 <pbuf_free_ooseq+0x20>
    }
  }
}
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	2000f051 	.word	0x2000f051
 800950c:	2000f060 	.word	0x2000f060

08009510 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8009518:	f7ff ffd4 	bl	80094c4 <pbuf_free_ooseq>
}
 800951c:	bf00      	nop
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800952a:	f008 fdf7 	bl	801211c <sys_arch_protect>
 800952e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8009530:	4b0f      	ldr	r3, [pc, #60]	; (8009570 <pbuf_pool_is_empty+0x4c>)
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8009536:	4b0e      	ldr	r3, [pc, #56]	; (8009570 <pbuf_pool_is_empty+0x4c>)
 8009538:	2201      	movs	r2, #1
 800953a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f008 fdfb 	bl	8012138 <sys_arch_unprotect>

  if (!queued) {
 8009542:	78fb      	ldrb	r3, [r7, #3]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10f      	bne.n	8009568 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8009548:	2100      	movs	r1, #0
 800954a:	480a      	ldr	r0, [pc, #40]	; (8009574 <pbuf_pool_is_empty+0x50>)
 800954c:	f7fe fea6 	bl	800829c <tcpip_try_callback>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d008      	beq.n	8009568 <pbuf_pool_is_empty+0x44>
 8009556:	f008 fde1 	bl	801211c <sys_arch_protect>
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	4b04      	ldr	r3, [pc, #16]	; (8009570 <pbuf_pool_is_empty+0x4c>)
 800955e:	2200      	movs	r2, #0
 8009560:	701a      	strb	r2, [r3, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f008 fde8 	bl	8012138 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009568:	bf00      	nop
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	2000f051 	.word	0x2000f051
 8009574:	08009511 	.word	0x08009511

08009578 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009578:	b480      	push	{r7}
 800957a:	b085      	sub	sp, #20
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	4611      	mov	r1, r2
 8009584:	461a      	mov	r2, r3
 8009586:	460b      	mov	r3, r1
 8009588:	80fb      	strh	r3, [r7, #6]
 800958a:	4613      	mov	r3, r2
 800958c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	68ba      	ldr	r2, [r7, #8]
 8009598:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	88fa      	ldrh	r2, [r7, #6]
 800959e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	88ba      	ldrh	r2, [r7, #4]
 80095a4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80095a6:	8b3b      	ldrh	r3, [r7, #24]
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	7f3a      	ldrb	r2, [r7, #28]
 80095b2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2201      	movs	r2, #1
 80095b8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	73da      	strb	r2, [r3, #15]
}
 80095c0:	bf00      	nop
 80095c2:	3714      	adds	r7, #20
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08c      	sub	sp, #48	; 0x30
 80095d0:	af02      	add	r7, sp, #8
 80095d2:	4603      	mov	r3, r0
 80095d4:	71fb      	strb	r3, [r7, #7]
 80095d6:	460b      	mov	r3, r1
 80095d8:	80bb      	strh	r3, [r7, #4]
 80095da:	4613      	mov	r3, r2
 80095dc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80095de:	79fb      	ldrb	r3, [r7, #7]
 80095e0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80095e2:	887b      	ldrh	r3, [r7, #2]
 80095e4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80095e8:	d07f      	beq.n	80096ea <pbuf_alloc+0x11e>
 80095ea:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80095ee:	f300 80c8 	bgt.w	8009782 <pbuf_alloc+0x1b6>
 80095f2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80095f6:	d010      	beq.n	800961a <pbuf_alloc+0x4e>
 80095f8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80095fc:	f300 80c1 	bgt.w	8009782 <pbuf_alloc+0x1b6>
 8009600:	2b01      	cmp	r3, #1
 8009602:	d002      	beq.n	800960a <pbuf_alloc+0x3e>
 8009604:	2b41      	cmp	r3, #65	; 0x41
 8009606:	f040 80bc 	bne.w	8009782 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800960a:	887a      	ldrh	r2, [r7, #2]
 800960c:	88bb      	ldrh	r3, [r7, #4]
 800960e:	4619      	mov	r1, r3
 8009610:	2000      	movs	r0, #0
 8009612:	f000 f8d1 	bl	80097b8 <pbuf_alloc_reference>
 8009616:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8009618:	e0bd      	b.n	8009796 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800961a:	2300      	movs	r3, #0
 800961c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800961e:	2300      	movs	r3, #0
 8009620:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009622:	88bb      	ldrh	r3, [r7, #4]
 8009624:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009626:	200c      	movs	r0, #12
 8009628:	f7ff fb9a 	bl	8008d60 <memp_malloc>
 800962c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d109      	bne.n	8009648 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009634:	f7ff ff76 	bl	8009524 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963a:	2b00      	cmp	r3, #0
 800963c:	d002      	beq.n	8009644 <pbuf_alloc+0x78>
            pbuf_free(p);
 800963e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009640:	f000 faa8 	bl	8009b94 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009644:	2300      	movs	r3, #0
 8009646:	e0a7      	b.n	8009798 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009648:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800964a:	3303      	adds	r3, #3
 800964c:	b29b      	uxth	r3, r3
 800964e:	f023 0303 	bic.w	r3, r3, #3
 8009652:	b29b      	uxth	r3, r3
 8009654:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8009658:	b29b      	uxth	r3, r3
 800965a:	8b7a      	ldrh	r2, [r7, #26]
 800965c:	4293      	cmp	r3, r2
 800965e:	bf28      	it	cs
 8009660:	4613      	movcs	r3, r2
 8009662:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009664:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009666:	3310      	adds	r3, #16
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	4413      	add	r3, r2
 800966c:	3303      	adds	r3, #3
 800966e:	f023 0303 	bic.w	r3, r3, #3
 8009672:	4618      	mov	r0, r3
 8009674:	89f9      	ldrh	r1, [r7, #14]
 8009676:	8b7a      	ldrh	r2, [r7, #26]
 8009678:	2300      	movs	r3, #0
 800967a:	9301      	str	r3, [sp, #4]
 800967c:	887b      	ldrh	r3, [r7, #2]
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	460b      	mov	r3, r1
 8009682:	4601      	mov	r1, r0
 8009684:	6938      	ldr	r0, [r7, #16]
 8009686:	f7ff ff77 	bl	8009578 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	f003 0303 	and.w	r3, r3, #3
 8009692:	2b00      	cmp	r3, #0
 8009694:	d006      	beq.n	80096a4 <pbuf_alloc+0xd8>
 8009696:	4b42      	ldr	r3, [pc, #264]	; (80097a0 <pbuf_alloc+0x1d4>)
 8009698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800969c:	4941      	ldr	r1, [pc, #260]	; (80097a4 <pbuf_alloc+0x1d8>)
 800969e:	4842      	ldr	r0, [pc, #264]	; (80097a8 <pbuf_alloc+0x1dc>)
 80096a0:	f008 fe5a 	bl	8012358 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80096a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80096a6:	3303      	adds	r3, #3
 80096a8:	f023 0303 	bic.w	r3, r3, #3
 80096ac:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80096b0:	d106      	bne.n	80096c0 <pbuf_alloc+0xf4>
 80096b2:	4b3b      	ldr	r3, [pc, #236]	; (80097a0 <pbuf_alloc+0x1d4>)
 80096b4:	f44f 7281 	mov.w	r2, #258	; 0x102
 80096b8:	493c      	ldr	r1, [pc, #240]	; (80097ac <pbuf_alloc+0x1e0>)
 80096ba:	483b      	ldr	r0, [pc, #236]	; (80097a8 <pbuf_alloc+0x1dc>)
 80096bc:	f008 fe4c 	bl	8012358 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80096c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d102      	bne.n	80096cc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	627b      	str	r3, [r7, #36]	; 0x24
 80096ca:	e002      	b.n	80096d2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	693a      	ldr	r2, [r7, #16]
 80096d0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80096d6:	8b7a      	ldrh	r2, [r7, #26]
 80096d8:	89fb      	ldrh	r3, [r7, #14]
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80096de:	2300      	movs	r3, #0
 80096e0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80096e2:	8b7b      	ldrh	r3, [r7, #26]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d19e      	bne.n	8009626 <pbuf_alloc+0x5a>
      break;
 80096e8:	e055      	b.n	8009796 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80096ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80096ec:	3303      	adds	r3, #3
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	f023 0303 	bic.w	r3, r3, #3
 80096f4:	b29a      	uxth	r2, r3
 80096f6:	88bb      	ldrh	r3, [r7, #4]
 80096f8:	3303      	adds	r3, #3
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	f023 0303 	bic.w	r3, r3, #3
 8009700:	b29b      	uxth	r3, r3
 8009702:	4413      	add	r3, r2
 8009704:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009706:	8b3b      	ldrh	r3, [r7, #24]
 8009708:	3310      	adds	r3, #16
 800970a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800970c:	8b3a      	ldrh	r2, [r7, #24]
 800970e:	88bb      	ldrh	r3, [r7, #4]
 8009710:	3303      	adds	r3, #3
 8009712:	f023 0303 	bic.w	r3, r3, #3
 8009716:	429a      	cmp	r2, r3
 8009718:	d306      	bcc.n	8009728 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800971a:	8afa      	ldrh	r2, [r7, #22]
 800971c:	88bb      	ldrh	r3, [r7, #4]
 800971e:	3303      	adds	r3, #3
 8009720:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009724:	429a      	cmp	r2, r3
 8009726:	d201      	bcs.n	800972c <pbuf_alloc+0x160>
        return NULL;
 8009728:	2300      	movs	r3, #0
 800972a:	e035      	b.n	8009798 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800972c:	8afb      	ldrh	r3, [r7, #22]
 800972e:	4618      	mov	r0, r3
 8009730:	f7ff f972 	bl	8008a18 <mem_malloc>
 8009734:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8009736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009738:	2b00      	cmp	r3, #0
 800973a:	d101      	bne.n	8009740 <pbuf_alloc+0x174>
        return NULL;
 800973c:	2300      	movs	r3, #0
 800973e:	e02b      	b.n	8009798 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009740:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009742:	3310      	adds	r3, #16
 8009744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009746:	4413      	add	r3, r2
 8009748:	3303      	adds	r3, #3
 800974a:	f023 0303 	bic.w	r3, r3, #3
 800974e:	4618      	mov	r0, r3
 8009750:	88b9      	ldrh	r1, [r7, #4]
 8009752:	88ba      	ldrh	r2, [r7, #4]
 8009754:	2300      	movs	r3, #0
 8009756:	9301      	str	r3, [sp, #4]
 8009758:	887b      	ldrh	r3, [r7, #2]
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	460b      	mov	r3, r1
 800975e:	4601      	mov	r1, r0
 8009760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009762:	f7ff ff09 	bl	8009578 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	f003 0303 	and.w	r3, r3, #3
 800976e:	2b00      	cmp	r3, #0
 8009770:	d010      	beq.n	8009794 <pbuf_alloc+0x1c8>
 8009772:	4b0b      	ldr	r3, [pc, #44]	; (80097a0 <pbuf_alloc+0x1d4>)
 8009774:	f44f 7291 	mov.w	r2, #290	; 0x122
 8009778:	490d      	ldr	r1, [pc, #52]	; (80097b0 <pbuf_alloc+0x1e4>)
 800977a:	480b      	ldr	r0, [pc, #44]	; (80097a8 <pbuf_alloc+0x1dc>)
 800977c:	f008 fdec 	bl	8012358 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009780:	e008      	b.n	8009794 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009782:	4b07      	ldr	r3, [pc, #28]	; (80097a0 <pbuf_alloc+0x1d4>)
 8009784:	f240 1227 	movw	r2, #295	; 0x127
 8009788:	490a      	ldr	r1, [pc, #40]	; (80097b4 <pbuf_alloc+0x1e8>)
 800978a:	4807      	ldr	r0, [pc, #28]	; (80097a8 <pbuf_alloc+0x1dc>)
 800978c:	f008 fde4 	bl	8012358 <iprintf>
      return NULL;
 8009790:	2300      	movs	r3, #0
 8009792:	e001      	b.n	8009798 <pbuf_alloc+0x1cc>
      break;
 8009794:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009798:	4618      	mov	r0, r3
 800979a:	3728      	adds	r7, #40	; 0x28
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	0801393c 	.word	0x0801393c
 80097a4:	0801396c 	.word	0x0801396c
 80097a8:	0801399c 	.word	0x0801399c
 80097ac:	080139c4 	.word	0x080139c4
 80097b0:	080139f8 	.word	0x080139f8
 80097b4:	08013a24 	.word	0x08013a24

080097b8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b086      	sub	sp, #24
 80097bc:	af02      	add	r7, sp, #8
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	460b      	mov	r3, r1
 80097c2:	807b      	strh	r3, [r7, #2]
 80097c4:	4613      	mov	r3, r2
 80097c6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80097c8:	883b      	ldrh	r3, [r7, #0]
 80097ca:	2b41      	cmp	r3, #65	; 0x41
 80097cc:	d009      	beq.n	80097e2 <pbuf_alloc_reference+0x2a>
 80097ce:	883b      	ldrh	r3, [r7, #0]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d006      	beq.n	80097e2 <pbuf_alloc_reference+0x2a>
 80097d4:	4b0f      	ldr	r3, [pc, #60]	; (8009814 <pbuf_alloc_reference+0x5c>)
 80097d6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80097da:	490f      	ldr	r1, [pc, #60]	; (8009818 <pbuf_alloc_reference+0x60>)
 80097dc:	480f      	ldr	r0, [pc, #60]	; (800981c <pbuf_alloc_reference+0x64>)
 80097de:	f008 fdbb 	bl	8012358 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80097e2:	200b      	movs	r0, #11
 80097e4:	f7ff fabc 	bl	8008d60 <memp_malloc>
 80097e8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d101      	bne.n	80097f4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80097f0:	2300      	movs	r3, #0
 80097f2:	e00b      	b.n	800980c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80097f4:	8879      	ldrh	r1, [r7, #2]
 80097f6:	887a      	ldrh	r2, [r7, #2]
 80097f8:	2300      	movs	r3, #0
 80097fa:	9301      	str	r3, [sp, #4]
 80097fc:	883b      	ldrh	r3, [r7, #0]
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	460b      	mov	r3, r1
 8009802:	6879      	ldr	r1, [r7, #4]
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f7ff feb7 	bl	8009578 <pbuf_init_alloced_pbuf>
  return p;
 800980a:	68fb      	ldr	r3, [r7, #12]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	0801393c 	.word	0x0801393c
 8009818:	08013a40 	.word	0x08013a40
 800981c:	0801399c 	.word	0x0801399c

08009820 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b088      	sub	sp, #32
 8009824:	af02      	add	r7, sp, #8
 8009826:	607b      	str	r3, [r7, #4]
 8009828:	4603      	mov	r3, r0
 800982a:	73fb      	strb	r3, [r7, #15]
 800982c:	460b      	mov	r3, r1
 800982e:	81bb      	strh	r3, [r7, #12]
 8009830:	4613      	mov	r3, r2
 8009832:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009834:	7bfb      	ldrb	r3, [r7, #15]
 8009836:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009838:	8a7b      	ldrh	r3, [r7, #18]
 800983a:	3303      	adds	r3, #3
 800983c:	f023 0203 	bic.w	r2, r3, #3
 8009840:	89bb      	ldrh	r3, [r7, #12]
 8009842:	441a      	add	r2, r3
 8009844:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009846:	429a      	cmp	r2, r3
 8009848:	d901      	bls.n	800984e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800984a:	2300      	movs	r3, #0
 800984c:	e018      	b.n	8009880 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800984e:	6a3b      	ldr	r3, [r7, #32]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d007      	beq.n	8009864 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009854:	8a7b      	ldrh	r3, [r7, #18]
 8009856:	3303      	adds	r3, #3
 8009858:	f023 0303 	bic.w	r3, r3, #3
 800985c:	6a3a      	ldr	r2, [r7, #32]
 800985e:	4413      	add	r3, r2
 8009860:	617b      	str	r3, [r7, #20]
 8009862:	e001      	b.n	8009868 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009864:	2300      	movs	r3, #0
 8009866:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	89b9      	ldrh	r1, [r7, #12]
 800986c:	89ba      	ldrh	r2, [r7, #12]
 800986e:	2302      	movs	r3, #2
 8009870:	9301      	str	r3, [sp, #4]
 8009872:	897b      	ldrh	r3, [r7, #10]
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	460b      	mov	r3, r1
 8009878:	6979      	ldr	r1, [r7, #20]
 800987a:	f7ff fe7d 	bl	8009578 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800987e:	687b      	ldr	r3, [r7, #4]
}
 8009880:	4618      	mov	r0, r3
 8009882:	3718      	adds	r7, #24
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	460b      	mov	r3, r1
 8009892:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d106      	bne.n	80098a8 <pbuf_realloc+0x20>
 800989a:	4b3a      	ldr	r3, [pc, #232]	; (8009984 <pbuf_realloc+0xfc>)
 800989c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80098a0:	4939      	ldr	r1, [pc, #228]	; (8009988 <pbuf_realloc+0x100>)
 80098a2:	483a      	ldr	r0, [pc, #232]	; (800998c <pbuf_realloc+0x104>)
 80098a4:	f008 fd58 	bl	8012358 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	891b      	ldrh	r3, [r3, #8]
 80098ac:	887a      	ldrh	r2, [r7, #2]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d263      	bcs.n	800997a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	891a      	ldrh	r2, [r3, #8]
 80098b6:	887b      	ldrh	r3, [r7, #2]
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80098bc:	887b      	ldrh	r3, [r7, #2]
 80098be:	817b      	strh	r3, [r7, #10]
  q = p;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80098c4:	e018      	b.n	80098f8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	895b      	ldrh	r3, [r3, #10]
 80098ca:	897a      	ldrh	r2, [r7, #10]
 80098cc:	1ad3      	subs	r3, r2, r3
 80098ce:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	891a      	ldrh	r2, [r3, #8]
 80098d4:	893b      	ldrh	r3, [r7, #8]
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	b29a      	uxth	r2, r3
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d106      	bne.n	80098f8 <pbuf_realloc+0x70>
 80098ea:	4b26      	ldr	r3, [pc, #152]	; (8009984 <pbuf_realloc+0xfc>)
 80098ec:	f240 12af 	movw	r2, #431	; 0x1af
 80098f0:	4927      	ldr	r1, [pc, #156]	; (8009990 <pbuf_realloc+0x108>)
 80098f2:	4826      	ldr	r0, [pc, #152]	; (800998c <pbuf_realloc+0x104>)
 80098f4:	f008 fd30 	bl	8012358 <iprintf>
  while (rem_len > q->len) {
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	895b      	ldrh	r3, [r3, #10]
 80098fc:	897a      	ldrh	r2, [r7, #10]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d8e1      	bhi.n	80098c6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	7b1b      	ldrb	r3, [r3, #12]
 8009906:	f003 030f 	and.w	r3, r3, #15
 800990a:	2b00      	cmp	r3, #0
 800990c:	d121      	bne.n	8009952 <pbuf_realloc+0xca>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	895b      	ldrh	r3, [r3, #10]
 8009912:	897a      	ldrh	r2, [r7, #10]
 8009914:	429a      	cmp	r2, r3
 8009916:	d01c      	beq.n	8009952 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	7b5b      	ldrb	r3, [r3, #13]
 800991c:	f003 0302 	and.w	r3, r3, #2
 8009920:	2b00      	cmp	r3, #0
 8009922:	d116      	bne.n	8009952 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	685a      	ldr	r2, [r3, #4]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	b29a      	uxth	r2, r3
 800992e:	897b      	ldrh	r3, [r7, #10]
 8009930:	4413      	add	r3, r2
 8009932:	b29b      	uxth	r3, r3
 8009934:	4619      	mov	r1, r3
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f7fe ff64 	bl	8008804 <mem_trim>
 800993c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d106      	bne.n	8009952 <pbuf_realloc+0xca>
 8009944:	4b0f      	ldr	r3, [pc, #60]	; (8009984 <pbuf_realloc+0xfc>)
 8009946:	f240 12bd 	movw	r2, #445	; 0x1bd
 800994a:	4912      	ldr	r1, [pc, #72]	; (8009994 <pbuf_realloc+0x10c>)
 800994c:	480f      	ldr	r0, [pc, #60]	; (800998c <pbuf_realloc+0x104>)
 800994e:	f008 fd03 	bl	8012358 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	897a      	ldrh	r2, [r7, #10]
 8009956:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	895a      	ldrh	r2, [r3, #10]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d004      	beq.n	8009972 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4618      	mov	r0, r3
 800996e:	f000 f911 	bl	8009b94 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2200      	movs	r2, #0
 8009976:	601a      	str	r2, [r3, #0]
 8009978:	e000      	b.n	800997c <pbuf_realloc+0xf4>
    return;
 800997a:	bf00      	nop

}
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	0801393c 	.word	0x0801393c
 8009988:	08013a54 	.word	0x08013a54
 800998c:	0801399c 	.word	0x0801399c
 8009990:	08013a6c 	.word	0x08013a6c
 8009994:	08013a84 	.word	0x08013a84

08009998 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b086      	sub	sp, #24
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	4613      	mov	r3, r2
 80099a4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d106      	bne.n	80099ba <pbuf_add_header_impl+0x22>
 80099ac:	4b2b      	ldr	r3, [pc, #172]	; (8009a5c <pbuf_add_header_impl+0xc4>)
 80099ae:	f240 12df 	movw	r2, #479	; 0x1df
 80099b2:	492b      	ldr	r1, [pc, #172]	; (8009a60 <pbuf_add_header_impl+0xc8>)
 80099b4:	482b      	ldr	r0, [pc, #172]	; (8009a64 <pbuf_add_header_impl+0xcc>)
 80099b6:	f008 fccf 	bl	8012358 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d003      	beq.n	80099c8 <pbuf_add_header_impl+0x30>
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099c6:	d301      	bcc.n	80099cc <pbuf_add_header_impl+0x34>
    return 1;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e043      	b.n	8009a54 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d101      	bne.n	80099d6 <pbuf_add_header_impl+0x3e>
    return 0;
 80099d2:	2300      	movs	r3, #0
 80099d4:	e03e      	b.n	8009a54 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	891a      	ldrh	r2, [r3, #8]
 80099de:	8a7b      	ldrh	r3, [r7, #18]
 80099e0:	4413      	add	r3, r2
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	8a7a      	ldrh	r2, [r7, #18]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d901      	bls.n	80099ee <pbuf_add_header_impl+0x56>
    return 1;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e032      	b.n	8009a54 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	7b1b      	ldrb	r3, [r3, #12]
 80099f2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80099f4:	8a3b      	ldrh	r3, [r7, #16]
 80099f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00c      	beq.n	8009a18 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	685a      	ldr	r2, [r3, #4]
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	425b      	negs	r3, r3
 8009a06:	4413      	add	r3, r2
 8009a08:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	3310      	adds	r3, #16
 8009a0e:	697a      	ldr	r2, [r7, #20]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d20d      	bcs.n	8009a30 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009a14:	2301      	movs	r3, #1
 8009a16:	e01d      	b.n	8009a54 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009a18:	79fb      	ldrb	r3, [r7, #7]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d006      	beq.n	8009a2c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	685a      	ldr	r2, [r3, #4]
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	425b      	negs	r3, r3
 8009a26:	4413      	add	r3, r2
 8009a28:	617b      	str	r3, [r7, #20]
 8009a2a:	e001      	b.n	8009a30 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e011      	b.n	8009a54 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	697a      	ldr	r2, [r7, #20]
 8009a34:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	895a      	ldrh	r2, [r3, #10]
 8009a3a:	8a7b      	ldrh	r3, [r7, #18]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	891a      	ldrh	r2, [r3, #8]
 8009a48:	8a7b      	ldrh	r3, [r7, #18]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	b29a      	uxth	r2, r3
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	811a      	strh	r2, [r3, #8]


  return 0;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3718      	adds	r7, #24
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	0801393c 	.word	0x0801393c
 8009a60:	08013aa0 	.word	0x08013aa0
 8009a64:	0801399c 	.word	0x0801399c

08009a68 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009a72:	2200      	movs	r2, #0
 8009a74:	6839      	ldr	r1, [r7, #0]
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7ff ff8e 	bl	8009998 <pbuf_add_header_impl>
 8009a7c:	4603      	mov	r3, r0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
	...

08009a88 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d106      	bne.n	8009aa6 <pbuf_remove_header+0x1e>
 8009a98:	4b20      	ldr	r3, [pc, #128]	; (8009b1c <pbuf_remove_header+0x94>)
 8009a9a:	f240 224b 	movw	r2, #587	; 0x24b
 8009a9e:	4920      	ldr	r1, [pc, #128]	; (8009b20 <pbuf_remove_header+0x98>)
 8009aa0:	4820      	ldr	r0, [pc, #128]	; (8009b24 <pbuf_remove_header+0x9c>)
 8009aa2:	f008 fc59 	bl	8012358 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d003      	beq.n	8009ab4 <pbuf_remove_header+0x2c>
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ab2:	d301      	bcc.n	8009ab8 <pbuf_remove_header+0x30>
    return 1;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e02c      	b.n	8009b12 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <pbuf_remove_header+0x3a>
    return 0;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	e027      	b.n	8009b12 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	895b      	ldrh	r3, [r3, #10]
 8009aca:	89fa      	ldrh	r2, [r7, #14]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d908      	bls.n	8009ae2 <pbuf_remove_header+0x5a>
 8009ad0:	4b12      	ldr	r3, [pc, #72]	; (8009b1c <pbuf_remove_header+0x94>)
 8009ad2:	f240 2255 	movw	r2, #597	; 0x255
 8009ad6:	4914      	ldr	r1, [pc, #80]	; (8009b28 <pbuf_remove_header+0xa0>)
 8009ad8:	4812      	ldr	r0, [pc, #72]	; (8009b24 <pbuf_remove_header+0x9c>)
 8009ada:	f008 fc3d 	bl	8012358 <iprintf>
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e017      	b.n	8009b12 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	441a      	add	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	895a      	ldrh	r2, [r3, #10]
 8009af8:	89fb      	ldrh	r3, [r7, #14]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	891a      	ldrh	r2, [r3, #8]
 8009b06:	89fb      	ldrh	r3, [r7, #14]
 8009b08:	1ad3      	subs	r3, r2, r3
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	0801393c 	.word	0x0801393c
 8009b20:	08013aa0 	.word	0x08013aa0
 8009b24:	0801399c 	.word	0x0801399c
 8009b28:	08013aac 	.word	0x08013aac

08009b2c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	460b      	mov	r3, r1
 8009b36:	807b      	strh	r3, [r7, #2]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009b3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	da08      	bge.n	8009b56 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009b44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009b48:	425b      	negs	r3, r3
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f7ff ff9b 	bl	8009a88 <pbuf_remove_header>
 8009b52:	4603      	mov	r3, r0
 8009b54:	e007      	b.n	8009b66 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009b56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009b5a:	787a      	ldrb	r2, [r7, #1]
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7ff ff1a 	bl	8009998 <pbuf_add_header_impl>
 8009b64:	4603      	mov	r3, r0
  }
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b082      	sub	sp, #8
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	460b      	mov	r3, r1
 8009b78:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009b7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7ff ffd2 	bl	8009b2c <pbuf_header_impl>
 8009b88:	4603      	mov	r3, r0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
	...

08009b94 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b088      	sub	sp, #32
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10b      	bne.n	8009bba <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d106      	bne.n	8009bb6 <pbuf_free+0x22>
 8009ba8:	4b3b      	ldr	r3, [pc, #236]	; (8009c98 <pbuf_free+0x104>)
 8009baa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009bae:	493b      	ldr	r1, [pc, #236]	; (8009c9c <pbuf_free+0x108>)
 8009bb0:	483b      	ldr	r0, [pc, #236]	; (8009ca0 <pbuf_free+0x10c>)
 8009bb2:	f008 fbd1 	bl	8012358 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	e069      	b.n	8009c8e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009bbe:	e062      	b.n	8009c86 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8009bc0:	f008 faac 	bl	801211c <sys_arch_protect>
 8009bc4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	7b9b      	ldrb	r3, [r3, #14]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d106      	bne.n	8009bdc <pbuf_free+0x48>
 8009bce:	4b32      	ldr	r3, [pc, #200]	; (8009c98 <pbuf_free+0x104>)
 8009bd0:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009bd4:	4933      	ldr	r1, [pc, #204]	; (8009ca4 <pbuf_free+0x110>)
 8009bd6:	4832      	ldr	r0, [pc, #200]	; (8009ca0 <pbuf_free+0x10c>)
 8009bd8:	f008 fbbe 	bl	8012358 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	7b9b      	ldrb	r3, [r3, #14]
 8009be0:	3b01      	subs	r3, #1
 8009be2:	b2da      	uxtb	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	739a      	strb	r2, [r3, #14]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	7b9b      	ldrb	r3, [r3, #14]
 8009bec:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8009bee:	69b8      	ldr	r0, [r7, #24]
 8009bf0:	f008 faa2 	bl	8012138 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009bf4:	7dfb      	ldrb	r3, [r7, #23]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d143      	bne.n	8009c82 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	7b1b      	ldrb	r3, [r3, #12]
 8009c04:	f003 030f 	and.w	r3, r3, #15
 8009c08:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	7b5b      	ldrb	r3, [r3, #13]
 8009c0e:	f003 0302 	and.w	r3, r3, #2
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d011      	beq.n	8009c3a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d106      	bne.n	8009c30 <pbuf_free+0x9c>
 8009c22:	4b1d      	ldr	r3, [pc, #116]	; (8009c98 <pbuf_free+0x104>)
 8009c24:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009c28:	491f      	ldr	r1, [pc, #124]	; (8009ca8 <pbuf_free+0x114>)
 8009c2a:	481d      	ldr	r0, [pc, #116]	; (8009ca0 <pbuf_free+0x10c>)
 8009c2c:	f008 fb94 	bl	8012358 <iprintf>
        pc->custom_free_function(p);
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	4798      	blx	r3
 8009c38:	e01d      	b.n	8009c76 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009c3a:	7bfb      	ldrb	r3, [r7, #15]
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	d104      	bne.n	8009c4a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8009c40:	6879      	ldr	r1, [r7, #4]
 8009c42:	200c      	movs	r0, #12
 8009c44:	f7ff f902 	bl	8008e4c <memp_free>
 8009c48:	e015      	b.n	8009c76 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009c4a:	7bfb      	ldrb	r3, [r7, #15]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d104      	bne.n	8009c5a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8009c50:	6879      	ldr	r1, [r7, #4]
 8009c52:	200b      	movs	r0, #11
 8009c54:	f7ff f8fa 	bl	8008e4c <memp_free>
 8009c58:	e00d      	b.n	8009c76 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009c5a:	7bfb      	ldrb	r3, [r7, #15]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d103      	bne.n	8009c68 <pbuf_free+0xd4>
          mem_free(p);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f7fe fd3f 	bl	80086e4 <mem_free>
 8009c66:	e006      	b.n	8009c76 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009c68:	4b0b      	ldr	r3, [pc, #44]	; (8009c98 <pbuf_free+0x104>)
 8009c6a:	f240 320f 	movw	r2, #783	; 0x30f
 8009c6e:	490f      	ldr	r1, [pc, #60]	; (8009cac <pbuf_free+0x118>)
 8009c70:	480b      	ldr	r0, [pc, #44]	; (8009ca0 <pbuf_free+0x10c>)
 8009c72:	f008 fb71 	bl	8012358 <iprintf>
        }
      }
      count++;
 8009c76:	7ffb      	ldrb	r3, [r7, #31]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	607b      	str	r3, [r7, #4]
 8009c80:	e001      	b.n	8009c86 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009c82:	2300      	movs	r3, #0
 8009c84:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d199      	bne.n	8009bc0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009c8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3720      	adds	r7, #32
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	0801393c 	.word	0x0801393c
 8009c9c:	08013aa0 	.word	0x08013aa0
 8009ca0:	0801399c 	.word	0x0801399c
 8009ca4:	08013acc 	.word	0x08013acc
 8009ca8:	08013ae4 	.word	0x08013ae4
 8009cac:	08013b08 	.word	0x08013b08

08009cb0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009cbc:	e005      	b.n	8009cca <pbuf_clen+0x1a>
    ++len;
 8009cbe:	89fb      	ldrh	r3, [r7, #14]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1f6      	bne.n	8009cbe <pbuf_clen+0xe>
  }
  return len;
 8009cd0:	89fb      	ldrh	r3, [r7, #14]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3714      	adds	r7, #20
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
	...

08009ce0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d016      	beq.n	8009d1c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009cee:	f008 fa15 	bl	801211c <sys_arch_protect>
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	7b9b      	ldrb	r3, [r3, #14]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	b2da      	uxtb	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	739a      	strb	r2, [r3, #14]
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f008 fa19 	bl	8012138 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	7b9b      	ldrb	r3, [r3, #14]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d106      	bne.n	8009d1c <pbuf_ref+0x3c>
 8009d0e:	4b05      	ldr	r3, [pc, #20]	; (8009d24 <pbuf_ref+0x44>)
 8009d10:	f240 3242 	movw	r2, #834	; 0x342
 8009d14:	4904      	ldr	r1, [pc, #16]	; (8009d28 <pbuf_ref+0x48>)
 8009d16:	4805      	ldr	r0, [pc, #20]	; (8009d2c <pbuf_ref+0x4c>)
 8009d18:	f008 fb1e 	bl	8012358 <iprintf>
  }
}
 8009d1c:	bf00      	nop
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	0801393c 	.word	0x0801393c
 8009d28:	08013b1c 	.word	0x08013b1c
 8009d2c:	0801399c 	.word	0x0801399c

08009d30 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d002      	beq.n	8009d46 <pbuf_cat+0x16>
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d107      	bne.n	8009d56 <pbuf_cat+0x26>
 8009d46:	4b20      	ldr	r3, [pc, #128]	; (8009dc8 <pbuf_cat+0x98>)
 8009d48:	f240 3259 	movw	r2, #857	; 0x359
 8009d4c:	491f      	ldr	r1, [pc, #124]	; (8009dcc <pbuf_cat+0x9c>)
 8009d4e:	4820      	ldr	r0, [pc, #128]	; (8009dd0 <pbuf_cat+0xa0>)
 8009d50:	f008 fb02 	bl	8012358 <iprintf>
 8009d54:	e034      	b.n	8009dc0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	60fb      	str	r3, [r7, #12]
 8009d5a:	e00a      	b.n	8009d72 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	891a      	ldrh	r2, [r3, #8]
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	891b      	ldrh	r3, [r3, #8]
 8009d64:	4413      	add	r3, r2
 8009d66:	b29a      	uxth	r2, r3
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	60fb      	str	r3, [r7, #12]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1f0      	bne.n	8009d5c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	891a      	ldrh	r2, [r3, #8]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	895b      	ldrh	r3, [r3, #10]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d006      	beq.n	8009d94 <pbuf_cat+0x64>
 8009d86:	4b10      	ldr	r3, [pc, #64]	; (8009dc8 <pbuf_cat+0x98>)
 8009d88:	f240 3262 	movw	r2, #866	; 0x362
 8009d8c:	4911      	ldr	r1, [pc, #68]	; (8009dd4 <pbuf_cat+0xa4>)
 8009d8e:	4810      	ldr	r0, [pc, #64]	; (8009dd0 <pbuf_cat+0xa0>)
 8009d90:	f008 fae2 	bl	8012358 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d006      	beq.n	8009daa <pbuf_cat+0x7a>
 8009d9c:	4b0a      	ldr	r3, [pc, #40]	; (8009dc8 <pbuf_cat+0x98>)
 8009d9e:	f240 3263 	movw	r2, #867	; 0x363
 8009da2:	490d      	ldr	r1, [pc, #52]	; (8009dd8 <pbuf_cat+0xa8>)
 8009da4:	480a      	ldr	r0, [pc, #40]	; (8009dd0 <pbuf_cat+0xa0>)
 8009da6:	f008 fad7 	bl	8012358 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	891a      	ldrh	r2, [r3, #8]
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	891b      	ldrh	r3, [r3, #8]
 8009db2:	4413      	add	r3, r2
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	683a      	ldr	r2, [r7, #0]
 8009dbe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	0801393c 	.word	0x0801393c
 8009dcc:	08013b30 	.word	0x08013b30
 8009dd0:	0801399c 	.word	0x0801399c
 8009dd4:	08013b68 	.word	0x08013b68
 8009dd8:	08013b98 	.word	0x08013b98

08009ddc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009de6:	2300      	movs	r3, #0
 8009de8:	617b      	str	r3, [r7, #20]
 8009dea:	2300      	movs	r3, #0
 8009dec:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d008      	beq.n	8009e06 <pbuf_copy+0x2a>
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d005      	beq.n	8009e06 <pbuf_copy+0x2a>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	891a      	ldrh	r2, [r3, #8]
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	891b      	ldrh	r3, [r3, #8]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d209      	bcs.n	8009e1a <pbuf_copy+0x3e>
 8009e06:	4b57      	ldr	r3, [pc, #348]	; (8009f64 <pbuf_copy+0x188>)
 8009e08:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009e0c:	4956      	ldr	r1, [pc, #344]	; (8009f68 <pbuf_copy+0x18c>)
 8009e0e:	4857      	ldr	r0, [pc, #348]	; (8009f6c <pbuf_copy+0x190>)
 8009e10:	f008 faa2 	bl	8012358 <iprintf>
 8009e14:	f06f 030f 	mvn.w	r3, #15
 8009e18:	e09f      	b.n	8009f5a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	895b      	ldrh	r3, [r3, #10]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	1ad2      	subs	r2, r2, r3
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	895b      	ldrh	r3, [r3, #10]
 8009e28:	4619      	mov	r1, r3
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	1acb      	subs	r3, r1, r3
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d306      	bcc.n	8009e40 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	895b      	ldrh	r3, [r3, #10]
 8009e36:	461a      	mov	r2, r3
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	1ad3      	subs	r3, r2, r3
 8009e3c:	60fb      	str	r3, [r7, #12]
 8009e3e:	e005      	b.n	8009e4c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	895b      	ldrh	r3, [r3, #10]
 8009e44:	461a      	mov	r2, r3
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685a      	ldr	r2, [r3, #4]
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	18d0      	adds	r0, r2, r3
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	685a      	ldr	r2, [r3, #4]
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	4619      	mov	r1, r3
 8009e60:	f008 fbab 	bl	80125ba <memcpy>
    offset_to += len;
 8009e64:	697a      	ldr	r2, [r7, #20]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	4413      	add	r3, r2
 8009e6a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	4413      	add	r3, r2
 8009e72:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	895b      	ldrh	r3, [r3, #10]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d906      	bls.n	8009e8e <pbuf_copy+0xb2>
 8009e80:	4b38      	ldr	r3, [pc, #224]	; (8009f64 <pbuf_copy+0x188>)
 8009e82:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009e86:	493a      	ldr	r1, [pc, #232]	; (8009f70 <pbuf_copy+0x194>)
 8009e88:	4838      	ldr	r0, [pc, #224]	; (8009f6c <pbuf_copy+0x190>)
 8009e8a:	f008 fa65 	bl	8012358 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	895b      	ldrh	r3, [r3, #10]
 8009e92:	461a      	mov	r2, r3
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d906      	bls.n	8009ea8 <pbuf_copy+0xcc>
 8009e9a:	4b32      	ldr	r3, [pc, #200]	; (8009f64 <pbuf_copy+0x188>)
 8009e9c:	f240 32da 	movw	r2, #986	; 0x3da
 8009ea0:	4934      	ldr	r1, [pc, #208]	; (8009f74 <pbuf_copy+0x198>)
 8009ea2:	4832      	ldr	r0, [pc, #200]	; (8009f6c <pbuf_copy+0x190>)
 8009ea4:	f008 fa58 	bl	8012358 <iprintf>
    if (offset_from >= p_from->len) {
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	895b      	ldrh	r3, [r3, #10]
 8009eac:	461a      	mov	r2, r3
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d304      	bcc.n	8009ebe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	895b      	ldrh	r3, [r3, #10]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d114      	bne.n	8009ef4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d10c      	bne.n	8009ef4 <pbuf_copy+0x118>
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d009      	beq.n	8009ef4 <pbuf_copy+0x118>
 8009ee0:	4b20      	ldr	r3, [pc, #128]	; (8009f64 <pbuf_copy+0x188>)
 8009ee2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8009ee6:	4924      	ldr	r1, [pc, #144]	; (8009f78 <pbuf_copy+0x19c>)
 8009ee8:	4820      	ldr	r0, [pc, #128]	; (8009f6c <pbuf_copy+0x190>)
 8009eea:	f008 fa35 	bl	8012358 <iprintf>
 8009eee:	f06f 030f 	mvn.w	r3, #15
 8009ef2:	e032      	b.n	8009f5a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d013      	beq.n	8009f22 <pbuf_copy+0x146>
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	895a      	ldrh	r2, [r3, #10]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	891b      	ldrh	r3, [r3, #8]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d10d      	bne.n	8009f22 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d009      	beq.n	8009f22 <pbuf_copy+0x146>
 8009f0e:	4b15      	ldr	r3, [pc, #84]	; (8009f64 <pbuf_copy+0x188>)
 8009f10:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009f14:	4919      	ldr	r1, [pc, #100]	; (8009f7c <pbuf_copy+0x1a0>)
 8009f16:	4815      	ldr	r0, [pc, #84]	; (8009f6c <pbuf_copy+0x190>)
 8009f18:	f008 fa1e 	bl	8012358 <iprintf>
 8009f1c:	f06f 0305 	mvn.w	r3, #5
 8009f20:	e01b      	b.n	8009f5a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d013      	beq.n	8009f50 <pbuf_copy+0x174>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	895a      	ldrh	r2, [r3, #10]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	891b      	ldrh	r3, [r3, #8]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d10d      	bne.n	8009f50 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d009      	beq.n	8009f50 <pbuf_copy+0x174>
 8009f3c:	4b09      	ldr	r3, [pc, #36]	; (8009f64 <pbuf_copy+0x188>)
 8009f3e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009f42:	490e      	ldr	r1, [pc, #56]	; (8009f7c <pbuf_copy+0x1a0>)
 8009f44:	4809      	ldr	r0, [pc, #36]	; (8009f6c <pbuf_copy+0x190>)
 8009f46:	f008 fa07 	bl	8012358 <iprintf>
 8009f4a:	f06f 0305 	mvn.w	r3, #5
 8009f4e:	e004      	b.n	8009f5a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f47f af61 	bne.w	8009e1a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3718      	adds	r7, #24
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	0801393c 	.word	0x0801393c
 8009f68:	08013be4 	.word	0x08013be4
 8009f6c:	0801399c 	.word	0x0801399c
 8009f70:	08013c14 	.word	0x08013c14
 8009f74:	08013c2c 	.word	0x08013c2c
 8009f78:	08013c48 	.word	0x08013c48
 8009f7c:	08013c58 	.word	0x08013c58

08009f80 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b088      	sub	sp, #32
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	4611      	mov	r1, r2
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	460b      	mov	r3, r1
 8009f90:	80fb      	strh	r3, [r7, #6]
 8009f92:	4613      	mov	r3, r2
 8009f94:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8009f96:	2300      	movs	r3, #0
 8009f98:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d108      	bne.n	8009fb6 <pbuf_copy_partial+0x36>
 8009fa4:	4b2b      	ldr	r3, [pc, #172]	; (800a054 <pbuf_copy_partial+0xd4>)
 8009fa6:	f240 420a 	movw	r2, #1034	; 0x40a
 8009faa:	492b      	ldr	r1, [pc, #172]	; (800a058 <pbuf_copy_partial+0xd8>)
 8009fac:	482b      	ldr	r0, [pc, #172]	; (800a05c <pbuf_copy_partial+0xdc>)
 8009fae:	f008 f9d3 	bl	8012358 <iprintf>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	e04a      	b.n	800a04c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d108      	bne.n	8009fce <pbuf_copy_partial+0x4e>
 8009fbc:	4b25      	ldr	r3, [pc, #148]	; (800a054 <pbuf_copy_partial+0xd4>)
 8009fbe:	f240 420b 	movw	r2, #1035	; 0x40b
 8009fc2:	4927      	ldr	r1, [pc, #156]	; (800a060 <pbuf_copy_partial+0xe0>)
 8009fc4:	4825      	ldr	r0, [pc, #148]	; (800a05c <pbuf_copy_partial+0xdc>)
 8009fc6:	f008 f9c7 	bl	8012358 <iprintf>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	e03e      	b.n	800a04c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	61fb      	str	r3, [r7, #28]
 8009fd2:	e034      	b.n	800a03e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009fd4:	88bb      	ldrh	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00a      	beq.n	8009ff0 <pbuf_copy_partial+0x70>
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	895b      	ldrh	r3, [r3, #10]
 8009fde:	88ba      	ldrh	r2, [r7, #4]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d305      	bcc.n	8009ff0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	895b      	ldrh	r3, [r3, #10]
 8009fe8:	88ba      	ldrh	r2, [r7, #4]
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	80bb      	strh	r3, [r7, #4]
 8009fee:	e023      	b.n	800a038 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	895a      	ldrh	r2, [r3, #10]
 8009ff4:	88bb      	ldrh	r3, [r7, #4]
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009ffa:	8b3a      	ldrh	r2, [r7, #24]
 8009ffc:	88fb      	ldrh	r3, [r7, #6]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d901      	bls.n	800a006 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a002:	88fb      	ldrh	r3, [r7, #6]
 800a004:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a006:	8b7b      	ldrh	r3, [r7, #26]
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	18d0      	adds	r0, r2, r3
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	685a      	ldr	r2, [r3, #4]
 800a010:	88bb      	ldrh	r3, [r7, #4]
 800a012:	4413      	add	r3, r2
 800a014:	8b3a      	ldrh	r2, [r7, #24]
 800a016:	4619      	mov	r1, r3
 800a018:	f008 facf 	bl	80125ba <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a01c:	8afa      	ldrh	r2, [r7, #22]
 800a01e:	8b3b      	ldrh	r3, [r7, #24]
 800a020:	4413      	add	r3, r2
 800a022:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a024:	8b7a      	ldrh	r2, [r7, #26]
 800a026:	8b3b      	ldrh	r3, [r7, #24]
 800a028:	4413      	add	r3, r2
 800a02a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a02c:	88fa      	ldrh	r2, [r7, #6]
 800a02e:	8b3b      	ldrh	r3, [r7, #24]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a034:	2300      	movs	r3, #0
 800a036:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	61fb      	str	r3, [r7, #28]
 800a03e:	88fb      	ldrh	r3, [r7, #6]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d002      	beq.n	800a04a <pbuf_copy_partial+0xca>
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1c4      	bne.n	8009fd4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a04a:	8afb      	ldrh	r3, [r7, #22]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3720      	adds	r7, #32
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	0801393c 	.word	0x0801393c
 800a058:	08013c84 	.word	0x08013c84
 800a05c:	0801399c 	.word	0x0801399c
 800a060:	08013ca4 	.word	0x08013ca4

0800a064 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	4603      	mov	r3, r0
 800a06c:	603a      	str	r2, [r7, #0]
 800a06e:	71fb      	strb	r3, [r7, #7]
 800a070:	460b      	mov	r3, r1
 800a072:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	8919      	ldrh	r1, [r3, #8]
 800a078:	88ba      	ldrh	r2, [r7, #4]
 800a07a:	79fb      	ldrb	r3, [r7, #7]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7ff faa5 	bl	80095cc <pbuf_alloc>
 800a082:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d101      	bne.n	800a08e <pbuf_clone+0x2a>
    return NULL;
 800a08a:	2300      	movs	r3, #0
 800a08c:	e011      	b.n	800a0b2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a08e:	6839      	ldr	r1, [r7, #0]
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f7ff fea3 	bl	8009ddc <pbuf_copy>
 800a096:	4603      	mov	r3, r0
 800a098:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a09a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d006      	beq.n	800a0b0 <pbuf_clone+0x4c>
 800a0a2:	4b06      	ldr	r3, [pc, #24]	; (800a0bc <pbuf_clone+0x58>)
 800a0a4:	f240 5224 	movw	r2, #1316	; 0x524
 800a0a8:	4905      	ldr	r1, [pc, #20]	; (800a0c0 <pbuf_clone+0x5c>)
 800a0aa:	4806      	ldr	r0, [pc, #24]	; (800a0c4 <pbuf_clone+0x60>)
 800a0ac:	f008 f954 	bl	8012358 <iprintf>
  return q;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	0801393c 	.word	0x0801393c
 800a0c0:	08013db0 	.word	0x08013db0
 800a0c4:	0801399c 	.word	0x0801399c

0800a0c8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a0cc:	f008 f844 	bl	8012158 <rand>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a0de:	b29a      	uxth	r2, r3
 800a0e0:	4b01      	ldr	r3, [pc, #4]	; (800a0e8 <tcp_init+0x20>)
 800a0e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a0e4:	bf00      	nop
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	20000024 	.word	0x20000024

0800a0ec <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	7d1b      	ldrb	r3, [r3, #20]
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d105      	bne.n	800a108 <tcp_free+0x1c>
 800a0fc:	4b06      	ldr	r3, [pc, #24]	; (800a118 <tcp_free+0x2c>)
 800a0fe:	22d4      	movs	r2, #212	; 0xd4
 800a100:	4906      	ldr	r1, [pc, #24]	; (800a11c <tcp_free+0x30>)
 800a102:	4807      	ldr	r0, [pc, #28]	; (800a120 <tcp_free+0x34>)
 800a104:	f008 f928 	bl	8012358 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a108:	6879      	ldr	r1, [r7, #4]
 800a10a:	2001      	movs	r0, #1
 800a10c:	f7fe fe9e 	bl	8008e4c <memp_free>
}
 800a110:	bf00      	nop
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	08013e3c 	.word	0x08013e3c
 800a11c:	08013e6c 	.word	0x08013e6c
 800a120:	08013e80 	.word	0x08013e80

0800a124 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	7d1b      	ldrb	r3, [r3, #20]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d105      	bne.n	800a140 <tcp_free_listen+0x1c>
 800a134:	4b06      	ldr	r3, [pc, #24]	; (800a150 <tcp_free_listen+0x2c>)
 800a136:	22df      	movs	r2, #223	; 0xdf
 800a138:	4906      	ldr	r1, [pc, #24]	; (800a154 <tcp_free_listen+0x30>)
 800a13a:	4807      	ldr	r0, [pc, #28]	; (800a158 <tcp_free_listen+0x34>)
 800a13c:	f008 f90c 	bl	8012358 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a140:	6879      	ldr	r1, [r7, #4]
 800a142:	2002      	movs	r0, #2
 800a144:	f7fe fe82 	bl	8008e4c <memp_free>
}
 800a148:	bf00      	nop
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	08013e3c 	.word	0x08013e3c
 800a154:	08013ea8 	.word	0x08013ea8
 800a158:	08013e80 	.word	0x08013e80

0800a15c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a160:	f000 fea2 	bl	800aea8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a164:	4b07      	ldr	r3, [pc, #28]	; (800a184 <tcp_tmr+0x28>)
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	3301      	adds	r3, #1
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	4b05      	ldr	r3, [pc, #20]	; (800a184 <tcp_tmr+0x28>)
 800a16e:	701a      	strb	r2, [r3, #0]
 800a170:	4b04      	ldr	r3, [pc, #16]	; (800a184 <tcp_tmr+0x28>)
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	f003 0301 	and.w	r3, r3, #1
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a17c:	f000 fb54 	bl	800a828 <tcp_slowtmr>
  }
}
 800a180:	bf00      	nop
 800a182:	bd80      	pop	{r7, pc}
 800a184:	2000f069 	.word	0x2000f069

0800a188 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d105      	bne.n	800a1a4 <tcp_remove_listener+0x1c>
 800a198:	4b0d      	ldr	r3, [pc, #52]	; (800a1d0 <tcp_remove_listener+0x48>)
 800a19a:	22ff      	movs	r2, #255	; 0xff
 800a19c:	490d      	ldr	r1, [pc, #52]	; (800a1d4 <tcp_remove_listener+0x4c>)
 800a19e:	480e      	ldr	r0, [pc, #56]	; (800a1d8 <tcp_remove_listener+0x50>)
 800a1a0:	f008 f8da 	bl	8012358 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	60fb      	str	r3, [r7, #12]
 800a1a8:	e00a      	b.n	800a1c0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1ae:	683a      	ldr	r2, [r7, #0]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d102      	bne.n	800a1ba <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	60fb      	str	r3, [r7, #12]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d1f1      	bne.n	800a1aa <tcp_remove_listener+0x22>
    }
  }
}
 800a1c6:	bf00      	nop
 800a1c8:	bf00      	nop
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	08013e3c 	.word	0x08013e3c
 800a1d4:	08013ec4 	.word	0x08013ec4
 800a1d8:	08013e80 	.word	0x08013e80

0800a1dc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d106      	bne.n	800a1f8 <tcp_listen_closed+0x1c>
 800a1ea:	4b14      	ldr	r3, [pc, #80]	; (800a23c <tcp_listen_closed+0x60>)
 800a1ec:	f240 1211 	movw	r2, #273	; 0x111
 800a1f0:	4913      	ldr	r1, [pc, #76]	; (800a240 <tcp_listen_closed+0x64>)
 800a1f2:	4814      	ldr	r0, [pc, #80]	; (800a244 <tcp_listen_closed+0x68>)
 800a1f4:	f008 f8b0 	bl	8012358 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	7d1b      	ldrb	r3, [r3, #20]
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d006      	beq.n	800a20e <tcp_listen_closed+0x32>
 800a200:	4b0e      	ldr	r3, [pc, #56]	; (800a23c <tcp_listen_closed+0x60>)
 800a202:	f44f 7289 	mov.w	r2, #274	; 0x112
 800a206:	4910      	ldr	r1, [pc, #64]	; (800a248 <tcp_listen_closed+0x6c>)
 800a208:	480e      	ldr	r0, [pc, #56]	; (800a244 <tcp_listen_closed+0x68>)
 800a20a:	f008 f8a5 	bl	8012358 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a20e:	2301      	movs	r3, #1
 800a210:	60fb      	str	r3, [r7, #12]
 800a212:	e00b      	b.n	800a22c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a214:	4a0d      	ldr	r2, [pc, #52]	; (800a24c <tcp_listen_closed+0x70>)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	6879      	ldr	r1, [r7, #4]
 800a220:	4618      	mov	r0, r3
 800a222:	f7ff ffb1 	bl	800a188 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	3301      	adds	r3, #1
 800a22a:	60fb      	str	r3, [r7, #12]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2b03      	cmp	r3, #3
 800a230:	d9f0      	bls.n	800a214 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a232:	bf00      	nop
 800a234:	bf00      	nop
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	08013e3c 	.word	0x08013e3c
 800a240:	08013eec 	.word	0x08013eec
 800a244:	08013e80 	.word	0x08013e80
 800a248:	08013ef8 	.word	0x08013ef8
 800a24c:	08015e80 	.word	0x08015e80

0800a250 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a250:	b5b0      	push	{r4, r5, r7, lr}
 800a252:	b088      	sub	sp, #32
 800a254:	af04      	add	r7, sp, #16
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	460b      	mov	r3, r1
 800a25a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d106      	bne.n	800a270 <tcp_close_shutdown+0x20>
 800a262:	4b63      	ldr	r3, [pc, #396]	; (800a3f0 <tcp_close_shutdown+0x1a0>)
 800a264:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a268:	4962      	ldr	r1, [pc, #392]	; (800a3f4 <tcp_close_shutdown+0x1a4>)
 800a26a:	4863      	ldr	r0, [pc, #396]	; (800a3f8 <tcp_close_shutdown+0x1a8>)
 800a26c:	f008 f874 	bl	8012358 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a270:	78fb      	ldrb	r3, [r7, #3]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d066      	beq.n	800a344 <tcp_close_shutdown+0xf4>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	7d1b      	ldrb	r3, [r3, #20]
 800a27a:	2b04      	cmp	r3, #4
 800a27c:	d003      	beq.n	800a286 <tcp_close_shutdown+0x36>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	7d1b      	ldrb	r3, [r3, #20]
 800a282:	2b07      	cmp	r3, #7
 800a284:	d15e      	bne.n	800a344 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d104      	bne.n	800a298 <tcp_close_shutdown+0x48>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a292:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a296:	d055      	beq.n	800a344 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	8b5b      	ldrh	r3, [r3, #26]
 800a29c:	f003 0310 	and.w	r3, r3, #16
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d106      	bne.n	800a2b2 <tcp_close_shutdown+0x62>
 800a2a4:	4b52      	ldr	r3, [pc, #328]	; (800a3f0 <tcp_close_shutdown+0x1a0>)
 800a2a6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800a2aa:	4954      	ldr	r1, [pc, #336]	; (800a3fc <tcp_close_shutdown+0x1ac>)
 800a2ac:	4852      	ldr	r0, [pc, #328]	; (800a3f8 <tcp_close_shutdown+0x1a8>)
 800a2ae:	f008 f853 	bl	8012358 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a2ba:	687d      	ldr	r5, [r7, #4]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	3304      	adds	r3, #4
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	8ad2      	ldrh	r2, [r2, #22]
 800a2c4:	6879      	ldr	r1, [r7, #4]
 800a2c6:	8b09      	ldrh	r1, [r1, #24]
 800a2c8:	9102      	str	r1, [sp, #8]
 800a2ca:	9201      	str	r2, [sp, #4]
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	462b      	mov	r3, r5
 800a2d0:	4622      	mov	r2, r4
 800a2d2:	4601      	mov	r1, r0
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f004 fe91 	bl	800effc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f001 f8c6 	bl	800b46c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a2e0:	4b47      	ldr	r3, [pc, #284]	; (800a400 <tcp_close_shutdown+0x1b0>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d105      	bne.n	800a2f6 <tcp_close_shutdown+0xa6>
 800a2ea:	4b45      	ldr	r3, [pc, #276]	; (800a400 <tcp_close_shutdown+0x1b0>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	4a43      	ldr	r2, [pc, #268]	; (800a400 <tcp_close_shutdown+0x1b0>)
 800a2f2:	6013      	str	r3, [r2, #0]
 800a2f4:	e013      	b.n	800a31e <tcp_close_shutdown+0xce>
 800a2f6:	4b42      	ldr	r3, [pc, #264]	; (800a400 <tcp_close_shutdown+0x1b0>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	60fb      	str	r3, [r7, #12]
 800a2fc:	e00c      	b.n	800a318 <tcp_close_shutdown+0xc8>
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	429a      	cmp	r2, r3
 800a306:	d104      	bne.n	800a312 <tcp_close_shutdown+0xc2>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	68da      	ldr	r2, [r3, #12]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	60da      	str	r2, [r3, #12]
 800a310:	e005      	b.n	800a31e <tcp_close_shutdown+0xce>
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	60fb      	str	r3, [r7, #12]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1ef      	bne.n	800a2fe <tcp_close_shutdown+0xae>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	60da      	str	r2, [r3, #12]
 800a324:	4b37      	ldr	r3, [pc, #220]	; (800a404 <tcp_close_shutdown+0x1b4>)
 800a326:	2201      	movs	r2, #1
 800a328:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a32a:	4b37      	ldr	r3, [pc, #220]	; (800a408 <tcp_close_shutdown+0x1b8>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	429a      	cmp	r2, r3
 800a332:	d102      	bne.n	800a33a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a334:	f003 fd5e 	bl	800ddf4 <tcp_trigger_input_pcb_close>
 800a338:	e002      	b.n	800a340 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f7ff fed6 	bl	800a0ec <tcp_free>
      }
      return ERR_OK;
 800a340:	2300      	movs	r3, #0
 800a342:	e050      	b.n	800a3e6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	7d1b      	ldrb	r3, [r3, #20]
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d03b      	beq.n	800a3c4 <tcp_close_shutdown+0x174>
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	dc44      	bgt.n	800a3da <tcp_close_shutdown+0x18a>
 800a350:	2b00      	cmp	r3, #0
 800a352:	d002      	beq.n	800a35a <tcp_close_shutdown+0x10a>
 800a354:	2b01      	cmp	r3, #1
 800a356:	d02a      	beq.n	800a3ae <tcp_close_shutdown+0x15e>
 800a358:	e03f      	b.n	800a3da <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	8adb      	ldrh	r3, [r3, #22]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d021      	beq.n	800a3a6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a362:	4b2a      	ldr	r3, [pc, #168]	; (800a40c <tcp_close_shutdown+0x1bc>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d105      	bne.n	800a378 <tcp_close_shutdown+0x128>
 800a36c:	4b27      	ldr	r3, [pc, #156]	; (800a40c <tcp_close_shutdown+0x1bc>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	4a26      	ldr	r2, [pc, #152]	; (800a40c <tcp_close_shutdown+0x1bc>)
 800a374:	6013      	str	r3, [r2, #0]
 800a376:	e013      	b.n	800a3a0 <tcp_close_shutdown+0x150>
 800a378:	4b24      	ldr	r3, [pc, #144]	; (800a40c <tcp_close_shutdown+0x1bc>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	60bb      	str	r3, [r7, #8]
 800a37e:	e00c      	b.n	800a39a <tcp_close_shutdown+0x14a>
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	429a      	cmp	r2, r3
 800a388:	d104      	bne.n	800a394 <tcp_close_shutdown+0x144>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	68da      	ldr	r2, [r3, #12]
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	60da      	str	r2, [r3, #12]
 800a392:	e005      	b.n	800a3a0 <tcp_close_shutdown+0x150>
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	60bb      	str	r3, [r7, #8]
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d1ef      	bne.n	800a380 <tcp_close_shutdown+0x130>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f7ff fea0 	bl	800a0ec <tcp_free>
      break;
 800a3ac:	e01a      	b.n	800a3e4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7ff ff14 	bl	800a1dc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a3b4:	6879      	ldr	r1, [r7, #4]
 800a3b6:	4816      	ldr	r0, [pc, #88]	; (800a410 <tcp_close_shutdown+0x1c0>)
 800a3b8:	f001 f8a8 	bl	800b50c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7ff feb1 	bl	800a124 <tcp_free_listen>
      break;
 800a3c2:	e00f      	b.n	800a3e4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a3c4:	6879      	ldr	r1, [r7, #4]
 800a3c6:	480e      	ldr	r0, [pc, #56]	; (800a400 <tcp_close_shutdown+0x1b0>)
 800a3c8:	f001 f8a0 	bl	800b50c <tcp_pcb_remove>
 800a3cc:	4b0d      	ldr	r3, [pc, #52]	; (800a404 <tcp_close_shutdown+0x1b4>)
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f7ff fe8a 	bl	800a0ec <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a3d8:	e004      	b.n	800a3e4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 f81a 	bl	800a414 <tcp_close_shutdown_fin>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	e000      	b.n	800a3e6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bdb0      	pop	{r4, r5, r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	08013e3c 	.word	0x08013e3c
 800a3f4:	08013f10 	.word	0x08013f10
 800a3f8:	08013e80 	.word	0x08013e80
 800a3fc:	08013f30 	.word	0x08013f30
 800a400:	2000f060 	.word	0x2000f060
 800a404:	2000f068 	.word	0x2000f068
 800a408:	2000f0a0 	.word	0x2000f0a0
 800a40c:	2000f058 	.word	0x2000f058
 800a410:	2000f05c 	.word	0x2000f05c

0800a414 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d106      	bne.n	800a430 <tcp_close_shutdown_fin+0x1c>
 800a422:	4b2e      	ldr	r3, [pc, #184]	; (800a4dc <tcp_close_shutdown_fin+0xc8>)
 800a424:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a428:	492d      	ldr	r1, [pc, #180]	; (800a4e0 <tcp_close_shutdown_fin+0xcc>)
 800a42a:	482e      	ldr	r0, [pc, #184]	; (800a4e4 <tcp_close_shutdown_fin+0xd0>)
 800a42c:	f007 ff94 	bl	8012358 <iprintf>

  switch (pcb->state) {
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	7d1b      	ldrb	r3, [r3, #20]
 800a434:	2b07      	cmp	r3, #7
 800a436:	d020      	beq.n	800a47a <tcp_close_shutdown_fin+0x66>
 800a438:	2b07      	cmp	r3, #7
 800a43a:	dc2b      	bgt.n	800a494 <tcp_close_shutdown_fin+0x80>
 800a43c:	2b03      	cmp	r3, #3
 800a43e:	d002      	beq.n	800a446 <tcp_close_shutdown_fin+0x32>
 800a440:	2b04      	cmp	r3, #4
 800a442:	d00d      	beq.n	800a460 <tcp_close_shutdown_fin+0x4c>
 800a444:	e026      	b.n	800a494 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f003 fee6 	bl	800e218 <tcp_send_fin>
 800a44c:	4603      	mov	r3, r0
 800a44e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d11f      	bne.n	800a498 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2205      	movs	r2, #5
 800a45c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a45e:	e01b      	b.n	800a498 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f003 fed9 	bl	800e218 <tcp_send_fin>
 800a466:	4603      	mov	r3, r0
 800a468:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a46a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d114      	bne.n	800a49c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2205      	movs	r2, #5
 800a476:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a478:	e010      	b.n	800a49c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f003 fecc 	bl	800e218 <tcp_send_fin>
 800a480:	4603      	mov	r3, r0
 800a482:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d109      	bne.n	800a4a0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2209      	movs	r2, #9
 800a490:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a492:	e005      	b.n	800a4a0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a494:	2300      	movs	r3, #0
 800a496:	e01c      	b.n	800a4d2 <tcp_close_shutdown_fin+0xbe>
      break;
 800a498:	bf00      	nop
 800a49a:	e002      	b.n	800a4a2 <tcp_close_shutdown_fin+0x8e>
      break;
 800a49c:	bf00      	nop
 800a49e:	e000      	b.n	800a4a2 <tcp_close_shutdown_fin+0x8e>
      break;
 800a4a0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a4a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d103      	bne.n	800a4b2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f003 fff2 	bl	800e494 <tcp_output>
 800a4b0:	e00d      	b.n	800a4ce <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a4b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ba:	d108      	bne.n	800a4ce <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	8b5b      	ldrh	r3, [r3, #26]
 800a4c0:	f043 0308 	orr.w	r3, r3, #8
 800a4c4:	b29a      	uxth	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	e001      	b.n	800a4d2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a4ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	08013e3c 	.word	0x08013e3c
 800a4e0:	08013eec 	.word	0x08013eec
 800a4e4:	08013e80 	.word	0x08013e80

0800a4e8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d109      	bne.n	800a50a <tcp_close+0x22>
 800a4f6:	4b0f      	ldr	r3, [pc, #60]	; (800a534 <tcp_close+0x4c>)
 800a4f8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a4fc:	490e      	ldr	r1, [pc, #56]	; (800a538 <tcp_close+0x50>)
 800a4fe:	480f      	ldr	r0, [pc, #60]	; (800a53c <tcp_close+0x54>)
 800a500:	f007 ff2a 	bl	8012358 <iprintf>
 800a504:	f06f 030f 	mvn.w	r3, #15
 800a508:	e00f      	b.n	800a52a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	7d1b      	ldrb	r3, [r3, #20]
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d006      	beq.n	800a520 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	8b5b      	ldrh	r3, [r3, #26]
 800a516:	f043 0310 	orr.w	r3, r3, #16
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a520:	2101      	movs	r1, #1
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f7ff fe94 	bl	800a250 <tcp_close_shutdown>
 800a528:	4603      	mov	r3, r0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	08013e3c 	.word	0x08013e3c
 800a538:	08013f4c 	.word	0x08013f4c
 800a53c:	08013e80 	.word	0x08013e80

0800a540 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b08e      	sub	sp, #56	; 0x38
 800a544:	af04      	add	r7, sp, #16
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d107      	bne.n	800a560 <tcp_abandon+0x20>
 800a550:	4b52      	ldr	r3, [pc, #328]	; (800a69c <tcp_abandon+0x15c>)
 800a552:	f240 223d 	movw	r2, #573	; 0x23d
 800a556:	4952      	ldr	r1, [pc, #328]	; (800a6a0 <tcp_abandon+0x160>)
 800a558:	4852      	ldr	r0, [pc, #328]	; (800a6a4 <tcp_abandon+0x164>)
 800a55a:	f007 fefd 	bl	8012358 <iprintf>
 800a55e:	e099      	b.n	800a694 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	7d1b      	ldrb	r3, [r3, #20]
 800a564:	2b01      	cmp	r3, #1
 800a566:	d106      	bne.n	800a576 <tcp_abandon+0x36>
 800a568:	4b4c      	ldr	r3, [pc, #304]	; (800a69c <tcp_abandon+0x15c>)
 800a56a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a56e:	494e      	ldr	r1, [pc, #312]	; (800a6a8 <tcp_abandon+0x168>)
 800a570:	484c      	ldr	r0, [pc, #304]	; (800a6a4 <tcp_abandon+0x164>)
 800a572:	f007 fef1 	bl	8012358 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	7d1b      	ldrb	r3, [r3, #20]
 800a57a:	2b0a      	cmp	r3, #10
 800a57c:	d107      	bne.n	800a58e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a57e:	6879      	ldr	r1, [r7, #4]
 800a580:	484a      	ldr	r0, [pc, #296]	; (800a6ac <tcp_abandon+0x16c>)
 800a582:	f000 ffc3 	bl	800b50c <tcp_pcb_remove>
    tcp_free(pcb);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7ff fdb0 	bl	800a0ec <tcp_free>
 800a58c:	e082      	b.n	800a694 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a58e:	2300      	movs	r3, #0
 800a590:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a592:	2300      	movs	r3, #0
 800a594:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a59a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5a8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	7d1b      	ldrb	r3, [r3, #20]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d126      	bne.n	800a606 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	8adb      	ldrh	r3, [r3, #22]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d02e      	beq.n	800a61e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a5c0:	4b3b      	ldr	r3, [pc, #236]	; (800a6b0 <tcp_abandon+0x170>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d105      	bne.n	800a5d6 <tcp_abandon+0x96>
 800a5ca:	4b39      	ldr	r3, [pc, #228]	; (800a6b0 <tcp_abandon+0x170>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	4a37      	ldr	r2, [pc, #220]	; (800a6b0 <tcp_abandon+0x170>)
 800a5d2:	6013      	str	r3, [r2, #0]
 800a5d4:	e013      	b.n	800a5fe <tcp_abandon+0xbe>
 800a5d6:	4b36      	ldr	r3, [pc, #216]	; (800a6b0 <tcp_abandon+0x170>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	61fb      	str	r3, [r7, #28]
 800a5dc:	e00c      	b.n	800a5f8 <tcp_abandon+0xb8>
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d104      	bne.n	800a5f2 <tcp_abandon+0xb2>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	68da      	ldr	r2, [r3, #12]
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	60da      	str	r2, [r3, #12]
 800a5f0:	e005      	b.n	800a5fe <tcp_abandon+0xbe>
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	61fb      	str	r3, [r7, #28]
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1ef      	bne.n	800a5de <tcp_abandon+0x9e>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	60da      	str	r2, [r3, #12]
 800a604:	e00b      	b.n	800a61e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	8adb      	ldrh	r3, [r3, #22]
 800a60e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a610:	6879      	ldr	r1, [r7, #4]
 800a612:	4828      	ldr	r0, [pc, #160]	; (800a6b4 <tcp_abandon+0x174>)
 800a614:	f000 ff7a 	bl	800b50c <tcp_pcb_remove>
 800a618:	4b27      	ldr	r3, [pc, #156]	; (800a6b8 <tcp_abandon+0x178>)
 800a61a:	2201      	movs	r2, #1
 800a61c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a622:	2b00      	cmp	r3, #0
 800a624:	d004      	beq.n	800a630 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a62a:	4618      	mov	r0, r3
 800a62c:	f000 fd1c 	bl	800b068 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a634:	2b00      	cmp	r3, #0
 800a636:	d004      	beq.n	800a642 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a63c:	4618      	mov	r0, r3
 800a63e:	f000 fd13 	bl	800b068 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a646:	2b00      	cmp	r3, #0
 800a648:	d004      	beq.n	800a654 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a64e:	4618      	mov	r0, r3
 800a650:	f000 fd0a 	bl	800b068 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00e      	beq.n	800a678 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a65a:	6879      	ldr	r1, [r7, #4]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	3304      	adds	r3, #4
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	8b12      	ldrh	r2, [r2, #24]
 800a664:	9202      	str	r2, [sp, #8]
 800a666:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a668:	9201      	str	r2, [sp, #4]
 800a66a:	9300      	str	r3, [sp, #0]
 800a66c:	460b      	mov	r3, r1
 800a66e:	697a      	ldr	r2, [r7, #20]
 800a670:	69b9      	ldr	r1, [r7, #24]
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f004 fcc2 	bl	800effc <tcp_rst>
    }
    last_state = pcb->state;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	7d1b      	ldrb	r3, [r3, #20]
 800a67c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f7ff fd34 	bl	800a0ec <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d004      	beq.n	800a694 <tcp_abandon+0x154>
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	f06f 010c 	mvn.w	r1, #12
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	4798      	blx	r3
  }
}
 800a694:	3728      	adds	r7, #40	; 0x28
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	08013e3c 	.word	0x08013e3c
 800a6a0:	08013f80 	.word	0x08013f80
 800a6a4:	08013e80 	.word	0x08013e80
 800a6a8:	08013f9c 	.word	0x08013f9c
 800a6ac:	2000f064 	.word	0x2000f064
 800a6b0:	2000f058 	.word	0x2000f058
 800a6b4:	2000f060 	.word	0x2000f060
 800a6b8:	2000f068 	.word	0x2000f068

0800a6bc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a6c4:	2101      	movs	r1, #1
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f7ff ff3a 	bl	800a540 <tcp_abandon>
}
 800a6cc:	bf00      	nop
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d106      	bne.n	800a6f0 <tcp_update_rcv_ann_wnd+0x1c>
 800a6e2:	4b25      	ldr	r3, [pc, #148]	; (800a778 <tcp_update_rcv_ann_wnd+0xa4>)
 800a6e4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a6e8:	4924      	ldr	r1, [pc, #144]	; (800a77c <tcp_update_rcv_ann_wnd+0xa8>)
 800a6ea:	4825      	ldr	r0, [pc, #148]	; (800a780 <tcp_update_rcv_ann_wnd+0xac>)
 800a6ec:	f007 fe34 	bl	8012358 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a6f8:	4413      	add	r3, r2
 800a6fa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a704:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a708:	bf28      	it	cs
 800a70a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a70e:	b292      	uxth	r2, r2
 800a710:	4413      	add	r3, r2
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	2b00      	cmp	r3, #0
 800a718:	db08      	blt.n	800a72c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a726:	68fa      	ldr	r2, [r7, #12]
 800a728:	1ad3      	subs	r3, r2, r3
 800a72a:	e020      	b.n	800a76e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a734:	1ad3      	subs	r3, r2, r3
 800a736:	2b00      	cmp	r3, #0
 800a738:	dd03      	ble.n	800a742 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a740:	e014      	b.n	800a76c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a754:	d306      	bcc.n	800a764 <tcp_update_rcv_ann_wnd+0x90>
 800a756:	4b08      	ldr	r3, [pc, #32]	; (800a778 <tcp_update_rcv_ann_wnd+0xa4>)
 800a758:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a75c:	4909      	ldr	r1, [pc, #36]	; (800a784 <tcp_update_rcv_ann_wnd+0xb0>)
 800a75e:	4808      	ldr	r0, [pc, #32]	; (800a780 <tcp_update_rcv_ann_wnd+0xac>)
 800a760:	f007 fdfa 	bl	8012358 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	b29a      	uxth	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a76c:	2300      	movs	r3, #0
  }
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	08013e3c 	.word	0x08013e3c
 800a77c:	08014098 	.word	0x08014098
 800a780:	08013e80 	.word	0x08013e80
 800a784:	080140bc 	.word	0x080140bc

0800a788 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	460b      	mov	r3, r1
 800a792:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d107      	bne.n	800a7aa <tcp_recved+0x22>
 800a79a:	4b1f      	ldr	r3, [pc, #124]	; (800a818 <tcp_recved+0x90>)
 800a79c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a7a0:	491e      	ldr	r1, [pc, #120]	; (800a81c <tcp_recved+0x94>)
 800a7a2:	481f      	ldr	r0, [pc, #124]	; (800a820 <tcp_recved+0x98>)
 800a7a4:	f007 fdd8 	bl	8012358 <iprintf>
 800a7a8:	e032      	b.n	800a810 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	7d1b      	ldrb	r3, [r3, #20]
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d106      	bne.n	800a7c0 <tcp_recved+0x38>
 800a7b2:	4b19      	ldr	r3, [pc, #100]	; (800a818 <tcp_recved+0x90>)
 800a7b4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800a7b8:	491a      	ldr	r1, [pc, #104]	; (800a824 <tcp_recved+0x9c>)
 800a7ba:	4819      	ldr	r0, [pc, #100]	; (800a820 <tcp_recved+0x98>)
 800a7bc:	f007 fdcc 	bl	8012358 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a7c4:	887b      	ldrh	r3, [r7, #2]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a7ca:	89fb      	ldrh	r3, [r7, #14]
 800a7cc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a7d0:	d804      	bhi.n	800a7dc <tcp_recved+0x54>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7d6:	89fa      	ldrh	r2, [r7, #14]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d204      	bcs.n	800a7e6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a7e2:	851a      	strh	r2, [r3, #40]	; 0x28
 800a7e4:	e002      	b.n	800a7ec <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	89fa      	ldrh	r2, [r7, #14]
 800a7ea:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7ff ff71 	bl	800a6d4 <tcp_update_rcv_ann_wnd>
 800a7f2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a7fa:	d309      	bcc.n	800a810 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	8b5b      	ldrh	r3, [r3, #26]
 800a800:	f043 0302 	orr.w	r3, r3, #2
 800a804:	b29a      	uxth	r2, r3
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f003 fe42 	bl	800e494 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	08013e3c 	.word	0x08013e3c
 800a81c:	080140d8 	.word	0x080140d8
 800a820:	08013e80 	.word	0x08013e80
 800a824:	080140f0 	.word	0x080140f0

0800a828 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a828:	b5b0      	push	{r4, r5, r7, lr}
 800a82a:	b090      	sub	sp, #64	; 0x40
 800a82c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a82e:	2300      	movs	r3, #0
 800a830:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a834:	4b94      	ldr	r3, [pc, #592]	; (800aa88 <tcp_slowtmr+0x260>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	3301      	adds	r3, #1
 800a83a:	4a93      	ldr	r2, [pc, #588]	; (800aa88 <tcp_slowtmr+0x260>)
 800a83c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a83e:	4b93      	ldr	r3, [pc, #588]	; (800aa8c <tcp_slowtmr+0x264>)
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	3301      	adds	r3, #1
 800a844:	b2da      	uxtb	r2, r3
 800a846:	4b91      	ldr	r3, [pc, #580]	; (800aa8c <tcp_slowtmr+0x264>)
 800a848:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a84a:	2300      	movs	r3, #0
 800a84c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a84e:	4b90      	ldr	r3, [pc, #576]	; (800aa90 <tcp_slowtmr+0x268>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a854:	e29f      	b.n	800ad96 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a858:	7d1b      	ldrb	r3, [r3, #20]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d106      	bne.n	800a86c <tcp_slowtmr+0x44>
 800a85e:	4b8d      	ldr	r3, [pc, #564]	; (800aa94 <tcp_slowtmr+0x26c>)
 800a860:	f240 42be 	movw	r2, #1214	; 0x4be
 800a864:	498c      	ldr	r1, [pc, #560]	; (800aa98 <tcp_slowtmr+0x270>)
 800a866:	488d      	ldr	r0, [pc, #564]	; (800aa9c <tcp_slowtmr+0x274>)
 800a868:	f007 fd76 	bl	8012358 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86e:	7d1b      	ldrb	r3, [r3, #20]
 800a870:	2b01      	cmp	r3, #1
 800a872:	d106      	bne.n	800a882 <tcp_slowtmr+0x5a>
 800a874:	4b87      	ldr	r3, [pc, #540]	; (800aa94 <tcp_slowtmr+0x26c>)
 800a876:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a87a:	4989      	ldr	r1, [pc, #548]	; (800aaa0 <tcp_slowtmr+0x278>)
 800a87c:	4887      	ldr	r0, [pc, #540]	; (800aa9c <tcp_slowtmr+0x274>)
 800a87e:	f007 fd6b 	bl	8012358 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a884:	7d1b      	ldrb	r3, [r3, #20]
 800a886:	2b0a      	cmp	r3, #10
 800a888:	d106      	bne.n	800a898 <tcp_slowtmr+0x70>
 800a88a:	4b82      	ldr	r3, [pc, #520]	; (800aa94 <tcp_slowtmr+0x26c>)
 800a88c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a890:	4984      	ldr	r1, [pc, #528]	; (800aaa4 <tcp_slowtmr+0x27c>)
 800a892:	4882      	ldr	r0, [pc, #520]	; (800aa9c <tcp_slowtmr+0x274>)
 800a894:	f007 fd60 	bl	8012358 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89a:	7f9a      	ldrb	r2, [r3, #30]
 800a89c:	4b7b      	ldr	r3, [pc, #492]	; (800aa8c <tcp_slowtmr+0x264>)
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d105      	bne.n	800a8b0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a8ae:	e272      	b.n	800ad96 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a8b0:	4b76      	ldr	r3, [pc, #472]	; (800aa8c <tcp_slowtmr+0x264>)
 800a8b2:	781a      	ldrb	r2, [r3, #0]
 800a8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c6:	7d1b      	ldrb	r3, [r3, #20]
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d10a      	bne.n	800a8e2 <tcp_slowtmr+0xba>
 800a8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a8d2:	2b05      	cmp	r3, #5
 800a8d4:	d905      	bls.n	800a8e2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a8d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8da:	3301      	adds	r3, #1
 800a8dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8e0:	e11e      	b.n	800ab20 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a8e8:	2b0b      	cmp	r3, #11
 800a8ea:	d905      	bls.n	800a8f8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a8ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8f6:	e113      	b.n	800ab20 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d075      	beq.n	800a9ee <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a906:	2b00      	cmp	r3, #0
 800a908:	d006      	beq.n	800a918 <tcp_slowtmr+0xf0>
 800a90a:	4b62      	ldr	r3, [pc, #392]	; (800aa94 <tcp_slowtmr+0x26c>)
 800a90c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a910:	4965      	ldr	r1, [pc, #404]	; (800aaa8 <tcp_slowtmr+0x280>)
 800a912:	4862      	ldr	r0, [pc, #392]	; (800aa9c <tcp_slowtmr+0x274>)
 800a914:	f007 fd20 	bl	8012358 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d106      	bne.n	800a92e <tcp_slowtmr+0x106>
 800a920:	4b5c      	ldr	r3, [pc, #368]	; (800aa94 <tcp_slowtmr+0x26c>)
 800a922:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a926:	4961      	ldr	r1, [pc, #388]	; (800aaac <tcp_slowtmr+0x284>)
 800a928:	485c      	ldr	r0, [pc, #368]	; (800aa9c <tcp_slowtmr+0x274>)
 800a92a:	f007 fd15 	bl	8012358 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a930:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a934:	2b0b      	cmp	r3, #11
 800a936:	d905      	bls.n	800a944 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a93c:	3301      	adds	r3, #1
 800a93e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a942:	e0ed      	b.n	800ab20 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a946:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a94a:	3b01      	subs	r3, #1
 800a94c:	4a58      	ldr	r2, [pc, #352]	; (800aab0 <tcp_slowtmr+0x288>)
 800a94e:	5cd3      	ldrb	r3, [r2, r3]
 800a950:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a954:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a958:	7c7a      	ldrb	r2, [r7, #17]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d907      	bls.n	800a96e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a960:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a964:	3301      	adds	r3, #1
 800a966:	b2da      	uxtb	r2, r3
 800a968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a970:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a974:	7c7a      	ldrb	r2, [r7, #17]
 800a976:	429a      	cmp	r2, r3
 800a978:	f200 80d2 	bhi.w	800ab20 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a97c:	2301      	movs	r3, #1
 800a97e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a982:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a986:	2b00      	cmp	r3, #0
 800a988:	d108      	bne.n	800a99c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a98a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a98c:	f004 fc2a 	bl	800f1e4 <tcp_zero_window_probe>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d014      	beq.n	800a9c0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a996:	2300      	movs	r3, #0
 800a998:	623b      	str	r3, [r7, #32]
 800a99a:	e011      	b.n	800a9c0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9a6:	f003 faef 	bl	800df88 <tcp_split_unsent_seg>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d107      	bne.n	800a9c0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a9b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9b2:	f003 fd6f 	bl	800e494 <tcp_output>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d101      	bne.n	800a9c0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a9c0:	6a3b      	ldr	r3, [r7, #32]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f000 80ac 	beq.w	800ab20 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a9d6:	2b06      	cmp	r3, #6
 800a9d8:	f200 80a2 	bhi.w	800ab20 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	b2da      	uxtb	r2, r3
 800a9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a9ec:	e098      	b.n	800ab20 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	db0f      	blt.n	800aa18 <tcp_slowtmr+0x1f0>
 800a9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a9fe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d008      	beq.n	800aa18 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800aa06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa08:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	3301      	adds	r3, #1
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	b21a      	sxth	r2, r3
 800aa14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa16:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800aa18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800aa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa20:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800aa24:	429a      	cmp	r2, r3
 800aa26:	db7b      	blt.n	800ab20 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800aa28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa2a:	f004 f827 	bl	800ea7c <tcp_rexmit_rto_prepare>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d007      	beq.n	800aa44 <tcp_slowtmr+0x21c>
 800aa34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d171      	bne.n	800ab20 <tcp_slowtmr+0x2f8>
 800aa3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d06d      	beq.n	800ab20 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800aa44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa46:	7d1b      	ldrb	r3, [r3, #20]
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	d03a      	beq.n	800aac2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800aa4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aa52:	2b0c      	cmp	r3, #12
 800aa54:	bf28      	it	cs
 800aa56:	230c      	movcs	r3, #12
 800aa58:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800aa5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800aa60:	10db      	asrs	r3, r3, #3
 800aa62:	b21b      	sxth	r3, r3
 800aa64:	461a      	mov	r2, r3
 800aa66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa68:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800aa6c:	4413      	add	r3, r2
 800aa6e:	7efa      	ldrb	r2, [r7, #27]
 800aa70:	4910      	ldr	r1, [pc, #64]	; (800aab4 <tcp_slowtmr+0x28c>)
 800aa72:	5c8a      	ldrb	r2, [r1, r2]
 800aa74:	4093      	lsls	r3, r2
 800aa76:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	dc1a      	bgt.n	800aab8 <tcp_slowtmr+0x290>
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	b21a      	sxth	r2, r3
 800aa86:	e019      	b.n	800aabc <tcp_slowtmr+0x294>
 800aa88:	2000f054 	.word	0x2000f054
 800aa8c:	2000f06a 	.word	0x2000f06a
 800aa90:	2000f060 	.word	0x2000f060
 800aa94:	08013e3c 	.word	0x08013e3c
 800aa98:	08014180 	.word	0x08014180
 800aa9c:	08013e80 	.word	0x08013e80
 800aaa0:	080141ac 	.word	0x080141ac
 800aaa4:	080141d8 	.word	0x080141d8
 800aaa8:	08014208 	.word	0x08014208
 800aaac:	0801423c 	.word	0x0801423c
 800aab0:	08015e78 	.word	0x08015e78
 800aab4:	08015e68 	.word	0x08015e68
 800aab8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800aabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aabe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800aac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac4:	2200      	movs	r2, #0
 800aac6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800aac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800aace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aad4:	4293      	cmp	r3, r2
 800aad6:	bf28      	it	cs
 800aad8:	4613      	movcs	r3, r2
 800aada:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800aadc:	8a7b      	ldrh	r3, [r7, #18]
 800aade:	085b      	lsrs	r3, r3, #1
 800aae0:	b29a      	uxth	r2, r3
 800aae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800aae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800aaee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aaf2:	005b      	lsls	r3, r3, #1
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d206      	bcs.n	800ab08 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800aafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aafe:	005b      	lsls	r3, r3, #1
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ab08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ab0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ab12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab14:	2200      	movs	r2, #0
 800ab16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ab1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab1c:	f004 f81e 	bl	800eb5c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ab20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab22:	7d1b      	ldrb	r3, [r3, #20]
 800ab24:	2b06      	cmp	r3, #6
 800ab26:	d111      	bne.n	800ab4c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ab28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2a:	8b5b      	ldrh	r3, [r3, #26]
 800ab2c:	f003 0310 	and.w	r3, r3, #16
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d00b      	beq.n	800ab4c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ab34:	4b9d      	ldr	r3, [pc, #628]	; (800adac <tcp_slowtmr+0x584>)
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3a:	6a1b      	ldr	r3, [r3, #32]
 800ab3c:	1ad3      	subs	r3, r2, r3
 800ab3e:	2b28      	cmp	r3, #40	; 0x28
 800ab40:	d904      	bls.n	800ab4c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ab42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab46:	3301      	adds	r3, #1
 800ab48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ab4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4e:	7a5b      	ldrb	r3, [r3, #9]
 800ab50:	f003 0308 	and.w	r3, r3, #8
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d04c      	beq.n	800abf2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ab58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ab5c:	2b04      	cmp	r3, #4
 800ab5e:	d003      	beq.n	800ab68 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ab60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab62:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ab64:	2b07      	cmp	r3, #7
 800ab66:	d144      	bne.n	800abf2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ab68:	4b90      	ldr	r3, [pc, #576]	; (800adac <tcp_slowtmr+0x584>)
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6e:	6a1b      	ldr	r3, [r3, #32]
 800ab70:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ab72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab78:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800ab7c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800ab80:	498b      	ldr	r1, [pc, #556]	; (800adb0 <tcp_slowtmr+0x588>)
 800ab82:	fba1 1303 	umull	r1, r3, r1, r3
 800ab86:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d90a      	bls.n	800aba2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ab8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab90:	3301      	adds	r3, #1
 800ab92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ab96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800aba0:	e027      	b.n	800abf2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aba2:	4b82      	ldr	r3, [pc, #520]	; (800adac <tcp_slowtmr+0x584>)
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba8:	6a1b      	ldr	r3, [r3, #32]
 800abaa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800abac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abae:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800abb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800abb8:	4618      	mov	r0, r3
 800abba:	4b7e      	ldr	r3, [pc, #504]	; (800adb4 <tcp_slowtmr+0x58c>)
 800abbc:	fb00 f303 	mul.w	r3, r0, r3
 800abc0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800abc2:	497b      	ldr	r1, [pc, #492]	; (800adb0 <tcp_slowtmr+0x588>)
 800abc4:	fba1 1303 	umull	r1, r3, r1, r3
 800abc8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800abca:	429a      	cmp	r2, r3
 800abcc:	d911      	bls.n	800abf2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800abce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abd0:	f004 fac8 	bl	800f164 <tcp_keepalive>
 800abd4:	4603      	mov	r3, r0
 800abd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800abda:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d107      	bne.n	800abf2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800abe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800abe8:	3301      	adds	r3, #1
 800abea:	b2da      	uxtb	r2, r3
 800abec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abee:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800abf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d011      	beq.n	800ac1e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800abfa:	4b6c      	ldr	r3, [pc, #432]	; (800adac <tcp_slowtmr+0x584>)
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	1ad2      	subs	r2, r2, r3
 800ac04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac06:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	005b      	lsls	r3, r3, #1
 800ac10:	440b      	add	r3, r1
 800ac12:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d302      	bcc.n	800ac1e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ac18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac1a:	f000 fddb 	bl	800b7d4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ac1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac20:	7d1b      	ldrb	r3, [r3, #20]
 800ac22:	2b03      	cmp	r3, #3
 800ac24:	d10b      	bne.n	800ac3e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac26:	4b61      	ldr	r3, [pc, #388]	; (800adac <tcp_slowtmr+0x584>)
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2c:	6a1b      	ldr	r3, [r3, #32]
 800ac2e:	1ad3      	subs	r3, r2, r3
 800ac30:	2b28      	cmp	r3, #40	; 0x28
 800ac32:	d904      	bls.n	800ac3e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ac34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac38:	3301      	adds	r3, #1
 800ac3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ac3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac40:	7d1b      	ldrb	r3, [r3, #20]
 800ac42:	2b09      	cmp	r3, #9
 800ac44:	d10b      	bne.n	800ac5e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ac46:	4b59      	ldr	r3, [pc, #356]	; (800adac <tcp_slowtmr+0x584>)
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4c:	6a1b      	ldr	r3, [r3, #32]
 800ac4e:	1ad3      	subs	r3, r2, r3
 800ac50:	2bf0      	cmp	r3, #240	; 0xf0
 800ac52:	d904      	bls.n	800ac5e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ac54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac58:	3301      	adds	r3, #1
 800ac5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ac5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d060      	beq.n	800ad28 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ac66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac6c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ac6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac70:	f000 fbfc 	bl	800b46c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ac74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d010      	beq.n	800ac9c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ac7a:	4b4f      	ldr	r3, [pc, #316]	; (800adb8 <tcp_slowtmr+0x590>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d106      	bne.n	800ac92 <tcp_slowtmr+0x46a>
 800ac84:	4b4d      	ldr	r3, [pc, #308]	; (800adbc <tcp_slowtmr+0x594>)
 800ac86:	f240 526d 	movw	r2, #1389	; 0x56d
 800ac8a:	494d      	ldr	r1, [pc, #308]	; (800adc0 <tcp_slowtmr+0x598>)
 800ac8c:	484d      	ldr	r0, [pc, #308]	; (800adc4 <tcp_slowtmr+0x59c>)
 800ac8e:	f007 fb63 	bl	8012358 <iprintf>
        prev->next = pcb->next;
 800ac92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac94:	68da      	ldr	r2, [r3, #12]
 800ac96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac98:	60da      	str	r2, [r3, #12]
 800ac9a:	e00f      	b.n	800acbc <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ac9c:	4b46      	ldr	r3, [pc, #280]	; (800adb8 <tcp_slowtmr+0x590>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d006      	beq.n	800acb4 <tcp_slowtmr+0x48c>
 800aca6:	4b45      	ldr	r3, [pc, #276]	; (800adbc <tcp_slowtmr+0x594>)
 800aca8:	f240 5271 	movw	r2, #1393	; 0x571
 800acac:	4946      	ldr	r1, [pc, #280]	; (800adc8 <tcp_slowtmr+0x5a0>)
 800acae:	4845      	ldr	r0, [pc, #276]	; (800adc4 <tcp_slowtmr+0x59c>)
 800acb0:	f007 fb52 	bl	8012358 <iprintf>
        tcp_active_pcbs = pcb->next;
 800acb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	4a3f      	ldr	r2, [pc, #252]	; (800adb8 <tcp_slowtmr+0x590>)
 800acba:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800acbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d013      	beq.n	800acec <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800acc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800acc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800accc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800acce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd0:	3304      	adds	r3, #4
 800acd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acd4:	8ad2      	ldrh	r2, [r2, #22]
 800acd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800acd8:	8b09      	ldrh	r1, [r1, #24]
 800acda:	9102      	str	r1, [sp, #8]
 800acdc:	9201      	str	r2, [sp, #4]
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	462b      	mov	r3, r5
 800ace2:	4622      	mov	r2, r4
 800ace4:	4601      	mov	r1, r0
 800ace6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ace8:	f004 f988 	bl	800effc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800acec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800acf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf4:	7d1b      	ldrb	r3, [r3, #20]
 800acf6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800acf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800acfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ad02:	6838      	ldr	r0, [r7, #0]
 800ad04:	f7ff f9f2 	bl	800a0ec <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ad08:	4b30      	ldr	r3, [pc, #192]	; (800adcc <tcp_slowtmr+0x5a4>)
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d004      	beq.n	800ad1e <tcp_slowtmr+0x4f6>
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f06f 010c 	mvn.w	r1, #12
 800ad1a:	68b8      	ldr	r0, [r7, #8]
 800ad1c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ad1e:	4b2b      	ldr	r3, [pc, #172]	; (800adcc <tcp_slowtmr+0x5a4>)
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d037      	beq.n	800ad96 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ad26:	e590      	b.n	800a84a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ad28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ad2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ad32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad34:	7f1b      	ldrb	r3, [r3, #28]
 800ad36:	3301      	adds	r3, #1
 800ad38:	b2da      	uxtb	r2, r3
 800ad3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ad3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad40:	7f1a      	ldrb	r2, [r3, #28]
 800ad42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad44:	7f5b      	ldrb	r3, [r3, #29]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d325      	bcc.n	800ad96 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ad4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ad50:	4b1e      	ldr	r3, [pc, #120]	; (800adcc <tcp_slowtmr+0x5a4>)
 800ad52:	2200      	movs	r2, #0
 800ad54:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ad56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00b      	beq.n	800ad78 <tcp_slowtmr+0x550>
 800ad60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad68:	6912      	ldr	r2, [r2, #16]
 800ad6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	4798      	blx	r3
 800ad70:	4603      	mov	r3, r0
 800ad72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ad76:	e002      	b.n	800ad7e <tcp_slowtmr+0x556>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ad7e:	4b13      	ldr	r3, [pc, #76]	; (800adcc <tcp_slowtmr+0x5a4>)
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d000      	beq.n	800ad88 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800ad86:	e560      	b.n	800a84a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ad88:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d102      	bne.n	800ad96 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ad90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad92:	f003 fb7f 	bl	800e494 <tcp_output>
  while (pcb != NULL) {
 800ad96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	f47f ad5c 	bne.w	800a856 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ada2:	4b0b      	ldr	r3, [pc, #44]	; (800add0 <tcp_slowtmr+0x5a8>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ada8:	e067      	b.n	800ae7a <tcp_slowtmr+0x652>
 800adaa:	bf00      	nop
 800adac:	2000f054 	.word	0x2000f054
 800adb0:	10624dd3 	.word	0x10624dd3
 800adb4:	000124f8 	.word	0x000124f8
 800adb8:	2000f060 	.word	0x2000f060
 800adbc:	08013e3c 	.word	0x08013e3c
 800adc0:	08014274 	.word	0x08014274
 800adc4:	08013e80 	.word	0x08013e80
 800adc8:	080142a0 	.word	0x080142a0
 800adcc:	2000f068 	.word	0x2000f068
 800add0:	2000f064 	.word	0x2000f064
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800add4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add6:	7d1b      	ldrb	r3, [r3, #20]
 800add8:	2b0a      	cmp	r3, #10
 800adda:	d006      	beq.n	800adea <tcp_slowtmr+0x5c2>
 800addc:	4b2b      	ldr	r3, [pc, #172]	; (800ae8c <tcp_slowtmr+0x664>)
 800adde:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ade2:	492b      	ldr	r1, [pc, #172]	; (800ae90 <tcp_slowtmr+0x668>)
 800ade4:	482b      	ldr	r0, [pc, #172]	; (800ae94 <tcp_slowtmr+0x66c>)
 800ade6:	f007 fab7 	bl	8012358 <iprintf>
    pcb_remove = 0;
 800adea:	2300      	movs	r3, #0
 800adec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800adf0:	4b29      	ldr	r3, [pc, #164]	; (800ae98 <tcp_slowtmr+0x670>)
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf6:	6a1b      	ldr	r3, [r3, #32]
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	2bf0      	cmp	r3, #240	; 0xf0
 800adfc:	d904      	bls.n	800ae08 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800adfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae02:	3301      	adds	r3, #1
 800ae04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ae08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d02f      	beq.n	800ae70 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ae10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae12:	f000 fb2b 	bl	800b46c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ae16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d010      	beq.n	800ae3e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ae1c:	4b1f      	ldr	r3, [pc, #124]	; (800ae9c <tcp_slowtmr+0x674>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d106      	bne.n	800ae34 <tcp_slowtmr+0x60c>
 800ae26:	4b19      	ldr	r3, [pc, #100]	; (800ae8c <tcp_slowtmr+0x664>)
 800ae28:	f240 52af 	movw	r2, #1455	; 0x5af
 800ae2c:	491c      	ldr	r1, [pc, #112]	; (800aea0 <tcp_slowtmr+0x678>)
 800ae2e:	4819      	ldr	r0, [pc, #100]	; (800ae94 <tcp_slowtmr+0x66c>)
 800ae30:	f007 fa92 	bl	8012358 <iprintf>
        prev->next = pcb->next;
 800ae34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae36:	68da      	ldr	r2, [r3, #12]
 800ae38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3a:	60da      	str	r2, [r3, #12]
 800ae3c:	e00f      	b.n	800ae5e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ae3e:	4b17      	ldr	r3, [pc, #92]	; (800ae9c <tcp_slowtmr+0x674>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d006      	beq.n	800ae56 <tcp_slowtmr+0x62e>
 800ae48:	4b10      	ldr	r3, [pc, #64]	; (800ae8c <tcp_slowtmr+0x664>)
 800ae4a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ae4e:	4915      	ldr	r1, [pc, #84]	; (800aea4 <tcp_slowtmr+0x67c>)
 800ae50:	4810      	ldr	r0, [pc, #64]	; (800ae94 <tcp_slowtmr+0x66c>)
 800ae52:	f007 fa81 	bl	8012358 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ae56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	4a10      	ldr	r2, [pc, #64]	; (800ae9c <tcp_slowtmr+0x674>)
 800ae5c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae60:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ae62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ae68:	69f8      	ldr	r0, [r7, #28]
 800ae6a:	f7ff f93f 	bl	800a0ec <tcp_free>
 800ae6e:	e004      	b.n	800ae7a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ae70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae72:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ae74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ae7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d1a9      	bne.n	800add4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ae80:	bf00      	nop
 800ae82:	bf00      	nop
 800ae84:	3730      	adds	r7, #48	; 0x30
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bdb0      	pop	{r4, r5, r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	08013e3c 	.word	0x08013e3c
 800ae90:	080142cc 	.word	0x080142cc
 800ae94:	08013e80 	.word	0x08013e80
 800ae98:	2000f054 	.word	0x2000f054
 800ae9c:	2000f064 	.word	0x2000f064
 800aea0:	080142fc 	.word	0x080142fc
 800aea4:	08014324 	.word	0x08014324

0800aea8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800aeae:	4b2d      	ldr	r3, [pc, #180]	; (800af64 <tcp_fasttmr+0xbc>)
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	b2da      	uxtb	r2, r3
 800aeb6:	4b2b      	ldr	r3, [pc, #172]	; (800af64 <tcp_fasttmr+0xbc>)
 800aeb8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800aeba:	4b2b      	ldr	r3, [pc, #172]	; (800af68 <tcp_fasttmr+0xc0>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800aec0:	e048      	b.n	800af54 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	7f9a      	ldrb	r2, [r3, #30]
 800aec6:	4b27      	ldr	r3, [pc, #156]	; (800af64 <tcp_fasttmr+0xbc>)
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d03f      	beq.n	800af4e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800aece:	4b25      	ldr	r3, [pc, #148]	; (800af64 <tcp_fasttmr+0xbc>)
 800aed0:	781a      	ldrb	r2, [r3, #0]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	8b5b      	ldrh	r3, [r3, #26]
 800aeda:	f003 0301 	and.w	r3, r3, #1
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d010      	beq.n	800af04 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	8b5b      	ldrh	r3, [r3, #26]
 800aee6:	f043 0302 	orr.w	r3, r3, #2
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f003 facf 	bl	800e494 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	8b5b      	ldrh	r3, [r3, #26]
 800aefa:	f023 0303 	bic.w	r3, r3, #3
 800aefe:	b29a      	uxth	r2, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	8b5b      	ldrh	r3, [r3, #26]
 800af08:	f003 0308 	and.w	r3, r3, #8
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d009      	beq.n	800af24 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	8b5b      	ldrh	r3, [r3, #26]
 800af14:	f023 0308 	bic.w	r3, r3, #8
 800af18:	b29a      	uxth	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f7ff fa78 	bl	800a414 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d00a      	beq.n	800af48 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800af32:	4b0e      	ldr	r3, [pc, #56]	; (800af6c <tcp_fasttmr+0xc4>)
 800af34:	2200      	movs	r2, #0
 800af36:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 f819 	bl	800af70 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800af3e:	4b0b      	ldr	r3, [pc, #44]	; (800af6c <tcp_fasttmr+0xc4>)
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d000      	beq.n	800af48 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800af46:	e7b8      	b.n	800aeba <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	607b      	str	r3, [r7, #4]
 800af4c:	e002      	b.n	800af54 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1b3      	bne.n	800aec2 <tcp_fasttmr+0x1a>
    }
  }
}
 800af5a:	bf00      	nop
 800af5c:	bf00      	nop
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	2000f06a 	.word	0x2000f06a
 800af68:	2000f060 	.word	0x2000f060
 800af6c:	2000f068 	.word	0x2000f068

0800af70 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800af70:	b590      	push	{r4, r7, lr}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d109      	bne.n	800af92 <tcp_process_refused_data+0x22>
 800af7e:	4b37      	ldr	r3, [pc, #220]	; (800b05c <tcp_process_refused_data+0xec>)
 800af80:	f240 6209 	movw	r2, #1545	; 0x609
 800af84:	4936      	ldr	r1, [pc, #216]	; (800b060 <tcp_process_refused_data+0xf0>)
 800af86:	4837      	ldr	r0, [pc, #220]	; (800b064 <tcp_process_refused_data+0xf4>)
 800af88:	f007 f9e6 	bl	8012358 <iprintf>
 800af8c:	f06f 030f 	mvn.w	r3, #15
 800af90:	e060      	b.n	800b054 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af96:	7b5b      	ldrb	r3, [r3, #13]
 800af98:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af9e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00b      	beq.n	800afc8 <tcp_process_refused_data+0x58>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6918      	ldr	r0, [r3, #16]
 800afba:	2300      	movs	r3, #0
 800afbc:	68ba      	ldr	r2, [r7, #8]
 800afbe:	6879      	ldr	r1, [r7, #4]
 800afc0:	47a0      	blx	r4
 800afc2:	4603      	mov	r3, r0
 800afc4:	73fb      	strb	r3, [r7, #15]
 800afc6:	e007      	b.n	800afd8 <tcp_process_refused_data+0x68>
 800afc8:	2300      	movs	r3, #0
 800afca:	68ba      	ldr	r2, [r7, #8]
 800afcc:	6879      	ldr	r1, [r7, #4]
 800afce:	2000      	movs	r0, #0
 800afd0:	f000 f8a4 	bl	800b11c <tcp_recv_null>
 800afd4:	4603      	mov	r3, r0
 800afd6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800afd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d12a      	bne.n	800b036 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
 800afe2:	f003 0320 	and.w	r3, r3, #32
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d033      	beq.n	800b052 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afee:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800aff2:	d005      	beq.n	800b000 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aff8:	3301      	adds	r3, #1
 800affa:	b29a      	uxth	r2, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b006:	2b00      	cmp	r3, #0
 800b008:	d00b      	beq.n	800b022 <tcp_process_refused_data+0xb2>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6918      	ldr	r0, [r3, #16]
 800b014:	2300      	movs	r3, #0
 800b016:	2200      	movs	r2, #0
 800b018:	6879      	ldr	r1, [r7, #4]
 800b01a:	47a0      	blx	r4
 800b01c:	4603      	mov	r3, r0
 800b01e:	73fb      	strb	r3, [r7, #15]
 800b020:	e001      	b.n	800b026 <tcp_process_refused_data+0xb6>
 800b022:	2300      	movs	r3, #0
 800b024:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b02a:	f113 0f0d 	cmn.w	r3, #13
 800b02e:	d110      	bne.n	800b052 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b030:	f06f 030c 	mvn.w	r3, #12
 800b034:	e00e      	b.n	800b054 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b03a:	f113 0f0d 	cmn.w	r3, #13
 800b03e:	d102      	bne.n	800b046 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b040:	f06f 030c 	mvn.w	r3, #12
 800b044:	e006      	b.n	800b054 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	68ba      	ldr	r2, [r7, #8]
 800b04a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800b04c:	f06f 0304 	mvn.w	r3, #4
 800b050:	e000      	b.n	800b054 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3714      	adds	r7, #20
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd90      	pop	{r4, r7, pc}
 800b05c:	08013e3c 	.word	0x08013e3c
 800b060:	0801434c 	.word	0x0801434c
 800b064:	08013e80 	.word	0x08013e80

0800b068 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b070:	e007      	b.n	800b082 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 f80a 	bl	800b092 <tcp_seg_free>
    seg = next;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d1f4      	bne.n	800b072 <tcp_segs_free+0xa>
  }
}
 800b088:	bf00      	nop
 800b08a:	bf00      	nop
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b082      	sub	sp, #8
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00c      	beq.n	800b0ba <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d004      	beq.n	800b0b2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7fe fd71 	bl	8009b94 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b0b2:	6879      	ldr	r1, [r7, #4]
 800b0b4:	2003      	movs	r0, #3
 800b0b6:	f7fd fec9 	bl	8008e4c <memp_free>
  }
}
 800b0ba:	bf00      	nop
 800b0bc:	3708      	adds	r7, #8
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
	...

0800b0c4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d106      	bne.n	800b0e0 <tcp_seg_copy+0x1c>
 800b0d2:	4b0f      	ldr	r3, [pc, #60]	; (800b110 <tcp_seg_copy+0x4c>)
 800b0d4:	f240 6282 	movw	r2, #1666	; 0x682
 800b0d8:	490e      	ldr	r1, [pc, #56]	; (800b114 <tcp_seg_copy+0x50>)
 800b0da:	480f      	ldr	r0, [pc, #60]	; (800b118 <tcp_seg_copy+0x54>)
 800b0dc:	f007 f93c 	bl	8012358 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b0e0:	2003      	movs	r0, #3
 800b0e2:	f7fd fe3d 	bl	8008d60 <memp_malloc>
 800b0e6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d101      	bne.n	800b0f2 <tcp_seg_copy+0x2e>
    return NULL;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	e00a      	b.n	800b108 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b0f2:	2210      	movs	r2, #16
 800b0f4:	6879      	ldr	r1, [r7, #4]
 800b0f6:	68f8      	ldr	r0, [r7, #12]
 800b0f8:	f007 fa5f 	bl	80125ba <memcpy>
  pbuf_ref(cseg->p);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	4618      	mov	r0, r3
 800b102:	f7fe fded 	bl	8009ce0 <pbuf_ref>
  return cseg;
 800b106:	68fb      	ldr	r3, [r7, #12]
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3710      	adds	r7, #16
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	08013e3c 	.word	0x08013e3c
 800b114:	08014390 	.word	0x08014390
 800b118:	08013e80 	.word	0x08013e80

0800b11c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	607a      	str	r2, [r7, #4]
 800b128:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d109      	bne.n	800b144 <tcp_recv_null+0x28>
 800b130:	4b12      	ldr	r3, [pc, #72]	; (800b17c <tcp_recv_null+0x60>)
 800b132:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b136:	4912      	ldr	r1, [pc, #72]	; (800b180 <tcp_recv_null+0x64>)
 800b138:	4812      	ldr	r0, [pc, #72]	; (800b184 <tcp_recv_null+0x68>)
 800b13a:	f007 f90d 	bl	8012358 <iprintf>
 800b13e:	f06f 030f 	mvn.w	r3, #15
 800b142:	e016      	b.n	800b172 <tcp_recv_null+0x56>

  if (p != NULL) {
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d009      	beq.n	800b15e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	891b      	ldrh	r3, [r3, #8]
 800b14e:	4619      	mov	r1, r3
 800b150:	68b8      	ldr	r0, [r7, #8]
 800b152:	f7ff fb19 	bl	800a788 <tcp_recved>
    pbuf_free(p);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f7fe fd1c 	bl	8009b94 <pbuf_free>
 800b15c:	e008      	b.n	800b170 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b15e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d104      	bne.n	800b170 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b166:	68b8      	ldr	r0, [r7, #8]
 800b168:	f7ff f9be 	bl	800a4e8 <tcp_close>
 800b16c:	4603      	mov	r3, r0
 800b16e:	e000      	b.n	800b172 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3710      	adds	r7, #16
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	08013e3c 	.word	0x08013e3c
 800b180:	080143ac 	.word	0x080143ac
 800b184:	08013e80 	.word	0x08013e80

0800b188 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b086      	sub	sp, #24
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	4603      	mov	r3, r0
 800b190:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b196:	2b00      	cmp	r3, #0
 800b198:	db01      	blt.n	800b19e <tcp_kill_prio+0x16>
 800b19a:	79fb      	ldrb	r3, [r7, #7]
 800b19c:	e000      	b.n	800b1a0 <tcp_kill_prio+0x18>
 800b19e:	237f      	movs	r3, #127	; 0x7f
 800b1a0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b1a2:	7afb      	ldrb	r3, [r7, #11]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d034      	beq.n	800b212 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b1a8:	7afb      	ldrb	r3, [r7, #11]
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1b6:	4b19      	ldr	r3, [pc, #100]	; (800b21c <tcp_kill_prio+0x94>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	617b      	str	r3, [r7, #20]
 800b1bc:	e01f      	b.n	800b1fe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	7d5b      	ldrb	r3, [r3, #21]
 800b1c2:	7afa      	ldrb	r2, [r7, #11]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d80c      	bhi.n	800b1e2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b1cc:	7afa      	ldrb	r2, [r7, #11]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d112      	bne.n	800b1f8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b1d2:	4b13      	ldr	r3, [pc, #76]	; (800b220 <tcp_kill_prio+0x98>)
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	6a1b      	ldr	r3, [r3, #32]
 800b1da:	1ad3      	subs	r3, r2, r3
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d80a      	bhi.n	800b1f8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b1e2:	4b0f      	ldr	r3, [pc, #60]	; (800b220 <tcp_kill_prio+0x98>)
 800b1e4:	681a      	ldr	r2, [r3, #0]
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	6a1b      	ldr	r3, [r3, #32]
 800b1ea:	1ad3      	subs	r3, r2, r3
 800b1ec:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	7d5b      	ldrb	r3, [r3, #21]
 800b1f6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	617b      	str	r3, [r7, #20]
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d1dc      	bne.n	800b1be <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d004      	beq.n	800b214 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b20a:	6938      	ldr	r0, [r7, #16]
 800b20c:	f7ff fa56 	bl	800a6bc <tcp_abort>
 800b210:	e000      	b.n	800b214 <tcp_kill_prio+0x8c>
    return;
 800b212:	bf00      	nop
  }
}
 800b214:	3718      	adds	r7, #24
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	2000f060 	.word	0x2000f060
 800b220:	2000f054 	.word	0x2000f054

0800b224 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b086      	sub	sp, #24
 800b228:	af00      	add	r7, sp, #0
 800b22a:	4603      	mov	r3, r0
 800b22c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b22e:	79fb      	ldrb	r3, [r7, #7]
 800b230:	2b08      	cmp	r3, #8
 800b232:	d009      	beq.n	800b248 <tcp_kill_state+0x24>
 800b234:	79fb      	ldrb	r3, [r7, #7]
 800b236:	2b09      	cmp	r3, #9
 800b238:	d006      	beq.n	800b248 <tcp_kill_state+0x24>
 800b23a:	4b1a      	ldr	r3, [pc, #104]	; (800b2a4 <tcp_kill_state+0x80>)
 800b23c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800b240:	4919      	ldr	r1, [pc, #100]	; (800b2a8 <tcp_kill_state+0x84>)
 800b242:	481a      	ldr	r0, [pc, #104]	; (800b2ac <tcp_kill_state+0x88>)
 800b244:	f007 f888 	bl	8012358 <iprintf>

  inactivity = 0;
 800b248:	2300      	movs	r3, #0
 800b24a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b24c:	2300      	movs	r3, #0
 800b24e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b250:	4b17      	ldr	r3, [pc, #92]	; (800b2b0 <tcp_kill_state+0x8c>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	617b      	str	r3, [r7, #20]
 800b256:	e017      	b.n	800b288 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	7d1b      	ldrb	r3, [r3, #20]
 800b25c:	79fa      	ldrb	r2, [r7, #7]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d10f      	bne.n	800b282 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b262:	4b14      	ldr	r3, [pc, #80]	; (800b2b4 <tcp_kill_state+0x90>)
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	6a1b      	ldr	r3, [r3, #32]
 800b26a:	1ad3      	subs	r3, r2, r3
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	429a      	cmp	r2, r3
 800b270:	d807      	bhi.n	800b282 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b272:	4b10      	ldr	r3, [pc, #64]	; (800b2b4 <tcp_kill_state+0x90>)
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	6a1b      	ldr	r3, [r3, #32]
 800b27a:	1ad3      	subs	r3, r2, r3
 800b27c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	617b      	str	r3, [r7, #20]
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1e4      	bne.n	800b258 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d003      	beq.n	800b29c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b294:	2100      	movs	r1, #0
 800b296:	6938      	ldr	r0, [r7, #16]
 800b298:	f7ff f952 	bl	800a540 <tcp_abandon>
  }
}
 800b29c:	bf00      	nop
 800b29e:	3718      	adds	r7, #24
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	08013e3c 	.word	0x08013e3c
 800b2a8:	080143c8 	.word	0x080143c8
 800b2ac:	08013e80 	.word	0x08013e80
 800b2b0:	2000f060 	.word	0x2000f060
 800b2b4:	2000f054 	.word	0x2000f054

0800b2b8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2c6:	4b12      	ldr	r3, [pc, #72]	; (800b310 <tcp_kill_timewait+0x58>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	60fb      	str	r3, [r7, #12]
 800b2cc:	e012      	b.n	800b2f4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b2ce:	4b11      	ldr	r3, [pc, #68]	; (800b314 <tcp_kill_timewait+0x5c>)
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	1ad3      	subs	r3, r2, r3
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d807      	bhi.n	800b2ee <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b2de:	4b0d      	ldr	r3, [pc, #52]	; (800b314 <tcp_kill_timewait+0x5c>)
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	6a1b      	ldr	r3, [r3, #32]
 800b2e6:	1ad3      	subs	r3, r2, r3
 800b2e8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	68db      	ldr	r3, [r3, #12]
 800b2f2:	60fb      	str	r3, [r7, #12]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d1e9      	bne.n	800b2ce <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b300:	68b8      	ldr	r0, [r7, #8]
 800b302:	f7ff f9db 	bl	800a6bc <tcp_abort>
  }
}
 800b306:	bf00      	nop
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	2000f064 	.word	0x2000f064
 800b314:	2000f054 	.word	0x2000f054

0800b318 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b31e:	4b10      	ldr	r3, [pc, #64]	; (800b360 <tcp_handle_closepend+0x48>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b324:	e014      	b.n	800b350 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	8b5b      	ldrh	r3, [r3, #26]
 800b330:	f003 0308 	and.w	r3, r3, #8
 800b334:	2b00      	cmp	r3, #0
 800b336:	d009      	beq.n	800b34c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	8b5b      	ldrh	r3, [r3, #26]
 800b33c:	f023 0308 	bic.w	r3, r3, #8
 800b340:	b29a      	uxth	r2, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f7ff f864 	bl	800a414 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d1e7      	bne.n	800b326 <tcp_handle_closepend+0xe>
  }
}
 800b356:	bf00      	nop
 800b358:	bf00      	nop
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	2000f060 	.word	0x2000f060

0800b364 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	4603      	mov	r3, r0
 800b36c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b36e:	2001      	movs	r0, #1
 800b370:	f7fd fcf6 	bl	8008d60 <memp_malloc>
 800b374:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d126      	bne.n	800b3ca <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b37c:	f7ff ffcc 	bl	800b318 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b380:	f7ff ff9a 	bl	800b2b8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b384:	2001      	movs	r0, #1
 800b386:	f7fd fceb 	bl	8008d60 <memp_malloc>
 800b38a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d11b      	bne.n	800b3ca <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b392:	2009      	movs	r0, #9
 800b394:	f7ff ff46 	bl	800b224 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b398:	2001      	movs	r0, #1
 800b39a:	f7fd fce1 	bl	8008d60 <memp_malloc>
 800b39e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d111      	bne.n	800b3ca <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b3a6:	2008      	movs	r0, #8
 800b3a8:	f7ff ff3c 	bl	800b224 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b3ac:	2001      	movs	r0, #1
 800b3ae:	f7fd fcd7 	bl	8008d60 <memp_malloc>
 800b3b2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d107      	bne.n	800b3ca <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b3ba:	79fb      	ldrb	r3, [r7, #7]
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7ff fee3 	bl	800b188 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b3c2:	2001      	movs	r0, #1
 800b3c4:	f7fd fccc 	bl	8008d60 <memp_malloc>
 800b3c8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d03f      	beq.n	800b450 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b3d0:	229c      	movs	r2, #156	; 0x9c
 800b3d2:	2100      	movs	r1, #0
 800b3d4:	68f8      	ldr	r0, [r7, #12]
 800b3d6:	f007 f824 	bl	8012422 <memset>
    pcb->prio = prio;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	79fa      	ldrb	r2, [r7, #7]
 800b3de:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b3e6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b3f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	22ff      	movs	r2, #255	; 0xff
 800b3fe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b406:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2206      	movs	r2, #6
 800b40c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2206      	movs	r2, #6
 800b414:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b41c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2201      	movs	r2, #1
 800b422:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b426:	4b0d      	ldr	r3, [pc, #52]	; (800b45c <tcp_alloc+0xf8>)
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b42e:	4b0c      	ldr	r3, [pc, #48]	; (800b460 <tcp_alloc+0xfc>)
 800b430:	781a      	ldrb	r2, [r3, #0]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b43c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	4a08      	ldr	r2, [pc, #32]	; (800b464 <tcp_alloc+0x100>)
 800b444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	4a07      	ldr	r2, [pc, #28]	; (800b468 <tcp_alloc+0x104>)
 800b44c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b450:	68fb      	ldr	r3, [r7, #12]
}
 800b452:	4618      	mov	r0, r3
 800b454:	3710      	adds	r7, #16
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	2000f054 	.word	0x2000f054
 800b460:	2000f06a 	.word	0x2000f06a
 800b464:	0800b11d 	.word	0x0800b11d
 800b468:	006ddd00 	.word	0x006ddd00

0800b46c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b082      	sub	sp, #8
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d107      	bne.n	800b48a <tcp_pcb_purge+0x1e>
 800b47a:	4b21      	ldr	r3, [pc, #132]	; (800b500 <tcp_pcb_purge+0x94>)
 800b47c:	f640 0251 	movw	r2, #2129	; 0x851
 800b480:	4920      	ldr	r1, [pc, #128]	; (800b504 <tcp_pcb_purge+0x98>)
 800b482:	4821      	ldr	r0, [pc, #132]	; (800b508 <tcp_pcb_purge+0x9c>)
 800b484:	f006 ff68 	bl	8012358 <iprintf>
 800b488:	e037      	b.n	800b4fa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	7d1b      	ldrb	r3, [r3, #20]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d033      	beq.n	800b4fa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b496:	2b0a      	cmp	r3, #10
 800b498:	d02f      	beq.n	800b4fa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d02b      	beq.n	800b4fa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d007      	beq.n	800b4ba <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7fe fb70 	bl	8009b94 <pbuf_free>
      pcb->refused_data = NULL;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d002      	beq.n	800b4c8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f986 	bl	800b7d4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4ce:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7ff fdc7 	bl	800b068 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7ff fdc2 	bl	800b068 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	66da      	str	r2, [r3, #108]	; 0x6c
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b4fa:	3708      	adds	r7, #8
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	08013e3c 	.word	0x08013e3c
 800b504:	08014488 	.word	0x08014488
 800b508:	08013e80 	.word	0x08013e80

0800b50c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d106      	bne.n	800b52a <tcp_pcb_remove+0x1e>
 800b51c:	4b3e      	ldr	r3, [pc, #248]	; (800b618 <tcp_pcb_remove+0x10c>)
 800b51e:	f640 0283 	movw	r2, #2179	; 0x883
 800b522:	493e      	ldr	r1, [pc, #248]	; (800b61c <tcp_pcb_remove+0x110>)
 800b524:	483e      	ldr	r0, [pc, #248]	; (800b620 <tcp_pcb_remove+0x114>)
 800b526:	f006 ff17 	bl	8012358 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d106      	bne.n	800b53e <tcp_pcb_remove+0x32>
 800b530:	4b39      	ldr	r3, [pc, #228]	; (800b618 <tcp_pcb_remove+0x10c>)
 800b532:	f640 0284 	movw	r2, #2180	; 0x884
 800b536:	493b      	ldr	r1, [pc, #236]	; (800b624 <tcp_pcb_remove+0x118>)
 800b538:	4839      	ldr	r0, [pc, #228]	; (800b620 <tcp_pcb_remove+0x114>)
 800b53a:	f006 ff0d 	bl	8012358 <iprintf>

  TCP_RMV(pcblist, pcb);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	429a      	cmp	r2, r3
 800b546:	d105      	bne.n	800b554 <tcp_pcb_remove+0x48>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	68da      	ldr	r2, [r3, #12]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	601a      	str	r2, [r3, #0]
 800b552:	e013      	b.n	800b57c <tcp_pcb_remove+0x70>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	60fb      	str	r3, [r7, #12]
 800b55a:	e00c      	b.n	800b576 <tcp_pcb_remove+0x6a>
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	683a      	ldr	r2, [r7, #0]
 800b562:	429a      	cmp	r2, r3
 800b564:	d104      	bne.n	800b570 <tcp_pcb_remove+0x64>
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	68da      	ldr	r2, [r3, #12]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	60da      	str	r2, [r3, #12]
 800b56e:	e005      	b.n	800b57c <tcp_pcb_remove+0x70>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	60fb      	str	r3, [r7, #12]
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1ef      	bne.n	800b55c <tcp_pcb_remove+0x50>
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	2200      	movs	r2, #0
 800b580:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b582:	6838      	ldr	r0, [r7, #0]
 800b584:	f7ff ff72 	bl	800b46c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	7d1b      	ldrb	r3, [r3, #20]
 800b58c:	2b0a      	cmp	r3, #10
 800b58e:	d013      	beq.n	800b5b8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b594:	2b01      	cmp	r3, #1
 800b596:	d00f      	beq.n	800b5b8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	8b5b      	ldrh	r3, [r3, #26]
 800b59c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d009      	beq.n	800b5b8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	8b5b      	ldrh	r3, [r3, #26]
 800b5a8:	f043 0302 	orr.w	r3, r3, #2
 800b5ac:	b29a      	uxth	r2, r3
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b5b2:	6838      	ldr	r0, [r7, #0]
 800b5b4:	f002 ff6e 	bl	800e494 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	7d1b      	ldrb	r3, [r3, #20]
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d020      	beq.n	800b602 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d006      	beq.n	800b5d6 <tcp_pcb_remove+0xca>
 800b5c8:	4b13      	ldr	r3, [pc, #76]	; (800b618 <tcp_pcb_remove+0x10c>)
 800b5ca:	f640 0293 	movw	r2, #2195	; 0x893
 800b5ce:	4916      	ldr	r1, [pc, #88]	; (800b628 <tcp_pcb_remove+0x11c>)
 800b5d0:	4813      	ldr	r0, [pc, #76]	; (800b620 <tcp_pcb_remove+0x114>)
 800b5d2:	f006 fec1 	bl	8012358 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d006      	beq.n	800b5ec <tcp_pcb_remove+0xe0>
 800b5de:	4b0e      	ldr	r3, [pc, #56]	; (800b618 <tcp_pcb_remove+0x10c>)
 800b5e0:	f640 0294 	movw	r2, #2196	; 0x894
 800b5e4:	4911      	ldr	r1, [pc, #68]	; (800b62c <tcp_pcb_remove+0x120>)
 800b5e6:	480e      	ldr	r0, [pc, #56]	; (800b620 <tcp_pcb_remove+0x114>)
 800b5e8:	f006 feb6 	bl	8012358 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d006      	beq.n	800b602 <tcp_pcb_remove+0xf6>
 800b5f4:	4b08      	ldr	r3, [pc, #32]	; (800b618 <tcp_pcb_remove+0x10c>)
 800b5f6:	f640 0296 	movw	r2, #2198	; 0x896
 800b5fa:	490d      	ldr	r1, [pc, #52]	; (800b630 <tcp_pcb_remove+0x124>)
 800b5fc:	4808      	ldr	r0, [pc, #32]	; (800b620 <tcp_pcb_remove+0x114>)
 800b5fe:	f006 feab 	bl	8012358 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	2200      	movs	r2, #0
 800b606:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	2200      	movs	r2, #0
 800b60c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b60e:	bf00      	nop
 800b610:	3710      	adds	r7, #16
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	08013e3c 	.word	0x08013e3c
 800b61c:	080144a4 	.word	0x080144a4
 800b620:	08013e80 	.word	0x08013e80
 800b624:	080144c0 	.word	0x080144c0
 800b628:	080144e0 	.word	0x080144e0
 800b62c:	080144f8 	.word	0x080144f8
 800b630:	08014514 	.word	0x08014514

0800b634 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d106      	bne.n	800b650 <tcp_next_iss+0x1c>
 800b642:	4b0a      	ldr	r3, [pc, #40]	; (800b66c <tcp_next_iss+0x38>)
 800b644:	f640 02af 	movw	r2, #2223	; 0x8af
 800b648:	4909      	ldr	r1, [pc, #36]	; (800b670 <tcp_next_iss+0x3c>)
 800b64a:	480a      	ldr	r0, [pc, #40]	; (800b674 <tcp_next_iss+0x40>)
 800b64c:	f006 fe84 	bl	8012358 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b650:	4b09      	ldr	r3, [pc, #36]	; (800b678 <tcp_next_iss+0x44>)
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	4b09      	ldr	r3, [pc, #36]	; (800b67c <tcp_next_iss+0x48>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4413      	add	r3, r2
 800b65a:	4a07      	ldr	r2, [pc, #28]	; (800b678 <tcp_next_iss+0x44>)
 800b65c:	6013      	str	r3, [r2, #0]
  return iss;
 800b65e:	4b06      	ldr	r3, [pc, #24]	; (800b678 <tcp_next_iss+0x44>)
 800b660:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b662:	4618      	mov	r0, r3
 800b664:	3708      	adds	r7, #8
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	08013e3c 	.word	0x08013e3c
 800b670:	0801452c 	.word	0x0801452c
 800b674:	08013e80 	.word	0x08013e80
 800b678:	20000028 	.word	0x20000028
 800b67c:	2000f054 	.word	0x2000f054

0800b680 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b086      	sub	sp, #24
 800b684:	af00      	add	r7, sp, #0
 800b686:	4603      	mov	r3, r0
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	607a      	str	r2, [r7, #4]
 800b68c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d106      	bne.n	800b6a2 <tcp_eff_send_mss_netif+0x22>
 800b694:	4b14      	ldr	r3, [pc, #80]	; (800b6e8 <tcp_eff_send_mss_netif+0x68>)
 800b696:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b69a:	4914      	ldr	r1, [pc, #80]	; (800b6ec <tcp_eff_send_mss_netif+0x6c>)
 800b69c:	4814      	ldr	r0, [pc, #80]	; (800b6f0 <tcp_eff_send_mss_netif+0x70>)
 800b69e:	f006 fe5b 	bl	8012358 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d101      	bne.n	800b6ac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b6a8:	89fb      	ldrh	r3, [r7, #14]
 800b6aa:	e019      	b.n	800b6e0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b6b0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b6b2:	8afb      	ldrh	r3, [r7, #22]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d012      	beq.n	800b6de <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b6b8:	2328      	movs	r3, #40	; 0x28
 800b6ba:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b6bc:	8afa      	ldrh	r2, [r7, #22]
 800b6be:	8abb      	ldrh	r3, [r7, #20]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d904      	bls.n	800b6ce <tcp_eff_send_mss_netif+0x4e>
 800b6c4:	8afa      	ldrh	r2, [r7, #22]
 800b6c6:	8abb      	ldrh	r3, [r7, #20]
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	e000      	b.n	800b6d0 <tcp_eff_send_mss_netif+0x50>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b6d2:	8a7a      	ldrh	r2, [r7, #18]
 800b6d4:	89fb      	ldrh	r3, [r7, #14]
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	bf28      	it	cs
 800b6da:	4613      	movcs	r3, r2
 800b6dc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b6de:	89fb      	ldrh	r3, [r7, #14]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3718      	adds	r7, #24
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	08013e3c 	.word	0x08013e3c
 800b6ec:	08014548 	.word	0x08014548
 800b6f0:	08013e80 	.word	0x08013e80

0800b6f4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d119      	bne.n	800b73c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b708:	4b10      	ldr	r3, [pc, #64]	; (800b74c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b70a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b70e:	4910      	ldr	r1, [pc, #64]	; (800b750 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b710:	4810      	ldr	r0, [pc, #64]	; (800b754 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b712:	f006 fe21 	bl	8012358 <iprintf>

  while (pcb != NULL) {
 800b716:	e011      	b.n	800b73c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	429a      	cmp	r2, r3
 800b722:	d108      	bne.n	800b736 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f7fe ffc6 	bl	800a6bc <tcp_abort>
      pcb = next;
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	60fb      	str	r3, [r7, #12]
 800b734:	e002      	b.n	800b73c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1ea      	bne.n	800b718 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b742:	bf00      	nop
 800b744:	bf00      	nop
 800b746:	3710      	adds	r7, #16
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	08013e3c 	.word	0x08013e3c
 800b750:	08014570 	.word	0x08014570
 800b754:	08013e80 	.word	0x08013e80

0800b758 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d02a      	beq.n	800b7be <tcp_netif_ip_addr_changed+0x66>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d026      	beq.n	800b7be <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b770:	4b15      	ldr	r3, [pc, #84]	; (800b7c8 <tcp_netif_ip_addr_changed+0x70>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4619      	mov	r1, r3
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f7ff ffbc 	bl	800b6f4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b77c:	4b13      	ldr	r3, [pc, #76]	; (800b7cc <tcp_netif_ip_addr_changed+0x74>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4619      	mov	r1, r3
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f7ff ffb6 	bl	800b6f4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d017      	beq.n	800b7be <tcp_netif_ip_addr_changed+0x66>
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d013      	beq.n	800b7be <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b796:	4b0e      	ldr	r3, [pc, #56]	; (800b7d0 <tcp_netif_ip_addr_changed+0x78>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	60fb      	str	r3, [r7, #12]
 800b79c:	e00c      	b.n	800b7b8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d103      	bne.n	800b7b2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	60fb      	str	r3, [r7, #12]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d1ef      	bne.n	800b79e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b7be:	bf00      	nop
 800b7c0:	3710      	adds	r7, #16
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	2000f060 	.word	0x2000f060
 800b7cc:	2000f058 	.word	0x2000f058
 800b7d0:	2000f05c 	.word	0x2000f05c

0800b7d4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d007      	beq.n	800b7f4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7ff fc3d 	bl	800b068 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b7f4:	bf00      	nop
 800b7f6:	3708      	adds	r7, #8
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b7fc:	b590      	push	{r4, r7, lr}
 800b7fe:	b08d      	sub	sp, #52	; 0x34
 800b800:	af04      	add	r7, sp, #16
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d105      	bne.n	800b818 <tcp_input+0x1c>
 800b80c:	4b9b      	ldr	r3, [pc, #620]	; (800ba7c <tcp_input+0x280>)
 800b80e:	2283      	movs	r2, #131	; 0x83
 800b810:	499b      	ldr	r1, [pc, #620]	; (800ba80 <tcp_input+0x284>)
 800b812:	489c      	ldr	r0, [pc, #624]	; (800ba84 <tcp_input+0x288>)
 800b814:	f006 fda0 	bl	8012358 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	4a9a      	ldr	r2, [pc, #616]	; (800ba88 <tcp_input+0x28c>)
 800b81e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	895b      	ldrh	r3, [r3, #10]
 800b824:	2b13      	cmp	r3, #19
 800b826:	f240 83d1 	bls.w	800bfcc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b82a:	4b98      	ldr	r3, [pc, #608]	; (800ba8c <tcp_input+0x290>)
 800b82c:	695b      	ldr	r3, [r3, #20]
 800b82e:	4a97      	ldr	r2, [pc, #604]	; (800ba8c <tcp_input+0x290>)
 800b830:	6812      	ldr	r2, [r2, #0]
 800b832:	4611      	mov	r1, r2
 800b834:	4618      	mov	r0, r3
 800b836:	f005 fc47 	bl	80110c8 <ip4_addr_isbroadcast_u32>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f040 83c7 	bne.w	800bfd0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b842:	4b92      	ldr	r3, [pc, #584]	; (800ba8c <tcp_input+0x290>)
 800b844:	695b      	ldr	r3, [r3, #20]
 800b846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b84a:	2be0      	cmp	r3, #224	; 0xe0
 800b84c:	f000 83c0 	beq.w	800bfd0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b850:	4b8d      	ldr	r3, [pc, #564]	; (800ba88 <tcp_input+0x28c>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	899b      	ldrh	r3, [r3, #12]
 800b856:	b29b      	uxth	r3, r3
 800b858:	4618      	mov	r0, r3
 800b85a:	f7fc fda9 	bl	80083b0 <lwip_htons>
 800b85e:	4603      	mov	r3, r0
 800b860:	0b1b      	lsrs	r3, r3, #12
 800b862:	b29b      	uxth	r3, r3
 800b864:	b2db      	uxtb	r3, r3
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b86a:	7cbb      	ldrb	r3, [r7, #18]
 800b86c:	2b13      	cmp	r3, #19
 800b86e:	f240 83b1 	bls.w	800bfd4 <tcp_input+0x7d8>
 800b872:	7cbb      	ldrb	r3, [r7, #18]
 800b874:	b29a      	uxth	r2, r3
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	891b      	ldrh	r3, [r3, #8]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	f200 83aa 	bhi.w	800bfd4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b880:	7cbb      	ldrb	r3, [r7, #18]
 800b882:	b29b      	uxth	r3, r3
 800b884:	3b14      	subs	r3, #20
 800b886:	b29a      	uxth	r2, r3
 800b888:	4b81      	ldr	r3, [pc, #516]	; (800ba90 <tcp_input+0x294>)
 800b88a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b88c:	4b81      	ldr	r3, [pc, #516]	; (800ba94 <tcp_input+0x298>)
 800b88e:	2200      	movs	r2, #0
 800b890:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	895a      	ldrh	r2, [r3, #10]
 800b896:	7cbb      	ldrb	r3, [r7, #18]
 800b898:	b29b      	uxth	r3, r3
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d309      	bcc.n	800b8b2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b89e:	4b7c      	ldr	r3, [pc, #496]	; (800ba90 <tcp_input+0x294>)
 800b8a0:	881a      	ldrh	r2, [r3, #0]
 800b8a2:	4b7d      	ldr	r3, [pc, #500]	; (800ba98 <tcp_input+0x29c>)
 800b8a4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b8a6:	7cbb      	ldrb	r3, [r7, #18]
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7fe f8ec 	bl	8009a88 <pbuf_remove_header>
 800b8b0:	e04e      	b.n	800b950 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d105      	bne.n	800b8c6 <tcp_input+0xca>
 800b8ba:	4b70      	ldr	r3, [pc, #448]	; (800ba7c <tcp_input+0x280>)
 800b8bc:	22c2      	movs	r2, #194	; 0xc2
 800b8be:	4977      	ldr	r1, [pc, #476]	; (800ba9c <tcp_input+0x2a0>)
 800b8c0:	4870      	ldr	r0, [pc, #448]	; (800ba84 <tcp_input+0x288>)
 800b8c2:	f006 fd49 	bl	8012358 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b8c6:	2114      	movs	r1, #20
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f7fe f8dd 	bl	8009a88 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	895a      	ldrh	r2, [r3, #10]
 800b8d2:	4b71      	ldr	r3, [pc, #452]	; (800ba98 <tcp_input+0x29c>)
 800b8d4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b8d6:	4b6e      	ldr	r3, [pc, #440]	; (800ba90 <tcp_input+0x294>)
 800b8d8:	881a      	ldrh	r2, [r3, #0]
 800b8da:	4b6f      	ldr	r3, [pc, #444]	; (800ba98 <tcp_input+0x29c>)
 800b8dc:	881b      	ldrh	r3, [r3, #0]
 800b8de:	1ad3      	subs	r3, r2, r3
 800b8e0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b8e2:	4b6d      	ldr	r3, [pc, #436]	; (800ba98 <tcp_input+0x29c>)
 800b8e4:	881b      	ldrh	r3, [r3, #0]
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f7fe f8cd 	bl	8009a88 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	895b      	ldrh	r3, [r3, #10]
 800b8f4:	8a3a      	ldrh	r2, [r7, #16]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	f200 836e 	bhi.w	800bfd8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	4a64      	ldr	r2, [pc, #400]	; (800ba94 <tcp_input+0x298>)
 800b904:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	8a3a      	ldrh	r2, [r7, #16]
 800b90c:	4611      	mov	r1, r2
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fe f8ba 	bl	8009a88 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	891a      	ldrh	r2, [r3, #8]
 800b918:	8a3b      	ldrh	r3, [r7, #16]
 800b91a:	1ad3      	subs	r3, r2, r3
 800b91c:	b29a      	uxth	r2, r3
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	895b      	ldrh	r3, [r3, #10]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d005      	beq.n	800b936 <tcp_input+0x13a>
 800b92a:	4b54      	ldr	r3, [pc, #336]	; (800ba7c <tcp_input+0x280>)
 800b92c:	22df      	movs	r2, #223	; 0xdf
 800b92e:	495c      	ldr	r1, [pc, #368]	; (800baa0 <tcp_input+0x2a4>)
 800b930:	4854      	ldr	r0, [pc, #336]	; (800ba84 <tcp_input+0x288>)
 800b932:	f006 fd11 	bl	8012358 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	891a      	ldrh	r2, [r3, #8]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	891b      	ldrh	r3, [r3, #8]
 800b940:	429a      	cmp	r2, r3
 800b942:	d005      	beq.n	800b950 <tcp_input+0x154>
 800b944:	4b4d      	ldr	r3, [pc, #308]	; (800ba7c <tcp_input+0x280>)
 800b946:	22e0      	movs	r2, #224	; 0xe0
 800b948:	4956      	ldr	r1, [pc, #344]	; (800baa4 <tcp_input+0x2a8>)
 800b94a:	484e      	ldr	r0, [pc, #312]	; (800ba84 <tcp_input+0x288>)
 800b94c:	f006 fd04 	bl	8012358 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b950:	4b4d      	ldr	r3, [pc, #308]	; (800ba88 <tcp_input+0x28c>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	881b      	ldrh	r3, [r3, #0]
 800b956:	b29b      	uxth	r3, r3
 800b958:	4a4b      	ldr	r2, [pc, #300]	; (800ba88 <tcp_input+0x28c>)
 800b95a:	6814      	ldr	r4, [r2, #0]
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7fc fd27 	bl	80083b0 <lwip_htons>
 800b962:	4603      	mov	r3, r0
 800b964:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b966:	4b48      	ldr	r3, [pc, #288]	; (800ba88 <tcp_input+0x28c>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	885b      	ldrh	r3, [r3, #2]
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	4a46      	ldr	r2, [pc, #280]	; (800ba88 <tcp_input+0x28c>)
 800b970:	6814      	ldr	r4, [r2, #0]
 800b972:	4618      	mov	r0, r3
 800b974:	f7fc fd1c 	bl	80083b0 <lwip_htons>
 800b978:	4603      	mov	r3, r0
 800b97a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b97c:	4b42      	ldr	r3, [pc, #264]	; (800ba88 <tcp_input+0x28c>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	4a41      	ldr	r2, [pc, #260]	; (800ba88 <tcp_input+0x28c>)
 800b984:	6814      	ldr	r4, [r2, #0]
 800b986:	4618      	mov	r0, r3
 800b988:	f7fc fd27 	bl	80083da <lwip_htonl>
 800b98c:	4603      	mov	r3, r0
 800b98e:	6063      	str	r3, [r4, #4]
 800b990:	6863      	ldr	r3, [r4, #4]
 800b992:	4a45      	ldr	r2, [pc, #276]	; (800baa8 <tcp_input+0x2ac>)
 800b994:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b996:	4b3c      	ldr	r3, [pc, #240]	; (800ba88 <tcp_input+0x28c>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	4a3a      	ldr	r2, [pc, #232]	; (800ba88 <tcp_input+0x28c>)
 800b99e:	6814      	ldr	r4, [r2, #0]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7fc fd1a 	bl	80083da <lwip_htonl>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	60a3      	str	r3, [r4, #8]
 800b9aa:	68a3      	ldr	r3, [r4, #8]
 800b9ac:	4a3f      	ldr	r2, [pc, #252]	; (800baac <tcp_input+0x2b0>)
 800b9ae:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b9b0:	4b35      	ldr	r3, [pc, #212]	; (800ba88 <tcp_input+0x28c>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	89db      	ldrh	r3, [r3, #14]
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	4a33      	ldr	r2, [pc, #204]	; (800ba88 <tcp_input+0x28c>)
 800b9ba:	6814      	ldr	r4, [r2, #0]
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7fc fcf7 	bl	80083b0 <lwip_htons>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b9c6:	4b30      	ldr	r3, [pc, #192]	; (800ba88 <tcp_input+0x28c>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	899b      	ldrh	r3, [r3, #12]
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7fc fcee 	bl	80083b0 <lwip_htons>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9dc:	b2da      	uxtb	r2, r3
 800b9de:	4b34      	ldr	r3, [pc, #208]	; (800bab0 <tcp_input+0x2b4>)
 800b9e0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	891a      	ldrh	r2, [r3, #8]
 800b9e6:	4b33      	ldr	r3, [pc, #204]	; (800bab4 <tcp_input+0x2b8>)
 800b9e8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b9ea:	4b31      	ldr	r3, [pc, #196]	; (800bab0 <tcp_input+0x2b4>)
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	f003 0303 	and.w	r3, r3, #3
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00c      	beq.n	800ba10 <tcp_input+0x214>
    tcplen++;
 800b9f6:	4b2f      	ldr	r3, [pc, #188]	; (800bab4 <tcp_input+0x2b8>)
 800b9f8:	881b      	ldrh	r3, [r3, #0]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	4b2d      	ldr	r3, [pc, #180]	; (800bab4 <tcp_input+0x2b8>)
 800ba00:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	891a      	ldrh	r2, [r3, #8]
 800ba06:	4b2b      	ldr	r3, [pc, #172]	; (800bab4 <tcp_input+0x2b8>)
 800ba08:	881b      	ldrh	r3, [r3, #0]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	f200 82e6 	bhi.w	800bfdc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ba10:	2300      	movs	r3, #0
 800ba12:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba14:	4b28      	ldr	r3, [pc, #160]	; (800bab8 <tcp_input+0x2bc>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	61fb      	str	r3, [r7, #28]
 800ba1a:	e09d      	b.n	800bb58 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ba1c:	69fb      	ldr	r3, [r7, #28]
 800ba1e:	7d1b      	ldrb	r3, [r3, #20]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d105      	bne.n	800ba30 <tcp_input+0x234>
 800ba24:	4b15      	ldr	r3, [pc, #84]	; (800ba7c <tcp_input+0x280>)
 800ba26:	22fb      	movs	r2, #251	; 0xfb
 800ba28:	4924      	ldr	r1, [pc, #144]	; (800babc <tcp_input+0x2c0>)
 800ba2a:	4816      	ldr	r0, [pc, #88]	; (800ba84 <tcp_input+0x288>)
 800ba2c:	f006 fc94 	bl	8012358 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	7d1b      	ldrb	r3, [r3, #20]
 800ba34:	2b0a      	cmp	r3, #10
 800ba36:	d105      	bne.n	800ba44 <tcp_input+0x248>
 800ba38:	4b10      	ldr	r3, [pc, #64]	; (800ba7c <tcp_input+0x280>)
 800ba3a:	22fc      	movs	r2, #252	; 0xfc
 800ba3c:	4920      	ldr	r1, [pc, #128]	; (800bac0 <tcp_input+0x2c4>)
 800ba3e:	4811      	ldr	r0, [pc, #68]	; (800ba84 <tcp_input+0x288>)
 800ba40:	f006 fc8a 	bl	8012358 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ba44:	69fb      	ldr	r3, [r7, #28]
 800ba46:	7d1b      	ldrb	r3, [r3, #20]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d105      	bne.n	800ba58 <tcp_input+0x25c>
 800ba4c:	4b0b      	ldr	r3, [pc, #44]	; (800ba7c <tcp_input+0x280>)
 800ba4e:	22fd      	movs	r2, #253	; 0xfd
 800ba50:	491c      	ldr	r1, [pc, #112]	; (800bac4 <tcp_input+0x2c8>)
 800ba52:	480c      	ldr	r0, [pc, #48]	; (800ba84 <tcp_input+0x288>)
 800ba54:	f006 fc80 	bl	8012358 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ba58:	69fb      	ldr	r3, [r7, #28]
 800ba5a:	7a1b      	ldrb	r3, [r3, #8]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d033      	beq.n	800bac8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	7a1a      	ldrb	r2, [r3, #8]
 800ba64:	4b09      	ldr	r3, [pc, #36]	; (800ba8c <tcp_input+0x290>)
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d029      	beq.n	800bac8 <tcp_input+0x2cc>
      prev = pcb;
 800ba74:	69fb      	ldr	r3, [r7, #28]
 800ba76:	61bb      	str	r3, [r7, #24]
      continue;
 800ba78:	e06b      	b.n	800bb52 <tcp_input+0x356>
 800ba7a:	bf00      	nop
 800ba7c:	080145a4 	.word	0x080145a4
 800ba80:	080145d8 	.word	0x080145d8
 800ba84:	080145f0 	.word	0x080145f0
 800ba88:	2000f07c 	.word	0x2000f07c
 800ba8c:	20009740 	.word	0x20009740
 800ba90:	2000f080 	.word	0x2000f080
 800ba94:	2000f084 	.word	0x2000f084
 800ba98:	2000f082 	.word	0x2000f082
 800ba9c:	08014618 	.word	0x08014618
 800baa0:	08014628 	.word	0x08014628
 800baa4:	08014634 	.word	0x08014634
 800baa8:	2000f08c 	.word	0x2000f08c
 800baac:	2000f090 	.word	0x2000f090
 800bab0:	2000f098 	.word	0x2000f098
 800bab4:	2000f096 	.word	0x2000f096
 800bab8:	2000f060 	.word	0x2000f060
 800babc:	08014654 	.word	0x08014654
 800bac0:	0801467c 	.word	0x0801467c
 800bac4:	080146a8 	.word	0x080146a8
    }

    if (pcb->remote_port == tcphdr->src &&
 800bac8:	69fb      	ldr	r3, [r7, #28]
 800baca:	8b1a      	ldrh	r2, [r3, #24]
 800bacc:	4b72      	ldr	r3, [pc, #456]	; (800bc98 <tcp_input+0x49c>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	881b      	ldrh	r3, [r3, #0]
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d13a      	bne.n	800bb4e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800bad8:	69fb      	ldr	r3, [r7, #28]
 800bada:	8ada      	ldrh	r2, [r3, #22]
 800badc:	4b6e      	ldr	r3, [pc, #440]	; (800bc98 <tcp_input+0x49c>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	885b      	ldrh	r3, [r3, #2]
 800bae2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d132      	bne.n	800bb4e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bae8:	69fb      	ldr	r3, [r7, #28]
 800baea:	685a      	ldr	r2, [r3, #4]
 800baec:	4b6b      	ldr	r3, [pc, #428]	; (800bc9c <tcp_input+0x4a0>)
 800baee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d12c      	bne.n	800bb4e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	4b68      	ldr	r3, [pc, #416]	; (800bc9c <tcp_input+0x4a0>)
 800bafa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d126      	bne.n	800bb4e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	69fa      	ldr	r2, [r7, #28]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d106      	bne.n	800bb18 <tcp_input+0x31c>
 800bb0a:	4b65      	ldr	r3, [pc, #404]	; (800bca0 <tcp_input+0x4a4>)
 800bb0c:	f240 120d 	movw	r2, #269	; 0x10d
 800bb10:	4964      	ldr	r1, [pc, #400]	; (800bca4 <tcp_input+0x4a8>)
 800bb12:	4865      	ldr	r0, [pc, #404]	; (800bca8 <tcp_input+0x4ac>)
 800bb14:	f006 fc20 	bl	8012358 <iprintf>
      if (prev != NULL) {
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00a      	beq.n	800bb34 <tcp_input+0x338>
        prev->next = pcb->next;
 800bb1e:	69fb      	ldr	r3, [r7, #28]
 800bb20:	68da      	ldr	r2, [r3, #12]
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800bb26:	4b61      	ldr	r3, [pc, #388]	; (800bcac <tcp_input+0x4b0>)
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800bb2e:	4a5f      	ldr	r2, [pc, #380]	; (800bcac <tcp_input+0x4b0>)
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	69fa      	ldr	r2, [r7, #28]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d111      	bne.n	800bb62 <tcp_input+0x366>
 800bb3e:	4b58      	ldr	r3, [pc, #352]	; (800bca0 <tcp_input+0x4a4>)
 800bb40:	f240 1215 	movw	r2, #277	; 0x115
 800bb44:	495a      	ldr	r1, [pc, #360]	; (800bcb0 <tcp_input+0x4b4>)
 800bb46:	4858      	ldr	r0, [pc, #352]	; (800bca8 <tcp_input+0x4ac>)
 800bb48:	f006 fc06 	bl	8012358 <iprintf>
      break;
 800bb4c:	e009      	b.n	800bb62 <tcp_input+0x366>
    }
    prev = pcb;
 800bb4e:	69fb      	ldr	r3, [r7, #28]
 800bb50:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	61fb      	str	r3, [r7, #28]
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f47f af5e 	bne.w	800ba1c <tcp_input+0x220>
 800bb60:	e000      	b.n	800bb64 <tcp_input+0x368>
      break;
 800bb62:	bf00      	nop
  }

  if (pcb == NULL) {
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	f040 80aa 	bne.w	800bcc0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb6c:	4b51      	ldr	r3, [pc, #324]	; (800bcb4 <tcp_input+0x4b8>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	61fb      	str	r3, [r7, #28]
 800bb72:	e03f      	b.n	800bbf4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	7d1b      	ldrb	r3, [r3, #20]
 800bb78:	2b0a      	cmp	r3, #10
 800bb7a:	d006      	beq.n	800bb8a <tcp_input+0x38e>
 800bb7c:	4b48      	ldr	r3, [pc, #288]	; (800bca0 <tcp_input+0x4a4>)
 800bb7e:	f240 121f 	movw	r2, #287	; 0x11f
 800bb82:	494d      	ldr	r1, [pc, #308]	; (800bcb8 <tcp_input+0x4bc>)
 800bb84:	4848      	ldr	r0, [pc, #288]	; (800bca8 <tcp_input+0x4ac>)
 800bb86:	f006 fbe7 	bl	8012358 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	7a1b      	ldrb	r3, [r3, #8]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d009      	beq.n	800bba6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	7a1a      	ldrb	r2, [r3, #8]
 800bb96:	4b41      	ldr	r3, [pc, #260]	; (800bc9c <tcp_input+0x4a0>)
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb9e:	3301      	adds	r3, #1
 800bba0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d122      	bne.n	800bbec <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	8b1a      	ldrh	r2, [r3, #24]
 800bbaa:	4b3b      	ldr	r3, [pc, #236]	; (800bc98 <tcp_input+0x49c>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	881b      	ldrh	r3, [r3, #0]
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d11b      	bne.n	800bbee <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	8ada      	ldrh	r2, [r3, #22]
 800bbba:	4b37      	ldr	r3, [pc, #220]	; (800bc98 <tcp_input+0x49c>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	885b      	ldrh	r3, [r3, #2]
 800bbc0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d113      	bne.n	800bbee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	685a      	ldr	r2, [r3, #4]
 800bbca:	4b34      	ldr	r3, [pc, #208]	; (800bc9c <tcp_input+0x4a0>)
 800bbcc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d10d      	bne.n	800bbee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	681a      	ldr	r2, [r3, #0]
 800bbd6:	4b31      	ldr	r3, [pc, #196]	; (800bc9c <tcp_input+0x4a0>)
 800bbd8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d107      	bne.n	800bbee <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800bbde:	69f8      	ldr	r0, [r7, #28]
 800bbe0:	f000 fb56 	bl	800c290 <tcp_timewait_input>
        }
        pbuf_free(p);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f7fd ffd5 	bl	8009b94 <pbuf_free>
        return;
 800bbea:	e1fd      	b.n	800bfe8 <tcp_input+0x7ec>
        continue;
 800bbec:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbee:	69fb      	ldr	r3, [r7, #28]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	61fb      	str	r3, [r7, #28]
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d1bc      	bne.n	800bb74 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bbfe:	4b2f      	ldr	r3, [pc, #188]	; (800bcbc <tcp_input+0x4c0>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	617b      	str	r3, [r7, #20]
 800bc04:	e02a      	b.n	800bc5c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	7a1b      	ldrb	r3, [r3, #8]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00c      	beq.n	800bc28 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	7a1a      	ldrb	r2, [r3, #8]
 800bc12:	4b22      	ldr	r3, [pc, #136]	; (800bc9c <tcp_input+0x4a0>)
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d002      	beq.n	800bc28 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	61bb      	str	r3, [r7, #24]
        continue;
 800bc26:	e016      	b.n	800bc56 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	8ada      	ldrh	r2, [r3, #22]
 800bc2c:	4b1a      	ldr	r3, [pc, #104]	; (800bc98 <tcp_input+0x49c>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	885b      	ldrh	r3, [r3, #2]
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d10c      	bne.n	800bc52 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	4b17      	ldr	r3, [pc, #92]	; (800bc9c <tcp_input+0x4a0>)
 800bc3e:	695b      	ldr	r3, [r3, #20]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d00f      	beq.n	800bc64 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d00d      	beq.n	800bc66 <tcp_input+0x46a>
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d009      	beq.n	800bc66 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	617b      	str	r3, [r7, #20]
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d1d1      	bne.n	800bc06 <tcp_input+0x40a>
 800bc62:	e000      	b.n	800bc66 <tcp_input+0x46a>
            break;
 800bc64:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d029      	beq.n	800bcc0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800bc6c:	69bb      	ldr	r3, [r7, #24]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00a      	beq.n	800bc88 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	68da      	ldr	r2, [r3, #12]
 800bc76:	69bb      	ldr	r3, [r7, #24]
 800bc78:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bc7a:	4b10      	ldr	r3, [pc, #64]	; (800bcbc <tcp_input+0x4c0>)
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bc82:	4a0e      	ldr	r2, [pc, #56]	; (800bcbc <tcp_input+0x4c0>)
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800bc88:	6978      	ldr	r0, [r7, #20]
 800bc8a:	f000 fa03 	bl	800c094 <tcp_listen_input>
      }
      pbuf_free(p);
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f7fd ff80 	bl	8009b94 <pbuf_free>
      return;
 800bc94:	e1a8      	b.n	800bfe8 <tcp_input+0x7ec>
 800bc96:	bf00      	nop
 800bc98:	2000f07c 	.word	0x2000f07c
 800bc9c:	20009740 	.word	0x20009740
 800bca0:	080145a4 	.word	0x080145a4
 800bca4:	080146d0 	.word	0x080146d0
 800bca8:	080145f0 	.word	0x080145f0
 800bcac:	2000f060 	.word	0x2000f060
 800bcb0:	080146fc 	.word	0x080146fc
 800bcb4:	2000f064 	.word	0x2000f064
 800bcb8:	08014728 	.word	0x08014728
 800bcbc:	2000f05c 	.word	0x2000f05c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800bcc0:	69fb      	ldr	r3, [r7, #28]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	f000 8158 	beq.w	800bf78 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800bcc8:	4b95      	ldr	r3, [pc, #596]	; (800bf20 <tcp_input+0x724>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	891a      	ldrh	r2, [r3, #8]
 800bcd2:	4b93      	ldr	r3, [pc, #588]	; (800bf20 <tcp_input+0x724>)
 800bcd4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800bcd6:	4a92      	ldr	r2, [pc, #584]	; (800bf20 <tcp_input+0x724>)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800bcdc:	4b91      	ldr	r3, [pc, #580]	; (800bf24 <tcp_input+0x728>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a8f      	ldr	r2, [pc, #572]	; (800bf20 <tcp_input+0x724>)
 800bce2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800bce4:	4b90      	ldr	r3, [pc, #576]	; (800bf28 <tcp_input+0x72c>)
 800bce6:	2200      	movs	r2, #0
 800bce8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800bcea:	4b90      	ldr	r3, [pc, #576]	; (800bf2c <tcp_input+0x730>)
 800bcec:	2200      	movs	r2, #0
 800bcee:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800bcf0:	4b8f      	ldr	r3, [pc, #572]	; (800bf30 <tcp_input+0x734>)
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800bcf6:	4b8f      	ldr	r3, [pc, #572]	; (800bf34 <tcp_input+0x738>)
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	f003 0308 	and.w	r3, r3, #8
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d006      	beq.n	800bd10 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	7b5b      	ldrb	r3, [r3, #13]
 800bd06:	f043 0301 	orr.w	r3, r3, #1
 800bd0a:	b2da      	uxtb	r2, r3
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d017      	beq.n	800bd48 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bd18:	69f8      	ldr	r0, [r7, #28]
 800bd1a:	f7ff f929 	bl	800af70 <tcp_process_refused_data>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	f113 0f0d 	cmn.w	r3, #13
 800bd24:	d007      	beq.n	800bd36 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00c      	beq.n	800bd48 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bd2e:	4b82      	ldr	r3, [pc, #520]	; (800bf38 <tcp_input+0x73c>)
 800bd30:	881b      	ldrh	r3, [r3, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d008      	beq.n	800bd48 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f040 80e3 	bne.w	800bf06 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800bd40:	69f8      	ldr	r0, [r7, #28]
 800bd42:	f003 f9ad 	bl	800f0a0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800bd46:	e0de      	b.n	800bf06 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800bd48:	4a7c      	ldr	r2, [pc, #496]	; (800bf3c <tcp_input+0x740>)
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800bd4e:	69f8      	ldr	r0, [r7, #28]
 800bd50:	f000 fb18 	bl	800c384 <tcp_process>
 800bd54:	4603      	mov	r3, r0
 800bd56:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800bd58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd5c:	f113 0f0d 	cmn.w	r3, #13
 800bd60:	f000 80d3 	beq.w	800bf0a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800bd64:	4b71      	ldr	r3, [pc, #452]	; (800bf2c <tcp_input+0x730>)
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	f003 0308 	and.w	r3, r3, #8
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d015      	beq.n	800bd9c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800bd70:	69fb      	ldr	r3, [r7, #28]
 800bd72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d008      	beq.n	800bd8c <tcp_input+0x590>
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd80:	69fa      	ldr	r2, [r7, #28]
 800bd82:	6912      	ldr	r2, [r2, #16]
 800bd84:	f06f 010d 	mvn.w	r1, #13
 800bd88:	4610      	mov	r0, r2
 800bd8a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bd8c:	69f9      	ldr	r1, [r7, #28]
 800bd8e:	486c      	ldr	r0, [pc, #432]	; (800bf40 <tcp_input+0x744>)
 800bd90:	f7ff fbbc 	bl	800b50c <tcp_pcb_remove>
        tcp_free(pcb);
 800bd94:	69f8      	ldr	r0, [r7, #28]
 800bd96:	f7fe f9a9 	bl	800a0ec <tcp_free>
 800bd9a:	e0da      	b.n	800bf52 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800bda0:	4b63      	ldr	r3, [pc, #396]	; (800bf30 <tcp_input+0x734>)
 800bda2:	881b      	ldrh	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d01d      	beq.n	800bde4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800bda8:	4b61      	ldr	r3, [pc, #388]	; (800bf30 <tcp_input+0x734>)
 800bdaa:	881b      	ldrh	r3, [r3, #0]
 800bdac:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00a      	beq.n	800bdce <tcp_input+0x5d2>
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdbe:	69fa      	ldr	r2, [r7, #28]
 800bdc0:	6910      	ldr	r0, [r2, #16]
 800bdc2:	89fa      	ldrh	r2, [r7, #14]
 800bdc4:	69f9      	ldr	r1, [r7, #28]
 800bdc6:	4798      	blx	r3
 800bdc8:	4603      	mov	r3, r0
 800bdca:	74fb      	strb	r3, [r7, #19]
 800bdcc:	e001      	b.n	800bdd2 <tcp_input+0x5d6>
 800bdce:	2300      	movs	r3, #0
 800bdd0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bdd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bdd6:	f113 0f0d 	cmn.w	r3, #13
 800bdda:	f000 8098 	beq.w	800bf0e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800bdde:	4b54      	ldr	r3, [pc, #336]	; (800bf30 <tcp_input+0x734>)
 800bde0:	2200      	movs	r2, #0
 800bde2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800bde4:	69f8      	ldr	r0, [r7, #28]
 800bde6:	f000 f915 	bl	800c014 <tcp_input_delayed_close>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	f040 8090 	bne.w	800bf12 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800bdf2:	4b4d      	ldr	r3, [pc, #308]	; (800bf28 <tcp_input+0x72c>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d041      	beq.n	800be7e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d006      	beq.n	800be10 <tcp_input+0x614>
 800be02:	4b50      	ldr	r3, [pc, #320]	; (800bf44 <tcp_input+0x748>)
 800be04:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800be08:	494f      	ldr	r1, [pc, #316]	; (800bf48 <tcp_input+0x74c>)
 800be0a:	4850      	ldr	r0, [pc, #320]	; (800bf4c <tcp_input+0x750>)
 800be0c:	f006 faa4 	bl	8012358 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800be10:	69fb      	ldr	r3, [r7, #28]
 800be12:	8b5b      	ldrh	r3, [r3, #26]
 800be14:	f003 0310 	and.w	r3, r3, #16
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d008      	beq.n	800be2e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800be1c:	4b42      	ldr	r3, [pc, #264]	; (800bf28 <tcp_input+0x72c>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4618      	mov	r0, r3
 800be22:	f7fd feb7 	bl	8009b94 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800be26:	69f8      	ldr	r0, [r7, #28]
 800be28:	f7fe fc48 	bl	800a6bc <tcp_abort>
            goto aborted;
 800be2c:	e091      	b.n	800bf52 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00c      	beq.n	800be52 <tcp_input+0x656>
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	6918      	ldr	r0, [r3, #16]
 800be42:	4b39      	ldr	r3, [pc, #228]	; (800bf28 <tcp_input+0x72c>)
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	2300      	movs	r3, #0
 800be48:	69f9      	ldr	r1, [r7, #28]
 800be4a:	47a0      	blx	r4
 800be4c:	4603      	mov	r3, r0
 800be4e:	74fb      	strb	r3, [r7, #19]
 800be50:	e008      	b.n	800be64 <tcp_input+0x668>
 800be52:	4b35      	ldr	r3, [pc, #212]	; (800bf28 <tcp_input+0x72c>)
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	2300      	movs	r3, #0
 800be58:	69f9      	ldr	r1, [r7, #28]
 800be5a:	2000      	movs	r0, #0
 800be5c:	f7ff f95e 	bl	800b11c <tcp_recv_null>
 800be60:	4603      	mov	r3, r0
 800be62:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800be64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800be68:	f113 0f0d 	cmn.w	r3, #13
 800be6c:	d053      	beq.n	800bf16 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800be6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d003      	beq.n	800be7e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800be76:	4b2c      	ldr	r3, [pc, #176]	; (800bf28 <tcp_input+0x72c>)
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800be7e:	4b2b      	ldr	r3, [pc, #172]	; (800bf2c <tcp_input+0x730>)
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	f003 0320 	and.w	r3, r3, #32
 800be86:	2b00      	cmp	r3, #0
 800be88:	d030      	beq.n	800beec <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d009      	beq.n	800bea6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be96:	7b5a      	ldrb	r2, [r3, #13]
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be9c:	f042 0220 	orr.w	r2, r2, #32
 800bea0:	b2d2      	uxtb	r2, r2
 800bea2:	735a      	strb	r2, [r3, #13]
 800bea4:	e022      	b.n	800beec <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800beaa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800beae:	d005      	beq.n	800bebc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800beb4:	3301      	adds	r3, #1
 800beb6:	b29a      	uxth	r2, r3
 800beb8:	69fb      	ldr	r3, [r7, #28]
 800beba:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d00b      	beq.n	800bede <tcp_input+0x6e2>
 800bec6:	69fb      	ldr	r3, [r7, #28]
 800bec8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	6918      	ldr	r0, [r3, #16]
 800bed0:	2300      	movs	r3, #0
 800bed2:	2200      	movs	r2, #0
 800bed4:	69f9      	ldr	r1, [r7, #28]
 800bed6:	47a0      	blx	r4
 800bed8:	4603      	mov	r3, r0
 800beda:	74fb      	strb	r3, [r7, #19]
 800bedc:	e001      	b.n	800bee2 <tcp_input+0x6e6>
 800bede:	2300      	movs	r3, #0
 800bee0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bee2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bee6:	f113 0f0d 	cmn.w	r3, #13
 800beea:	d016      	beq.n	800bf1a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800beec:	4b13      	ldr	r3, [pc, #76]	; (800bf3c <tcp_input+0x740>)
 800beee:	2200      	movs	r2, #0
 800bef0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800bef2:	69f8      	ldr	r0, [r7, #28]
 800bef4:	f000 f88e 	bl	800c014 <tcp_input_delayed_close>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d128      	bne.n	800bf50 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800befe:	69f8      	ldr	r0, [r7, #28]
 800bf00:	f002 fac8 	bl	800e494 <tcp_output>
 800bf04:	e025      	b.n	800bf52 <tcp_input+0x756>
        goto aborted;
 800bf06:	bf00      	nop
 800bf08:	e023      	b.n	800bf52 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800bf0a:	bf00      	nop
 800bf0c:	e021      	b.n	800bf52 <tcp_input+0x756>
              goto aborted;
 800bf0e:	bf00      	nop
 800bf10:	e01f      	b.n	800bf52 <tcp_input+0x756>
          goto aborted;
 800bf12:	bf00      	nop
 800bf14:	e01d      	b.n	800bf52 <tcp_input+0x756>
            goto aborted;
 800bf16:	bf00      	nop
 800bf18:	e01b      	b.n	800bf52 <tcp_input+0x756>
              goto aborted;
 800bf1a:	bf00      	nop
 800bf1c:	e019      	b.n	800bf52 <tcp_input+0x756>
 800bf1e:	bf00      	nop
 800bf20:	2000f06c 	.word	0x2000f06c
 800bf24:	2000f07c 	.word	0x2000f07c
 800bf28:	2000f09c 	.word	0x2000f09c
 800bf2c:	2000f099 	.word	0x2000f099
 800bf30:	2000f094 	.word	0x2000f094
 800bf34:	2000f098 	.word	0x2000f098
 800bf38:	2000f096 	.word	0x2000f096
 800bf3c:	2000f0a0 	.word	0x2000f0a0
 800bf40:	2000f060 	.word	0x2000f060
 800bf44:	080145a4 	.word	0x080145a4
 800bf48:	08014758 	.word	0x08014758
 800bf4c:	080145f0 	.word	0x080145f0
          goto aborted;
 800bf50:	bf00      	nop
    tcp_input_pcb = NULL;
 800bf52:	4b27      	ldr	r3, [pc, #156]	; (800bff0 <tcp_input+0x7f4>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800bf58:	4b26      	ldr	r3, [pc, #152]	; (800bff4 <tcp_input+0x7f8>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800bf5e:	4b26      	ldr	r3, [pc, #152]	; (800bff8 <tcp_input+0x7fc>)
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d03f      	beq.n	800bfe6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800bf66:	4b24      	ldr	r3, [pc, #144]	; (800bff8 <tcp_input+0x7fc>)
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7fd fe12 	bl	8009b94 <pbuf_free>
      inseg.p = NULL;
 800bf70:	4b21      	ldr	r3, [pc, #132]	; (800bff8 <tcp_input+0x7fc>)
 800bf72:	2200      	movs	r2, #0
 800bf74:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800bf76:	e036      	b.n	800bfe6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800bf78:	4b20      	ldr	r3, [pc, #128]	; (800bffc <tcp_input+0x800>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	899b      	ldrh	r3, [r3, #12]
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7fc fa15 	bl	80083b0 <lwip_htons>
 800bf86:	4603      	mov	r3, r0
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	f003 0304 	and.w	r3, r3, #4
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d118      	bne.n	800bfc4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf92:	4b1b      	ldr	r3, [pc, #108]	; (800c000 <tcp_input+0x804>)
 800bf94:	6819      	ldr	r1, [r3, #0]
 800bf96:	4b1b      	ldr	r3, [pc, #108]	; (800c004 <tcp_input+0x808>)
 800bf98:	881b      	ldrh	r3, [r3, #0]
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	4b1a      	ldr	r3, [pc, #104]	; (800c008 <tcp_input+0x80c>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bfa2:	4b16      	ldr	r3, [pc, #88]	; (800bffc <tcp_input+0x800>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bfa6:	885b      	ldrh	r3, [r3, #2]
 800bfa8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bfaa:	4a14      	ldr	r2, [pc, #80]	; (800bffc <tcp_input+0x800>)
 800bfac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bfae:	8812      	ldrh	r2, [r2, #0]
 800bfb0:	b292      	uxth	r2, r2
 800bfb2:	9202      	str	r2, [sp, #8]
 800bfb4:	9301      	str	r3, [sp, #4]
 800bfb6:	4b15      	ldr	r3, [pc, #84]	; (800c00c <tcp_input+0x810>)
 800bfb8:	9300      	str	r3, [sp, #0]
 800bfba:	4b15      	ldr	r3, [pc, #84]	; (800c010 <tcp_input+0x814>)
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	f003 f81c 	bl	800effc <tcp_rst>
    pbuf_free(p);
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f7fd fde5 	bl	8009b94 <pbuf_free>
  return;
 800bfca:	e00c      	b.n	800bfe6 <tcp_input+0x7ea>
    goto dropped;
 800bfcc:	bf00      	nop
 800bfce:	e006      	b.n	800bfde <tcp_input+0x7e2>
    goto dropped;
 800bfd0:	bf00      	nop
 800bfd2:	e004      	b.n	800bfde <tcp_input+0x7e2>
    goto dropped;
 800bfd4:	bf00      	nop
 800bfd6:	e002      	b.n	800bfde <tcp_input+0x7e2>
      goto dropped;
 800bfd8:	bf00      	nop
 800bfda:	e000      	b.n	800bfde <tcp_input+0x7e2>
      goto dropped;
 800bfdc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f7fd fdd8 	bl	8009b94 <pbuf_free>
 800bfe4:	e000      	b.n	800bfe8 <tcp_input+0x7ec>
  return;
 800bfe6:	bf00      	nop
}
 800bfe8:	3724      	adds	r7, #36	; 0x24
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd90      	pop	{r4, r7, pc}
 800bfee:	bf00      	nop
 800bff0:	2000f0a0 	.word	0x2000f0a0
 800bff4:	2000f09c 	.word	0x2000f09c
 800bff8:	2000f06c 	.word	0x2000f06c
 800bffc:	2000f07c 	.word	0x2000f07c
 800c000:	2000f090 	.word	0x2000f090
 800c004:	2000f096 	.word	0x2000f096
 800c008:	2000f08c 	.word	0x2000f08c
 800c00c:	20009750 	.word	0x20009750
 800c010:	20009754 	.word	0x20009754

0800c014 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d106      	bne.n	800c030 <tcp_input_delayed_close+0x1c>
 800c022:	4b17      	ldr	r3, [pc, #92]	; (800c080 <tcp_input_delayed_close+0x6c>)
 800c024:	f240 225a 	movw	r2, #602	; 0x25a
 800c028:	4916      	ldr	r1, [pc, #88]	; (800c084 <tcp_input_delayed_close+0x70>)
 800c02a:	4817      	ldr	r0, [pc, #92]	; (800c088 <tcp_input_delayed_close+0x74>)
 800c02c:	f006 f994 	bl	8012358 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c030:	4b16      	ldr	r3, [pc, #88]	; (800c08c <tcp_input_delayed_close+0x78>)
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	f003 0310 	and.w	r3, r3, #16
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d01c      	beq.n	800c076 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	8b5b      	ldrh	r3, [r3, #26]
 800c040:	f003 0310 	and.w	r3, r3, #16
 800c044:	2b00      	cmp	r3, #0
 800c046:	d10d      	bne.n	800c064 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d008      	beq.n	800c064 <tcp_input_delayed_close+0x50>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	6912      	ldr	r2, [r2, #16]
 800c05c:	f06f 010e 	mvn.w	r1, #14
 800c060:	4610      	mov	r0, r2
 800c062:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c064:	6879      	ldr	r1, [r7, #4]
 800c066:	480a      	ldr	r0, [pc, #40]	; (800c090 <tcp_input_delayed_close+0x7c>)
 800c068:	f7ff fa50 	bl	800b50c <tcp_pcb_remove>
    tcp_free(pcb);
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f7fe f83d 	bl	800a0ec <tcp_free>
    return 1;
 800c072:	2301      	movs	r3, #1
 800c074:	e000      	b.n	800c078 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c076:	2300      	movs	r3, #0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3708      	adds	r7, #8
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	080145a4 	.word	0x080145a4
 800c084:	08014774 	.word	0x08014774
 800c088:	080145f0 	.word	0x080145f0
 800c08c:	2000f099 	.word	0x2000f099
 800c090:	2000f060 	.word	0x2000f060

0800c094 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c094:	b590      	push	{r4, r7, lr}
 800c096:	b08b      	sub	sp, #44	; 0x2c
 800c098:	af04      	add	r7, sp, #16
 800c09a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c09c:	4b6f      	ldr	r3, [pc, #444]	; (800c25c <tcp_listen_input+0x1c8>)
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	f003 0304 	and.w	r3, r3, #4
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f040 80d2 	bne.w	800c24e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d106      	bne.n	800c0be <tcp_listen_input+0x2a>
 800c0b0:	4b6b      	ldr	r3, [pc, #428]	; (800c260 <tcp_listen_input+0x1cc>)
 800c0b2:	f240 2281 	movw	r2, #641	; 0x281
 800c0b6:	496b      	ldr	r1, [pc, #428]	; (800c264 <tcp_listen_input+0x1d0>)
 800c0b8:	486b      	ldr	r0, [pc, #428]	; (800c268 <tcp_listen_input+0x1d4>)
 800c0ba:	f006 f94d 	bl	8012358 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c0be:	4b67      	ldr	r3, [pc, #412]	; (800c25c <tcp_listen_input+0x1c8>)
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	f003 0310 	and.w	r3, r3, #16
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d019      	beq.n	800c0fe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0ca:	4b68      	ldr	r3, [pc, #416]	; (800c26c <tcp_listen_input+0x1d8>)
 800c0cc:	6819      	ldr	r1, [r3, #0]
 800c0ce:	4b68      	ldr	r3, [pc, #416]	; (800c270 <tcp_listen_input+0x1dc>)
 800c0d0:	881b      	ldrh	r3, [r3, #0]
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	4b67      	ldr	r3, [pc, #412]	; (800c274 <tcp_listen_input+0x1e0>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c0da:	4b67      	ldr	r3, [pc, #412]	; (800c278 <tcp_listen_input+0x1e4>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0de:	885b      	ldrh	r3, [r3, #2]
 800c0e0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c0e2:	4a65      	ldr	r2, [pc, #404]	; (800c278 <tcp_listen_input+0x1e4>)
 800c0e4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0e6:	8812      	ldrh	r2, [r2, #0]
 800c0e8:	b292      	uxth	r2, r2
 800c0ea:	9202      	str	r2, [sp, #8]
 800c0ec:	9301      	str	r3, [sp, #4]
 800c0ee:	4b63      	ldr	r3, [pc, #396]	; (800c27c <tcp_listen_input+0x1e8>)
 800c0f0:	9300      	str	r3, [sp, #0]
 800c0f2:	4b63      	ldr	r3, [pc, #396]	; (800c280 <tcp_listen_input+0x1ec>)
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f002 ff80 	bl	800effc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c0fc:	e0a9      	b.n	800c252 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c0fe:	4b57      	ldr	r3, [pc, #348]	; (800c25c <tcp_listen_input+0x1c8>)
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	f003 0302 	and.w	r3, r3, #2
 800c106:	2b00      	cmp	r3, #0
 800c108:	f000 80a3 	beq.w	800c252 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	7d5b      	ldrb	r3, [r3, #21]
 800c110:	4618      	mov	r0, r3
 800c112:	f7ff f927 	bl	800b364 <tcp_alloc>
 800c116:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d111      	bne.n	800c142 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	699b      	ldr	r3, [r3, #24]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d00a      	beq.n	800c13c <tcp_listen_input+0xa8>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	699b      	ldr	r3, [r3, #24]
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	6910      	ldr	r0, [r2, #16]
 800c12e:	f04f 32ff 	mov.w	r2, #4294967295
 800c132:	2100      	movs	r1, #0
 800c134:	4798      	blx	r3
 800c136:	4603      	mov	r3, r0
 800c138:	73bb      	strb	r3, [r7, #14]
      return;
 800c13a:	e08b      	b.n	800c254 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c13c:	23f0      	movs	r3, #240	; 0xf0
 800c13e:	73bb      	strb	r3, [r7, #14]
      return;
 800c140:	e088      	b.n	800c254 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c142:	4b50      	ldr	r3, [pc, #320]	; (800c284 <tcp_listen_input+0x1f0>)
 800c144:	695a      	ldr	r2, [r3, #20]
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c14a:	4b4e      	ldr	r3, [pc, #312]	; (800c284 <tcp_listen_input+0x1f0>)
 800c14c:	691a      	ldr	r2, [r3, #16]
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	8ada      	ldrh	r2, [r3, #22]
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c15a:	4b47      	ldr	r3, [pc, #284]	; (800c278 <tcp_listen_input+0x1e4>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	881b      	ldrh	r3, [r3, #0]
 800c160:	b29a      	uxth	r2, r3
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	2203      	movs	r2, #3
 800c16a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c16c:	4b41      	ldr	r3, [pc, #260]	; (800c274 <tcp_listen_input+0x1e0>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	1c5a      	adds	r2, r3, #1
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c17e:	6978      	ldr	r0, [r7, #20]
 800c180:	f7ff fa58 	bl	800b634 <tcp_next_iss>
 800c184:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	693a      	ldr	r2, [r7, #16]
 800c18a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	693a      	ldr	r2, [r7, #16]
 800c190:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	693a      	ldr	r2, [r7, #16]
 800c196:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	693a      	ldr	r2, [r7, #16]
 800c19c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c19e:	4b35      	ldr	r3, [pc, #212]	; (800c274 <tcp_listen_input+0x1e0>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	1e5a      	subs	r2, r3, #1
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	691a      	ldr	r2, [r3, #16]
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	7a5b      	ldrb	r3, [r3, #9]
 800c1ba:	f003 030c 	and.w	r3, r3, #12
 800c1be:	b2da      	uxtb	r2, r3
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	7a1a      	ldrb	r2, [r3, #8]
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c1cc:	4b2e      	ldr	r3, [pc, #184]	; (800c288 <tcp_listen_input+0x1f4>)
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	60da      	str	r2, [r3, #12]
 800c1d4:	4a2c      	ldr	r2, [pc, #176]	; (800c288 <tcp_listen_input+0x1f4>)
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	6013      	str	r3, [r2, #0]
 800c1da:	f003 f8d1 	bl	800f380 <tcp_timer_needed>
 800c1de:	4b2b      	ldr	r3, [pc, #172]	; (800c28c <tcp_listen_input+0x1f8>)
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c1e4:	6978      	ldr	r0, [r7, #20]
 800c1e6:	f001 fd8f 	bl	800dd08 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c1ea:	4b23      	ldr	r3, [pc, #140]	; (800c278 <tcp_listen_input+0x1e4>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	89db      	ldrh	r3, [r3, #14]
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	3304      	adds	r3, #4
 800c20c:	4618      	mov	r0, r3
 800c20e:	f004 fcc5 	bl	8010b9c <ip4_route>
 800c212:	4601      	mov	r1, r0
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	3304      	adds	r3, #4
 800c218:	461a      	mov	r2, r3
 800c21a:	4620      	mov	r0, r4
 800c21c:	f7ff fa30 	bl	800b680 <tcp_eff_send_mss_netif>
 800c220:	4603      	mov	r3, r0
 800c222:	461a      	mov	r2, r3
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c228:	2112      	movs	r1, #18
 800c22a:	6978      	ldr	r0, [r7, #20]
 800c22c:	f002 f844 	bl	800e2b8 <tcp_enqueue_flags>
 800c230:	4603      	mov	r3, r0
 800c232:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d004      	beq.n	800c246 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c23c:	2100      	movs	r1, #0
 800c23e:	6978      	ldr	r0, [r7, #20]
 800c240:	f7fe f97e 	bl	800a540 <tcp_abandon>
      return;
 800c244:	e006      	b.n	800c254 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800c246:	6978      	ldr	r0, [r7, #20]
 800c248:	f002 f924 	bl	800e494 <tcp_output>
  return;
 800c24c:	e001      	b.n	800c252 <tcp_listen_input+0x1be>
    return;
 800c24e:	bf00      	nop
 800c250:	e000      	b.n	800c254 <tcp_listen_input+0x1c0>
  return;
 800c252:	bf00      	nop
}
 800c254:	371c      	adds	r7, #28
 800c256:	46bd      	mov	sp, r7
 800c258:	bd90      	pop	{r4, r7, pc}
 800c25a:	bf00      	nop
 800c25c:	2000f098 	.word	0x2000f098
 800c260:	080145a4 	.word	0x080145a4
 800c264:	0801479c 	.word	0x0801479c
 800c268:	080145f0 	.word	0x080145f0
 800c26c:	2000f090 	.word	0x2000f090
 800c270:	2000f096 	.word	0x2000f096
 800c274:	2000f08c 	.word	0x2000f08c
 800c278:	2000f07c 	.word	0x2000f07c
 800c27c:	20009750 	.word	0x20009750
 800c280:	20009754 	.word	0x20009754
 800c284:	20009740 	.word	0x20009740
 800c288:	2000f060 	.word	0x2000f060
 800c28c:	2000f068 	.word	0x2000f068

0800c290 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af04      	add	r7, sp, #16
 800c296:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c298:	4b2f      	ldr	r3, [pc, #188]	; (800c358 <tcp_timewait_input+0xc8>)
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	f003 0304 	and.w	r3, r3, #4
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d153      	bne.n	800c34c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d106      	bne.n	800c2b8 <tcp_timewait_input+0x28>
 800c2aa:	4b2c      	ldr	r3, [pc, #176]	; (800c35c <tcp_timewait_input+0xcc>)
 800c2ac:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c2b0:	492b      	ldr	r1, [pc, #172]	; (800c360 <tcp_timewait_input+0xd0>)
 800c2b2:	482c      	ldr	r0, [pc, #176]	; (800c364 <tcp_timewait_input+0xd4>)
 800c2b4:	f006 f850 	bl	8012358 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c2b8:	4b27      	ldr	r3, [pc, #156]	; (800c358 <tcp_timewait_input+0xc8>)
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	f003 0302 	and.w	r3, r3, #2
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d02a      	beq.n	800c31a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c2c4:	4b28      	ldr	r3, [pc, #160]	; (800c368 <tcp_timewait_input+0xd8>)
 800c2c6:	681a      	ldr	r2, [r3, #0]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2cc:	1ad3      	subs	r3, r2, r3
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	db2d      	blt.n	800c32e <tcp_timewait_input+0x9e>
 800c2d2:	4b25      	ldr	r3, [pc, #148]	; (800c368 <tcp_timewait_input+0xd8>)
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2da:	6879      	ldr	r1, [r7, #4]
 800c2dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c2de:	440b      	add	r3, r1
 800c2e0:	1ad3      	subs	r3, r2, r3
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	dc23      	bgt.n	800c32e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2e6:	4b21      	ldr	r3, [pc, #132]	; (800c36c <tcp_timewait_input+0xdc>)
 800c2e8:	6819      	ldr	r1, [r3, #0]
 800c2ea:	4b21      	ldr	r3, [pc, #132]	; (800c370 <tcp_timewait_input+0xe0>)
 800c2ec:	881b      	ldrh	r3, [r3, #0]
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	4b1d      	ldr	r3, [pc, #116]	; (800c368 <tcp_timewait_input+0xd8>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c2f6:	4b1f      	ldr	r3, [pc, #124]	; (800c374 <tcp_timewait_input+0xe4>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2fa:	885b      	ldrh	r3, [r3, #2]
 800c2fc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c2fe:	4a1d      	ldr	r2, [pc, #116]	; (800c374 <tcp_timewait_input+0xe4>)
 800c300:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c302:	8812      	ldrh	r2, [r2, #0]
 800c304:	b292      	uxth	r2, r2
 800c306:	9202      	str	r2, [sp, #8]
 800c308:	9301      	str	r3, [sp, #4]
 800c30a:	4b1b      	ldr	r3, [pc, #108]	; (800c378 <tcp_timewait_input+0xe8>)
 800c30c:	9300      	str	r3, [sp, #0]
 800c30e:	4b1b      	ldr	r3, [pc, #108]	; (800c37c <tcp_timewait_input+0xec>)
 800c310:	4602      	mov	r2, r0
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f002 fe72 	bl	800effc <tcp_rst>
      return;
 800c318:	e01b      	b.n	800c352 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c31a:	4b0f      	ldr	r3, [pc, #60]	; (800c358 <tcp_timewait_input+0xc8>)
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	f003 0301 	and.w	r3, r3, #1
 800c322:	2b00      	cmp	r3, #0
 800c324:	d003      	beq.n	800c32e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c326:	4b16      	ldr	r3, [pc, #88]	; (800c380 <tcp_timewait_input+0xf0>)
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c32e:	4b10      	ldr	r3, [pc, #64]	; (800c370 <tcp_timewait_input+0xe0>)
 800c330:	881b      	ldrh	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d00c      	beq.n	800c350 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	8b5b      	ldrh	r3, [r3, #26]
 800c33a:	f043 0302 	orr.w	r3, r3, #2
 800c33e:	b29a      	uxth	r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f002 f8a5 	bl	800e494 <tcp_output>
  }
  return;
 800c34a:	e001      	b.n	800c350 <tcp_timewait_input+0xc0>
    return;
 800c34c:	bf00      	nop
 800c34e:	e000      	b.n	800c352 <tcp_timewait_input+0xc2>
  return;
 800c350:	bf00      	nop
}
 800c352:	3708      	adds	r7, #8
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	2000f098 	.word	0x2000f098
 800c35c:	080145a4 	.word	0x080145a4
 800c360:	080147bc 	.word	0x080147bc
 800c364:	080145f0 	.word	0x080145f0
 800c368:	2000f08c 	.word	0x2000f08c
 800c36c:	2000f090 	.word	0x2000f090
 800c370:	2000f096 	.word	0x2000f096
 800c374:	2000f07c 	.word	0x2000f07c
 800c378:	20009750 	.word	0x20009750
 800c37c:	20009754 	.word	0x20009754
 800c380:	2000f054 	.word	0x2000f054

0800c384 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c384:	b590      	push	{r4, r7, lr}
 800c386:	b08d      	sub	sp, #52	; 0x34
 800c388:	af04      	add	r7, sp, #16
 800c38a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c38c:	2300      	movs	r3, #0
 800c38e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c390:	2300      	movs	r3, #0
 800c392:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d106      	bne.n	800c3a8 <tcp_process+0x24>
 800c39a:	4b9d      	ldr	r3, [pc, #628]	; (800c610 <tcp_process+0x28c>)
 800c39c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c3a0:	499c      	ldr	r1, [pc, #624]	; (800c614 <tcp_process+0x290>)
 800c3a2:	489d      	ldr	r0, [pc, #628]	; (800c618 <tcp_process+0x294>)
 800c3a4:	f005 ffd8 	bl	8012358 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c3a8:	4b9c      	ldr	r3, [pc, #624]	; (800c61c <tcp_process+0x298>)
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	f003 0304 	and.w	r3, r3, #4
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d04e      	beq.n	800c452 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	7d1b      	ldrb	r3, [r3, #20]
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	d108      	bne.n	800c3ce <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c3c0:	4b97      	ldr	r3, [pc, #604]	; (800c620 <tcp_process+0x29c>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d123      	bne.n	800c410 <tcp_process+0x8c>
        acceptable = 1;
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	76fb      	strb	r3, [r7, #27]
 800c3cc:	e020      	b.n	800c410 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3d2:	4b94      	ldr	r3, [pc, #592]	; (800c624 <tcp_process+0x2a0>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d102      	bne.n	800c3e0 <tcp_process+0x5c>
        acceptable = 1;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	76fb      	strb	r3, [r7, #27]
 800c3de:	e017      	b.n	800c410 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c3e0:	4b90      	ldr	r3, [pc, #576]	; (800c624 <tcp_process+0x2a0>)
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e8:	1ad3      	subs	r3, r2, r3
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	db10      	blt.n	800c410 <tcp_process+0x8c>
 800c3ee:	4b8d      	ldr	r3, [pc, #564]	; (800c624 <tcp_process+0x2a0>)
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f6:	6879      	ldr	r1, [r7, #4]
 800c3f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c3fa:	440b      	add	r3, r1
 800c3fc:	1ad3      	subs	r3, r2, r3
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	dc06      	bgt.n	800c410 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	8b5b      	ldrh	r3, [r3, #26]
 800c406:	f043 0302 	orr.w	r3, r3, #2
 800c40a:	b29a      	uxth	r2, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c410:	7efb      	ldrb	r3, [r7, #27]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d01b      	beq.n	800c44e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	7d1b      	ldrb	r3, [r3, #20]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d106      	bne.n	800c42c <tcp_process+0xa8>
 800c41e:	4b7c      	ldr	r3, [pc, #496]	; (800c610 <tcp_process+0x28c>)
 800c420:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c424:	4980      	ldr	r1, [pc, #512]	; (800c628 <tcp_process+0x2a4>)
 800c426:	487c      	ldr	r0, [pc, #496]	; (800c618 <tcp_process+0x294>)
 800c428:	f005 ff96 	bl	8012358 <iprintf>
      recv_flags |= TF_RESET;
 800c42c:	4b7f      	ldr	r3, [pc, #508]	; (800c62c <tcp_process+0x2a8>)
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	f043 0308 	orr.w	r3, r3, #8
 800c434:	b2da      	uxtb	r2, r3
 800c436:	4b7d      	ldr	r3, [pc, #500]	; (800c62c <tcp_process+0x2a8>)
 800c438:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	8b5b      	ldrh	r3, [r3, #26]
 800c43e:	f023 0301 	bic.w	r3, r3, #1
 800c442:	b29a      	uxth	r2, r3
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c448:	f06f 030d 	mvn.w	r3, #13
 800c44c:	e37a      	b.n	800cb44 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c44e:	2300      	movs	r3, #0
 800c450:	e378      	b.n	800cb44 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c452:	4b72      	ldr	r3, [pc, #456]	; (800c61c <tcp_process+0x298>)
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	f003 0302 	and.w	r3, r3, #2
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d010      	beq.n	800c480 <tcp_process+0xfc>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	7d1b      	ldrb	r3, [r3, #20]
 800c462:	2b02      	cmp	r3, #2
 800c464:	d00c      	beq.n	800c480 <tcp_process+0xfc>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	7d1b      	ldrb	r3, [r3, #20]
 800c46a:	2b03      	cmp	r3, #3
 800c46c:	d008      	beq.n	800c480 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	8b5b      	ldrh	r3, [r3, #26]
 800c472:	f043 0302 	orr.w	r3, r3, #2
 800c476:	b29a      	uxth	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c47c:	2300      	movs	r3, #0
 800c47e:	e361      	b.n	800cb44 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	8b5b      	ldrh	r3, [r3, #26]
 800c484:	f003 0310 	and.w	r3, r3, #16
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d103      	bne.n	800c494 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c48c:	4b68      	ldr	r3, [pc, #416]	; (800c630 <tcp_process+0x2ac>)
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2200      	movs	r2, #0
 800c498:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f001 fc2f 	bl	800dd08 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	7d1b      	ldrb	r3, [r3, #20]
 800c4ae:	3b02      	subs	r3, #2
 800c4b0:	2b07      	cmp	r3, #7
 800c4b2:	f200 8337 	bhi.w	800cb24 <tcp_process+0x7a0>
 800c4b6:	a201      	add	r2, pc, #4	; (adr r2, 800c4bc <tcp_process+0x138>)
 800c4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4bc:	0800c4dd 	.word	0x0800c4dd
 800c4c0:	0800c70d 	.word	0x0800c70d
 800c4c4:	0800c885 	.word	0x0800c885
 800c4c8:	0800c8af 	.word	0x0800c8af
 800c4cc:	0800c9d3 	.word	0x0800c9d3
 800c4d0:	0800c885 	.word	0x0800c885
 800c4d4:	0800ca5f 	.word	0x0800ca5f
 800c4d8:	0800caef 	.word	0x0800caef
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c4dc:	4b4f      	ldr	r3, [pc, #316]	; (800c61c <tcp_process+0x298>)
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	f003 0310 	and.w	r3, r3, #16
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	f000 80e4 	beq.w	800c6b2 <tcp_process+0x32e>
 800c4ea:	4b4c      	ldr	r3, [pc, #304]	; (800c61c <tcp_process+0x298>)
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	f003 0302 	and.w	r3, r3, #2
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	f000 80dd 	beq.w	800c6b2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4fc:	1c5a      	adds	r2, r3, #1
 800c4fe:	4b48      	ldr	r3, [pc, #288]	; (800c620 <tcp_process+0x29c>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	429a      	cmp	r2, r3
 800c504:	f040 80d5 	bne.w	800c6b2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c508:	4b46      	ldr	r3, [pc, #280]	; (800c624 <tcp_process+0x2a0>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	1c5a      	adds	r2, r3, #1
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800c51a:	4b41      	ldr	r3, [pc, #260]	; (800c620 <tcp_process+0x29c>)
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c522:	4b44      	ldr	r3, [pc, #272]	; (800c634 <tcp_process+0x2b0>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	89db      	ldrh	r3, [r3, #14]
 800c528:	b29a      	uxth	r2, r3
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c53c:	4b39      	ldr	r3, [pc, #228]	; (800c624 <tcp_process+0x2a0>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	1e5a      	subs	r2, r3, #1
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2204      	movs	r2, #4
 800c54a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	3304      	adds	r3, #4
 800c554:	4618      	mov	r0, r3
 800c556:	f004 fb21 	bl	8010b9c <ip4_route>
 800c55a:	4601      	mov	r1, r0
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	3304      	adds	r3, #4
 800c560:	461a      	mov	r2, r3
 800c562:	4620      	mov	r0, r4
 800c564:	f7ff f88c 	bl	800b680 <tcp_eff_send_mss_netif>
 800c568:	4603      	mov	r3, r0
 800c56a:	461a      	mov	r2, r3
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c574:	009a      	lsls	r2, r3, #2
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c57a:	005b      	lsls	r3, r3, #1
 800c57c:	f241 111c 	movw	r1, #4380	; 0x111c
 800c580:	428b      	cmp	r3, r1
 800c582:	bf38      	it	cc
 800c584:	460b      	movcc	r3, r1
 800c586:	429a      	cmp	r2, r3
 800c588:	d204      	bcs.n	800c594 <tcp_process+0x210>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c58e:	009b      	lsls	r3, r3, #2
 800c590:	b29b      	uxth	r3, r3
 800c592:	e00d      	b.n	800c5b0 <tcp_process+0x22c>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c598:	005b      	lsls	r3, r3, #1
 800c59a:	f241 121c 	movw	r2, #4380	; 0x111c
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d904      	bls.n	800c5ac <tcp_process+0x228>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5a6:	005b      	lsls	r3, r3, #1
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	e001      	b.n	800c5b0 <tcp_process+0x22c>
 800c5ac:	f241 131c 	movw	r3, #4380	; 0x111c
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d106      	bne.n	800c5ce <tcp_process+0x24a>
 800c5c0:	4b13      	ldr	r3, [pc, #76]	; (800c610 <tcp_process+0x28c>)
 800c5c2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c5c6:	491c      	ldr	r1, [pc, #112]	; (800c638 <tcp_process+0x2b4>)
 800c5c8:	4813      	ldr	r0, [pc, #76]	; (800c618 <tcp_process+0x294>)
 800c5ca:	f005 fec5 	bl	8012358 <iprintf>
        --pcb->snd_queuelen;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c5d4:	3b01      	subs	r3, #1
 800c5d6:	b29a      	uxth	r2, r3
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5e2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d12a      	bne.n	800c640 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5ee:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d106      	bne.n	800c604 <tcp_process+0x280>
 800c5f6:	4b06      	ldr	r3, [pc, #24]	; (800c610 <tcp_process+0x28c>)
 800c5f8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c5fc:	490f      	ldr	r1, [pc, #60]	; (800c63c <tcp_process+0x2b8>)
 800c5fe:	4806      	ldr	r0, [pc, #24]	; (800c618 <tcp_process+0x294>)
 800c600:	f005 feaa 	bl	8012358 <iprintf>
          pcb->unsent = rseg->next;
 800c604:	69fb      	ldr	r3, [r7, #28]
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	66da      	str	r2, [r3, #108]	; 0x6c
 800c60c:	e01c      	b.n	800c648 <tcp_process+0x2c4>
 800c60e:	bf00      	nop
 800c610:	080145a4 	.word	0x080145a4
 800c614:	080147dc 	.word	0x080147dc
 800c618:	080145f0 	.word	0x080145f0
 800c61c:	2000f098 	.word	0x2000f098
 800c620:	2000f090 	.word	0x2000f090
 800c624:	2000f08c 	.word	0x2000f08c
 800c628:	080147f8 	.word	0x080147f8
 800c62c:	2000f099 	.word	0x2000f099
 800c630:	2000f054 	.word	0x2000f054
 800c634:	2000f07c 	.word	0x2000f07c
 800c638:	08014818 	.word	0x08014818
 800c63c:	08014830 	.word	0x08014830
        } else {
          pcb->unacked = rseg->next;
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c648:	69f8      	ldr	r0, [r7, #28]
 800c64a:	f7fe fd22 	bl	800b092 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c652:	2b00      	cmp	r3, #0
 800c654:	d104      	bne.n	800c660 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c65c:	861a      	strh	r2, [r3, #48]	; 0x30
 800c65e:	e006      	b.n	800c66e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2200      	movs	r2, #0
 800c664:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2200      	movs	r2, #0
 800c66a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c674:	2b00      	cmp	r3, #0
 800c676:	d00a      	beq.n	800c68e <tcp_process+0x30a>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	6910      	ldr	r0, [r2, #16]
 800c682:	2200      	movs	r2, #0
 800c684:	6879      	ldr	r1, [r7, #4]
 800c686:	4798      	blx	r3
 800c688:	4603      	mov	r3, r0
 800c68a:	76bb      	strb	r3, [r7, #26]
 800c68c:	e001      	b.n	800c692 <tcp_process+0x30e>
 800c68e:	2300      	movs	r3, #0
 800c690:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c692:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c696:	f113 0f0d 	cmn.w	r3, #13
 800c69a:	d102      	bne.n	800c6a2 <tcp_process+0x31e>
          return ERR_ABRT;
 800c69c:	f06f 030c 	mvn.w	r3, #12
 800c6a0:	e250      	b.n	800cb44 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	8b5b      	ldrh	r3, [r3, #26]
 800c6a6:	f043 0302 	orr.w	r3, r3, #2
 800c6aa:	b29a      	uxth	r2, r3
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c6b0:	e23a      	b.n	800cb28 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c6b2:	4b98      	ldr	r3, [pc, #608]	; (800c914 <tcp_process+0x590>)
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	f003 0310 	and.w	r3, r3, #16
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	f000 8234 	beq.w	800cb28 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6c0:	4b95      	ldr	r3, [pc, #596]	; (800c918 <tcp_process+0x594>)
 800c6c2:	6819      	ldr	r1, [r3, #0]
 800c6c4:	4b95      	ldr	r3, [pc, #596]	; (800c91c <tcp_process+0x598>)
 800c6c6:	881b      	ldrh	r3, [r3, #0]
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	4b95      	ldr	r3, [pc, #596]	; (800c920 <tcp_process+0x59c>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c6d0:	4b94      	ldr	r3, [pc, #592]	; (800c924 <tcp_process+0x5a0>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6d4:	885b      	ldrh	r3, [r3, #2]
 800c6d6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c6d8:	4a92      	ldr	r2, [pc, #584]	; (800c924 <tcp_process+0x5a0>)
 800c6da:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6dc:	8812      	ldrh	r2, [r2, #0]
 800c6de:	b292      	uxth	r2, r2
 800c6e0:	9202      	str	r2, [sp, #8]
 800c6e2:	9301      	str	r3, [sp, #4]
 800c6e4:	4b90      	ldr	r3, [pc, #576]	; (800c928 <tcp_process+0x5a4>)
 800c6e6:	9300      	str	r3, [sp, #0]
 800c6e8:	4b90      	ldr	r3, [pc, #576]	; (800c92c <tcp_process+0x5a8>)
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f002 fc85 	bl	800effc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c6f8:	2b05      	cmp	r3, #5
 800c6fa:	f200 8215 	bhi.w	800cb28 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2200      	movs	r2, #0
 800c702:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f002 fa51 	bl	800ebac <tcp_rexmit_rto>
      break;
 800c70a:	e20d      	b.n	800cb28 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c70c:	4b81      	ldr	r3, [pc, #516]	; (800c914 <tcp_process+0x590>)
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	f003 0310 	and.w	r3, r3, #16
 800c714:	2b00      	cmp	r3, #0
 800c716:	f000 80a1 	beq.w	800c85c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c71a:	4b7f      	ldr	r3, [pc, #508]	; (800c918 <tcp_process+0x594>)
 800c71c:	681a      	ldr	r2, [r3, #0]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c722:	1ad3      	subs	r3, r2, r3
 800c724:	3b01      	subs	r3, #1
 800c726:	2b00      	cmp	r3, #0
 800c728:	db7e      	blt.n	800c828 <tcp_process+0x4a4>
 800c72a:	4b7b      	ldr	r3, [pc, #492]	; (800c918 <tcp_process+0x594>)
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c732:	1ad3      	subs	r3, r2, r3
 800c734:	2b00      	cmp	r3, #0
 800c736:	dc77      	bgt.n	800c828 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2204      	movs	r2, #4
 800c73c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c742:	2b00      	cmp	r3, #0
 800c744:	d102      	bne.n	800c74c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c746:	23fa      	movs	r3, #250	; 0xfa
 800c748:	76bb      	strb	r3, [r7, #26]
 800c74a:	e01d      	b.n	800c788 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c750:	699b      	ldr	r3, [r3, #24]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d106      	bne.n	800c764 <tcp_process+0x3e0>
 800c756:	4b76      	ldr	r3, [pc, #472]	; (800c930 <tcp_process+0x5ac>)
 800c758:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c75c:	4975      	ldr	r1, [pc, #468]	; (800c934 <tcp_process+0x5b0>)
 800c75e:	4876      	ldr	r0, [pc, #472]	; (800c938 <tcp_process+0x5b4>)
 800c760:	f005 fdfa 	bl	8012358 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c768:	699b      	ldr	r3, [r3, #24]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d00a      	beq.n	800c784 <tcp_process+0x400>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c772:	699b      	ldr	r3, [r3, #24]
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	6910      	ldr	r0, [r2, #16]
 800c778:	2200      	movs	r2, #0
 800c77a:	6879      	ldr	r1, [r7, #4]
 800c77c:	4798      	blx	r3
 800c77e:	4603      	mov	r3, r0
 800c780:	76bb      	strb	r3, [r7, #26]
 800c782:	e001      	b.n	800c788 <tcp_process+0x404>
 800c784:	23f0      	movs	r3, #240	; 0xf0
 800c786:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c788:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00a      	beq.n	800c7a6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c790:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c794:	f113 0f0d 	cmn.w	r3, #13
 800c798:	d002      	beq.n	800c7a0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f7fd ff8e 	bl	800a6bc <tcp_abort>
            }
            return ERR_ABRT;
 800c7a0:	f06f 030c 	mvn.w	r3, #12
 800c7a4:	e1ce      	b.n	800cb44 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 fae0 	bl	800cd6c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c7ac:	4b63      	ldr	r3, [pc, #396]	; (800c93c <tcp_process+0x5b8>)
 800c7ae:	881b      	ldrh	r3, [r3, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d005      	beq.n	800c7c0 <tcp_process+0x43c>
            recv_acked--;
 800c7b4:	4b61      	ldr	r3, [pc, #388]	; (800c93c <tcp_process+0x5b8>)
 800c7b6:	881b      	ldrh	r3, [r3, #0]
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	b29a      	uxth	r2, r3
 800c7bc:	4b5f      	ldr	r3, [pc, #380]	; (800c93c <tcp_process+0x5b8>)
 800c7be:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7c4:	009a      	lsls	r2, r3, #2
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7ca:	005b      	lsls	r3, r3, #1
 800c7cc:	f241 111c 	movw	r1, #4380	; 0x111c
 800c7d0:	428b      	cmp	r3, r1
 800c7d2:	bf38      	it	cc
 800c7d4:	460b      	movcc	r3, r1
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d204      	bcs.n	800c7e4 <tcp_process+0x460>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	e00d      	b.n	800c800 <tcp_process+0x47c>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7e8:	005b      	lsls	r3, r3, #1
 800c7ea:	f241 121c 	movw	r2, #4380	; 0x111c
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d904      	bls.n	800c7fc <tcp_process+0x478>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7f6:	005b      	lsls	r3, r3, #1
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	e001      	b.n	800c800 <tcp_process+0x47c>
 800c7fc:	f241 131c 	movw	r3, #4380	; 0x111c
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c806:	4b4e      	ldr	r3, [pc, #312]	; (800c940 <tcp_process+0x5bc>)
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	f003 0320 	and.w	r3, r3, #32
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d037      	beq.n	800c882 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	8b5b      	ldrh	r3, [r3, #26]
 800c816:	f043 0302 	orr.w	r3, r3, #2
 800c81a:	b29a      	uxth	r2, r3
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2207      	movs	r2, #7
 800c824:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c826:	e02c      	b.n	800c882 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c828:	4b3b      	ldr	r3, [pc, #236]	; (800c918 <tcp_process+0x594>)
 800c82a:	6819      	ldr	r1, [r3, #0]
 800c82c:	4b3b      	ldr	r3, [pc, #236]	; (800c91c <tcp_process+0x598>)
 800c82e:	881b      	ldrh	r3, [r3, #0]
 800c830:	461a      	mov	r2, r3
 800c832:	4b3b      	ldr	r3, [pc, #236]	; (800c920 <tcp_process+0x59c>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c838:	4b3a      	ldr	r3, [pc, #232]	; (800c924 <tcp_process+0x5a0>)
 800c83a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c83c:	885b      	ldrh	r3, [r3, #2]
 800c83e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c840:	4a38      	ldr	r2, [pc, #224]	; (800c924 <tcp_process+0x5a0>)
 800c842:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c844:	8812      	ldrh	r2, [r2, #0]
 800c846:	b292      	uxth	r2, r2
 800c848:	9202      	str	r2, [sp, #8]
 800c84a:	9301      	str	r3, [sp, #4]
 800c84c:	4b36      	ldr	r3, [pc, #216]	; (800c928 <tcp_process+0x5a4>)
 800c84e:	9300      	str	r3, [sp, #0]
 800c850:	4b36      	ldr	r3, [pc, #216]	; (800c92c <tcp_process+0x5a8>)
 800c852:	4602      	mov	r2, r0
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f002 fbd1 	bl	800effc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c85a:	e167      	b.n	800cb2c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c85c:	4b2d      	ldr	r3, [pc, #180]	; (800c914 <tcp_process+0x590>)
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	f003 0302 	and.w	r3, r3, #2
 800c864:	2b00      	cmp	r3, #0
 800c866:	f000 8161 	beq.w	800cb2c <tcp_process+0x7a8>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c86e:	1e5a      	subs	r2, r3, #1
 800c870:	4b2b      	ldr	r3, [pc, #172]	; (800c920 <tcp_process+0x59c>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	429a      	cmp	r2, r3
 800c876:	f040 8159 	bne.w	800cb2c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f002 f9b8 	bl	800ebf0 <tcp_rexmit>
      break;
 800c880:	e154      	b.n	800cb2c <tcp_process+0x7a8>
 800c882:	e153      	b.n	800cb2c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 fa71 	bl	800cd6c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c88a:	4b2d      	ldr	r3, [pc, #180]	; (800c940 <tcp_process+0x5bc>)
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	f003 0320 	and.w	r3, r3, #32
 800c892:	2b00      	cmp	r3, #0
 800c894:	f000 814c 	beq.w	800cb30 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	8b5b      	ldrh	r3, [r3, #26]
 800c89c:	f043 0302 	orr.w	r3, r3, #2
 800c8a0:	b29a      	uxth	r2, r3
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2207      	movs	r2, #7
 800c8aa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c8ac:	e140      	b.n	800cb30 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 fa5c 	bl	800cd6c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c8b4:	4b22      	ldr	r3, [pc, #136]	; (800c940 <tcp_process+0x5bc>)
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	f003 0320 	and.w	r3, r3, #32
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d071      	beq.n	800c9a4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c8c0:	4b14      	ldr	r3, [pc, #80]	; (800c914 <tcp_process+0x590>)
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	f003 0310 	and.w	r3, r3, #16
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d060      	beq.n	800c98e <tcp_process+0x60a>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c8d0:	4b11      	ldr	r3, [pc, #68]	; (800c918 <tcp_process+0x594>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d15a      	bne.n	800c98e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d156      	bne.n	800c98e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	8b5b      	ldrh	r3, [r3, #26]
 800c8e4:	f043 0302 	orr.w	r3, r3, #2
 800c8e8:	b29a      	uxth	r2, r3
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f7fe fdbc 	bl	800b46c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c8f4:	4b13      	ldr	r3, [pc, #76]	; (800c944 <tcp_process+0x5c0>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d105      	bne.n	800c90a <tcp_process+0x586>
 800c8fe:	4b11      	ldr	r3, [pc, #68]	; (800c944 <tcp_process+0x5c0>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	4a0f      	ldr	r2, [pc, #60]	; (800c944 <tcp_process+0x5c0>)
 800c906:	6013      	str	r3, [r2, #0]
 800c908:	e02e      	b.n	800c968 <tcp_process+0x5e4>
 800c90a:	4b0e      	ldr	r3, [pc, #56]	; (800c944 <tcp_process+0x5c0>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	617b      	str	r3, [r7, #20]
 800c910:	e027      	b.n	800c962 <tcp_process+0x5de>
 800c912:	bf00      	nop
 800c914:	2000f098 	.word	0x2000f098
 800c918:	2000f090 	.word	0x2000f090
 800c91c:	2000f096 	.word	0x2000f096
 800c920:	2000f08c 	.word	0x2000f08c
 800c924:	2000f07c 	.word	0x2000f07c
 800c928:	20009750 	.word	0x20009750
 800c92c:	20009754 	.word	0x20009754
 800c930:	080145a4 	.word	0x080145a4
 800c934:	08014844 	.word	0x08014844
 800c938:	080145f0 	.word	0x080145f0
 800c93c:	2000f094 	.word	0x2000f094
 800c940:	2000f099 	.word	0x2000f099
 800c944:	2000f060 	.word	0x2000f060
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	68db      	ldr	r3, [r3, #12]
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d104      	bne.n	800c95c <tcp_process+0x5d8>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	68da      	ldr	r2, [r3, #12]
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	60da      	str	r2, [r3, #12]
 800c95a:	e005      	b.n	800c968 <tcp_process+0x5e4>
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	617b      	str	r3, [r7, #20]
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d1ef      	bne.n	800c948 <tcp_process+0x5c4>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2200      	movs	r2, #0
 800c96c:	60da      	str	r2, [r3, #12]
 800c96e:	4b77      	ldr	r3, [pc, #476]	; (800cb4c <tcp_process+0x7c8>)
 800c970:	2201      	movs	r2, #1
 800c972:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	220a      	movs	r2, #10
 800c978:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c97a:	4b75      	ldr	r3, [pc, #468]	; (800cb50 <tcp_process+0x7cc>)
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	60da      	str	r2, [r3, #12]
 800c982:	4a73      	ldr	r2, [pc, #460]	; (800cb50 <tcp_process+0x7cc>)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6013      	str	r3, [r2, #0]
 800c988:	f002 fcfa 	bl	800f380 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c98c:	e0d2      	b.n	800cb34 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	8b5b      	ldrh	r3, [r3, #26]
 800c992:	f043 0302 	orr.w	r3, r3, #2
 800c996:	b29a      	uxth	r2, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2208      	movs	r2, #8
 800c9a0:	751a      	strb	r2, [r3, #20]
      break;
 800c9a2:	e0c7      	b.n	800cb34 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c9a4:	4b6b      	ldr	r3, [pc, #428]	; (800cb54 <tcp_process+0x7d0>)
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	f003 0310 	and.w	r3, r3, #16
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f000 80c1 	beq.w	800cb34 <tcp_process+0x7b0>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c9b6:	4b68      	ldr	r3, [pc, #416]	; (800cb58 <tcp_process+0x7d4>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	f040 80ba 	bne.w	800cb34 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f040 80b5 	bne.w	800cb34 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2206      	movs	r2, #6
 800c9ce:	751a      	strb	r2, [r3, #20]
      break;
 800c9d0:	e0b0      	b.n	800cb34 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 f9ca 	bl	800cd6c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c9d8:	4b60      	ldr	r3, [pc, #384]	; (800cb5c <tcp_process+0x7d8>)
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	f003 0320 	and.w	r3, r3, #32
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f000 80a9 	beq.w	800cb38 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	8b5b      	ldrh	r3, [r3, #26]
 800c9ea:	f043 0302 	orr.w	r3, r3, #2
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f7fe fd39 	bl	800b46c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c9fa:	4b59      	ldr	r3, [pc, #356]	; (800cb60 <tcp_process+0x7dc>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d105      	bne.n	800ca10 <tcp_process+0x68c>
 800ca04:	4b56      	ldr	r3, [pc, #344]	; (800cb60 <tcp_process+0x7dc>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	4a55      	ldr	r2, [pc, #340]	; (800cb60 <tcp_process+0x7dc>)
 800ca0c:	6013      	str	r3, [r2, #0]
 800ca0e:	e013      	b.n	800ca38 <tcp_process+0x6b4>
 800ca10:	4b53      	ldr	r3, [pc, #332]	; (800cb60 <tcp_process+0x7dc>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	613b      	str	r3, [r7, #16]
 800ca16:	e00c      	b.n	800ca32 <tcp_process+0x6ae>
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d104      	bne.n	800ca2c <tcp_process+0x6a8>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	68da      	ldr	r2, [r3, #12]
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	60da      	str	r2, [r3, #12]
 800ca2a:	e005      	b.n	800ca38 <tcp_process+0x6b4>
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	68db      	ldr	r3, [r3, #12]
 800ca30:	613b      	str	r3, [r7, #16]
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d1ef      	bne.n	800ca18 <tcp_process+0x694>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	60da      	str	r2, [r3, #12]
 800ca3e:	4b43      	ldr	r3, [pc, #268]	; (800cb4c <tcp_process+0x7c8>)
 800ca40:	2201      	movs	r2, #1
 800ca42:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	220a      	movs	r2, #10
 800ca48:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ca4a:	4b41      	ldr	r3, [pc, #260]	; (800cb50 <tcp_process+0x7cc>)
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	60da      	str	r2, [r3, #12]
 800ca52:	4a3f      	ldr	r2, [pc, #252]	; (800cb50 <tcp_process+0x7cc>)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6013      	str	r3, [r2, #0]
 800ca58:	f002 fc92 	bl	800f380 <tcp_timer_needed>
      }
      break;
 800ca5c:	e06c      	b.n	800cb38 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 f984 	bl	800cd6c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ca64:	4b3b      	ldr	r3, [pc, #236]	; (800cb54 <tcp_process+0x7d0>)
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	f003 0310 	and.w	r3, r3, #16
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d065      	beq.n	800cb3c <tcp_process+0x7b8>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca74:	4b38      	ldr	r3, [pc, #224]	; (800cb58 <tcp_process+0x7d4>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d15f      	bne.n	800cb3c <tcp_process+0x7b8>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d15b      	bne.n	800cb3c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f7fe fcf1 	bl	800b46c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ca8a:	4b35      	ldr	r3, [pc, #212]	; (800cb60 <tcp_process+0x7dc>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d105      	bne.n	800caa0 <tcp_process+0x71c>
 800ca94:	4b32      	ldr	r3, [pc, #200]	; (800cb60 <tcp_process+0x7dc>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	4a31      	ldr	r2, [pc, #196]	; (800cb60 <tcp_process+0x7dc>)
 800ca9c:	6013      	str	r3, [r2, #0]
 800ca9e:	e013      	b.n	800cac8 <tcp_process+0x744>
 800caa0:	4b2f      	ldr	r3, [pc, #188]	; (800cb60 <tcp_process+0x7dc>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	60fb      	str	r3, [r7, #12]
 800caa6:	e00c      	b.n	800cac2 <tcp_process+0x73e>
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d104      	bne.n	800cabc <tcp_process+0x738>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	68da      	ldr	r2, [r3, #12]
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	60da      	str	r2, [r3, #12]
 800caba:	e005      	b.n	800cac8 <tcp_process+0x744>
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	60fb      	str	r3, [r7, #12]
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d1ef      	bne.n	800caa8 <tcp_process+0x724>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	60da      	str	r2, [r3, #12]
 800cace:	4b1f      	ldr	r3, [pc, #124]	; (800cb4c <tcp_process+0x7c8>)
 800cad0:	2201      	movs	r2, #1
 800cad2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	220a      	movs	r2, #10
 800cad8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cada:	4b1d      	ldr	r3, [pc, #116]	; (800cb50 <tcp_process+0x7cc>)
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	60da      	str	r2, [r3, #12]
 800cae2:	4a1b      	ldr	r2, [pc, #108]	; (800cb50 <tcp_process+0x7cc>)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6013      	str	r3, [r2, #0]
 800cae8:	f002 fc4a 	bl	800f380 <tcp_timer_needed>
      }
      break;
 800caec:	e026      	b.n	800cb3c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 f93c 	bl	800cd6c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800caf4:	4b17      	ldr	r3, [pc, #92]	; (800cb54 <tcp_process+0x7d0>)
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	f003 0310 	and.w	r3, r3, #16
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d01f      	beq.n	800cb40 <tcp_process+0x7bc>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb04:	4b14      	ldr	r3, [pc, #80]	; (800cb58 <tcp_process+0x7d4>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d119      	bne.n	800cb40 <tcp_process+0x7bc>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d115      	bne.n	800cb40 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800cb14:	4b11      	ldr	r3, [pc, #68]	; (800cb5c <tcp_process+0x7d8>)
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	f043 0310 	orr.w	r3, r3, #16
 800cb1c:	b2da      	uxtb	r2, r3
 800cb1e:	4b0f      	ldr	r3, [pc, #60]	; (800cb5c <tcp_process+0x7d8>)
 800cb20:	701a      	strb	r2, [r3, #0]
      }
      break;
 800cb22:	e00d      	b.n	800cb40 <tcp_process+0x7bc>
    default:
      break;
 800cb24:	bf00      	nop
 800cb26:	e00c      	b.n	800cb42 <tcp_process+0x7be>
      break;
 800cb28:	bf00      	nop
 800cb2a:	e00a      	b.n	800cb42 <tcp_process+0x7be>
      break;
 800cb2c:	bf00      	nop
 800cb2e:	e008      	b.n	800cb42 <tcp_process+0x7be>
      break;
 800cb30:	bf00      	nop
 800cb32:	e006      	b.n	800cb42 <tcp_process+0x7be>
      break;
 800cb34:	bf00      	nop
 800cb36:	e004      	b.n	800cb42 <tcp_process+0x7be>
      break;
 800cb38:	bf00      	nop
 800cb3a:	e002      	b.n	800cb42 <tcp_process+0x7be>
      break;
 800cb3c:	bf00      	nop
 800cb3e:	e000      	b.n	800cb42 <tcp_process+0x7be>
      break;
 800cb40:	bf00      	nop
  }
  return ERR_OK;
 800cb42:	2300      	movs	r3, #0
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3724      	adds	r7, #36	; 0x24
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd90      	pop	{r4, r7, pc}
 800cb4c:	2000f068 	.word	0x2000f068
 800cb50:	2000f064 	.word	0x2000f064
 800cb54:	2000f098 	.word	0x2000f098
 800cb58:	2000f090 	.word	0x2000f090
 800cb5c:	2000f099 	.word	0x2000f099
 800cb60:	2000f060 	.word	0x2000f060

0800cb64 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800cb64:	b590      	push	{r4, r7, lr}
 800cb66:	b085      	sub	sp, #20
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d106      	bne.n	800cb82 <tcp_oos_insert_segment+0x1e>
 800cb74:	4b3b      	ldr	r3, [pc, #236]	; (800cc64 <tcp_oos_insert_segment+0x100>)
 800cb76:	f240 421f 	movw	r2, #1055	; 0x41f
 800cb7a:	493b      	ldr	r1, [pc, #236]	; (800cc68 <tcp_oos_insert_segment+0x104>)
 800cb7c:	483b      	ldr	r0, [pc, #236]	; (800cc6c <tcp_oos_insert_segment+0x108>)
 800cb7e:	f005 fbeb 	bl	8012358 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	68db      	ldr	r3, [r3, #12]
 800cb86:	899b      	ldrh	r3, [r3, #12]
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7fb fc10 	bl	80083b0 <lwip_htons>
 800cb90:	4603      	mov	r3, r0
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	f003 0301 	and.w	r3, r3, #1
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d028      	beq.n	800cbee <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800cb9c:	6838      	ldr	r0, [r7, #0]
 800cb9e:	f7fe fa63 	bl	800b068 <tcp_segs_free>
    next = NULL;
 800cba2:	2300      	movs	r3, #0
 800cba4:	603b      	str	r3, [r7, #0]
 800cba6:	e056      	b.n	800cc56 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	899b      	ldrh	r3, [r3, #12]
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7fb fbfd 	bl	80083b0 <lwip_htons>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	f003 0301 	and.w	r3, r3, #1
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00d      	beq.n	800cbde <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	68db      	ldr	r3, [r3, #12]
 800cbc6:	899b      	ldrh	r3, [r3, #12]
 800cbc8:	b29c      	uxth	r4, r3
 800cbca:	2001      	movs	r0, #1
 800cbcc:	f7fb fbf0 	bl	80083b0 <lwip_htons>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	4322      	orrs	r2, r4
 800cbda:	b292      	uxth	r2, r2
 800cbdc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800cbe8:	68f8      	ldr	r0, [r7, #12]
 800cbea:	f7fe fa52 	bl	800b092 <tcp_seg_free>
    while (next &&
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d00e      	beq.n	800cc12 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	891b      	ldrh	r3, [r3, #8]
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	4b1d      	ldr	r3, [pc, #116]	; (800cc70 <tcp_oos_insert_segment+0x10c>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	441a      	add	r2, r3
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	6839      	ldr	r1, [r7, #0]
 800cc08:	8909      	ldrh	r1, [r1, #8]
 800cc0a:	440b      	add	r3, r1
 800cc0c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	daca      	bge.n	800cba8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d01e      	beq.n	800cc56 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	891b      	ldrh	r3, [r3, #8]
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	4b14      	ldr	r3, [pc, #80]	; (800cc70 <tcp_oos_insert_segment+0x10c>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	441a      	add	r2, r3
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	dd12      	ble.n	800cc56 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	68db      	ldr	r3, [r3, #12]
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	b29a      	uxth	r2, r3
 800cc38:	4b0d      	ldr	r3, [pc, #52]	; (800cc70 <tcp_oos_insert_segment+0x10c>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	1ad3      	subs	r3, r2, r3
 800cc40:	b29a      	uxth	r2, r3
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	685a      	ldr	r2, [r3, #4]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	891b      	ldrh	r3, [r3, #8]
 800cc4e:	4619      	mov	r1, r3
 800cc50:	4610      	mov	r0, r2
 800cc52:	f7fc fe19 	bl	8009888 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	683a      	ldr	r2, [r7, #0]
 800cc5a:	601a      	str	r2, [r3, #0]
}
 800cc5c:	bf00      	nop
 800cc5e:	3714      	adds	r7, #20
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd90      	pop	{r4, r7, pc}
 800cc64:	080145a4 	.word	0x080145a4
 800cc68:	08014864 	.word	0x08014864
 800cc6c:	080145f0 	.word	0x080145f0
 800cc70:	2000f08c 	.word	0x2000f08c

0800cc74 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800cc74:	b5b0      	push	{r4, r5, r7, lr}
 800cc76:	b086      	sub	sp, #24
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	60f8      	str	r0, [r7, #12]
 800cc7c:	60b9      	str	r1, [r7, #8]
 800cc7e:	607a      	str	r2, [r7, #4]
 800cc80:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800cc82:	e03e      	b.n	800cd02 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7fd f80c 	bl	8009cb0 <pbuf_clen>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cca2:	8a7a      	ldrh	r2, [r7, #18]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d906      	bls.n	800ccb6 <tcp_free_acked_segments+0x42>
 800cca8:	4b2a      	ldr	r3, [pc, #168]	; (800cd54 <tcp_free_acked_segments+0xe0>)
 800ccaa:	f240 4257 	movw	r2, #1111	; 0x457
 800ccae:	492a      	ldr	r1, [pc, #168]	; (800cd58 <tcp_free_acked_segments+0xe4>)
 800ccb0:	482a      	ldr	r0, [pc, #168]	; (800cd5c <tcp_free_acked_segments+0xe8>)
 800ccb2:	f005 fb51 	bl	8012358 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ccbc:	8a7b      	ldrh	r3, [r7, #18]
 800ccbe:	1ad3      	subs	r3, r2, r3
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	891a      	ldrh	r2, [r3, #8]
 800cccc:	4b24      	ldr	r3, [pc, #144]	; (800cd60 <tcp_free_acked_segments+0xec>)
 800ccce:	881b      	ldrh	r3, [r3, #0]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	b29a      	uxth	r2, r3
 800ccd4:	4b22      	ldr	r3, [pc, #136]	; (800cd60 <tcp_free_acked_segments+0xec>)
 800ccd6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ccd8:	6978      	ldr	r0, [r7, #20]
 800ccda:	f7fe f9da 	bl	800b092 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d00c      	beq.n	800cd02 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d109      	bne.n	800cd02 <tcp_free_acked_segments+0x8e>
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d106      	bne.n	800cd02 <tcp_free_acked_segments+0x8e>
 800ccf4:	4b17      	ldr	r3, [pc, #92]	; (800cd54 <tcp_free_acked_segments+0xe0>)
 800ccf6:	f240 4261 	movw	r2, #1121	; 0x461
 800ccfa:	491a      	ldr	r1, [pc, #104]	; (800cd64 <tcp_free_acked_segments+0xf0>)
 800ccfc:	4817      	ldr	r0, [pc, #92]	; (800cd5c <tcp_free_acked_segments+0xe8>)
 800ccfe:	f005 fb2b 	bl	8012358 <iprintf>
  while (seg_list != NULL &&
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d020      	beq.n	800cd4a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7fb fb63 	bl	80083da <lwip_htonl>
 800cd14:	4604      	mov	r4, r0
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	891b      	ldrh	r3, [r3, #8]
 800cd1a:	461d      	mov	r5, r3
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	68db      	ldr	r3, [r3, #12]
 800cd20:	899b      	ldrh	r3, [r3, #12]
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7fb fb43 	bl	80083b0 <lwip_htons>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	f003 0303 	and.w	r3, r3, #3
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d001      	beq.n	800cd3a <tcp_free_acked_segments+0xc6>
 800cd36:	2301      	movs	r3, #1
 800cd38:	e000      	b.n	800cd3c <tcp_free_acked_segments+0xc8>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	442b      	add	r3, r5
 800cd3e:	18e2      	adds	r2, r4, r3
 800cd40:	4b09      	ldr	r3, [pc, #36]	; (800cd68 <tcp_free_acked_segments+0xf4>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	dd9c      	ble.n	800cc84 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800cd4a:	68bb      	ldr	r3, [r7, #8]
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3718      	adds	r7, #24
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bdb0      	pop	{r4, r5, r7, pc}
 800cd54:	080145a4 	.word	0x080145a4
 800cd58:	0801488c 	.word	0x0801488c
 800cd5c:	080145f0 	.word	0x080145f0
 800cd60:	2000f094 	.word	0x2000f094
 800cd64:	080148b4 	.word	0x080148b4
 800cd68:	2000f090 	.word	0x2000f090

0800cd6c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800cd6c:	b5b0      	push	{r4, r5, r7, lr}
 800cd6e:	b094      	sub	sp, #80	; 0x50
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800cd74:	2300      	movs	r3, #0
 800cd76:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d106      	bne.n	800cd8c <tcp_receive+0x20>
 800cd7e:	4b91      	ldr	r3, [pc, #580]	; (800cfc4 <tcp_receive+0x258>)
 800cd80:	f240 427b 	movw	r2, #1147	; 0x47b
 800cd84:	4990      	ldr	r1, [pc, #576]	; (800cfc8 <tcp_receive+0x25c>)
 800cd86:	4891      	ldr	r0, [pc, #580]	; (800cfcc <tcp_receive+0x260>)
 800cd88:	f005 fae6 	bl	8012358 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	7d1b      	ldrb	r3, [r3, #20]
 800cd90:	2b03      	cmp	r3, #3
 800cd92:	d806      	bhi.n	800cda2 <tcp_receive+0x36>
 800cd94:	4b8b      	ldr	r3, [pc, #556]	; (800cfc4 <tcp_receive+0x258>)
 800cd96:	f240 427c 	movw	r2, #1148	; 0x47c
 800cd9a:	498d      	ldr	r1, [pc, #564]	; (800cfd0 <tcp_receive+0x264>)
 800cd9c:	488b      	ldr	r0, [pc, #556]	; (800cfcc <tcp_receive+0x260>)
 800cd9e:	f005 fadb 	bl	8012358 <iprintf>

  if (flags & TCP_ACK) {
 800cda2:	4b8c      	ldr	r3, [pc, #560]	; (800cfd4 <tcp_receive+0x268>)
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	f003 0310 	and.w	r3, r3, #16
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f000 8264 	beq.w	800d278 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdbc:	4413      	add	r3, r2
 800cdbe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cdc4:	4b84      	ldr	r3, [pc, #528]	; (800cfd8 <tcp_receive+0x26c>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	1ad3      	subs	r3, r2, r3
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	db1b      	blt.n	800ce06 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cdd2:	4b81      	ldr	r3, [pc, #516]	; (800cfd8 <tcp_receive+0x26c>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d106      	bne.n	800cde8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cdde:	4b7f      	ldr	r3, [pc, #508]	; (800cfdc <tcp_receive+0x270>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	1ad3      	subs	r3, r2, r3
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	db0e      	blt.n	800ce06 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cdec:	4b7b      	ldr	r3, [pc, #492]	; (800cfdc <tcp_receive+0x270>)
 800cdee:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d125      	bne.n	800ce40 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cdf4:	4b7a      	ldr	r3, [pc, #488]	; (800cfe0 <tcp_receive+0x274>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	89db      	ldrh	r3, [r3, #14]
 800cdfa:	b29a      	uxth	r2, r3
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d91c      	bls.n	800ce40 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ce06:	4b76      	ldr	r3, [pc, #472]	; (800cfe0 <tcp_receive+0x274>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	89db      	ldrh	r3, [r3, #14]
 800ce0c:	b29a      	uxth	r2, r3
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d205      	bcs.n	800ce30 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ce30:	4b69      	ldr	r3, [pc, #420]	; (800cfd8 <tcp_receive+0x26c>)
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ce38:	4b68      	ldr	r3, [pc, #416]	; (800cfdc <tcp_receive+0x270>)
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ce40:	4b66      	ldr	r3, [pc, #408]	; (800cfdc <tcp_receive+0x270>)
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	dc58      	bgt.n	800cf00 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ce4e:	4b65      	ldr	r3, [pc, #404]	; (800cfe4 <tcp_receive+0x278>)
 800ce50:	881b      	ldrh	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d14b      	bne.n	800ceee <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ce60:	4413      	add	r3, r2
 800ce62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d142      	bne.n	800ceee <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	db3d      	blt.n	800ceee <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce76:	4b59      	ldr	r3, [pc, #356]	; (800cfdc <tcp_receive+0x270>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d137      	bne.n	800ceee <tcp_receive+0x182>
              found_dupack = 1;
 800ce7e:	2301      	movs	r3, #1
 800ce80:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ce88:	2bff      	cmp	r3, #255	; 0xff
 800ce8a:	d007      	beq.n	800ce9c <tcp_receive+0x130>
                ++pcb->dupacks;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ce92:	3301      	adds	r3, #1
 800ce94:	b2da      	uxtb	r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cea2:	2b03      	cmp	r3, #3
 800cea4:	d91b      	bls.n	800cede <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ceb0:	4413      	add	r3, r2
 800ceb2:	b29a      	uxth	r2, r3
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d30a      	bcc.n	800ced4 <tcp_receive+0x168>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cec8:	4413      	add	r3, r2
 800ceca:	b29a      	uxth	r2, r3
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ced2:	e004      	b.n	800cede <tcp_receive+0x172>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ceda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cee4:	2b02      	cmp	r3, #2
 800cee6:	d902      	bls.n	800ceee <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f001 feed 	bl	800ecc8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ceee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	f040 8161 	bne.w	800d1b8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2200      	movs	r2, #0
 800cefa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cefe:	e15b      	b.n	800d1b8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cf00:	4b36      	ldr	r3, [pc, #216]	; (800cfdc <tcp_receive+0x270>)
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf08:	1ad3      	subs	r3, r2, r3
 800cf0a:	3b01      	subs	r3, #1
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f2c0 814e 	blt.w	800d1ae <tcp_receive+0x442>
 800cf12:	4b32      	ldr	r3, [pc, #200]	; (800cfdc <tcp_receive+0x270>)
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf1a:	1ad3      	subs	r3, r2, r3
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f300 8146 	bgt.w	800d1ae <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	8b5b      	ldrh	r3, [r3, #26]
 800cf26:	f003 0304 	and.w	r3, r3, #4
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d010      	beq.n	800cf50 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	8b5b      	ldrh	r3, [r3, #26]
 800cf32:	f023 0304 	bic.w	r3, r3, #4
 800cf36:	b29a      	uxth	r2, r3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cf5e:	10db      	asrs	r3, r3, #3
 800cf60:	b21b      	sxth	r3, r3
 800cf62:	b29a      	uxth	r2, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	4413      	add	r3, r2
 800cf6e:	b29b      	uxth	r3, r3
 800cf70:	b21a      	sxth	r2, r3
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800cf78:	4b18      	ldr	r3, [pc, #96]	; (800cfdc <tcp_receive+0x270>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	b29a      	uxth	r2, r3
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	1ad3      	subs	r3, r2, r3
 800cf86:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800cf90:	4b12      	ldr	r3, [pc, #72]	; (800cfdc <tcp_receive+0x270>)
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	7d1b      	ldrb	r3, [r3, #20]
 800cf9c:	2b03      	cmp	r3, #3
 800cf9e:	f240 8097 	bls.w	800d0d0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d245      	bcs.n	800d03e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	8b5b      	ldrh	r3, [r3, #26]
 800cfb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d014      	beq.n	800cfe8 <tcp_receive+0x27c>
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	e013      	b.n	800cfea <tcp_receive+0x27e>
 800cfc2:	bf00      	nop
 800cfc4:	080145a4 	.word	0x080145a4
 800cfc8:	080148d4 	.word	0x080148d4
 800cfcc:	080145f0 	.word	0x080145f0
 800cfd0:	080148f0 	.word	0x080148f0
 800cfd4:	2000f098 	.word	0x2000f098
 800cfd8:	2000f08c 	.word	0x2000f08c
 800cfdc:	2000f090 	.word	0x2000f090
 800cfe0:	2000f07c 	.word	0x2000f07c
 800cfe4:	2000f096 	.word	0x2000f096
 800cfe8:	2302      	movs	r3, #2
 800cfea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800cfee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cff2:	b29a      	uxth	r2, r3
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cff8:	fb12 f303 	smulbb	r3, r2, r3
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d000:	4293      	cmp	r3, r2
 800d002:	bf28      	it	cs
 800d004:	4613      	movcs	r3, r2
 800d006:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d00e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d010:	4413      	add	r3, r2
 800d012:	b29a      	uxth	r2, r3
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d309      	bcc.n	800d032 <tcp_receive+0x2c6>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d024:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d026:	4413      	add	r3, r2
 800d028:	b29a      	uxth	r2, r3
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d030:	e04e      	b.n	800d0d0 <tcp_receive+0x364>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d038:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d03c:	e048      	b.n	800d0d0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d044:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d046:	4413      	add	r3, r2
 800d048:	b29a      	uxth	r2, r3
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d050:	429a      	cmp	r2, r3
 800d052:	d309      	bcc.n	800d068 <tcp_receive+0x2fc>
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d05a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d05c:	4413      	add	r3, r2
 800d05e:	b29a      	uxth	r2, r3
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d066:	e004      	b.n	800d072 <tcp_receive+0x306>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d06e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d07e:	429a      	cmp	r2, r3
 800d080:	d326      	bcc.n	800d0d0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d08e:	1ad3      	subs	r3, r2, r3
 800d090:	b29a      	uxth	r2, r3
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0a2:	4413      	add	r3, r2
 800d0a4:	b29a      	uxth	r2, r3
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d30a      	bcc.n	800d0c6 <tcp_receive+0x35a>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d0ba:	4413      	add	r3, r2
 800d0bc:	b29a      	uxth	r2, r3
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d0c4:	e004      	b.n	800d0d0 <tcp_receive+0x364>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0d8:	4a98      	ldr	r2, [pc, #608]	; (800d33c <tcp_receive+0x5d0>)
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f7ff fdca 	bl	800cc74 <tcp_free_acked_segments>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0ee:	4a94      	ldr	r2, [pc, #592]	; (800d340 <tcp_receive+0x5d4>)
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f7ff fdbf 	bl	800cc74 <tcp_free_acked_segments>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d100:	2b00      	cmp	r3, #0
 800d102:	d104      	bne.n	800d10e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d10a:	861a      	strh	r2, [r3, #48]	; 0x30
 800d10c:	e002      	b.n	800d114 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2200      	movs	r2, #0
 800d112:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2200      	movs	r2, #0
 800d118:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d103      	bne.n	800d12a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2200      	movs	r2, #0
 800d126:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d130:	4b84      	ldr	r3, [pc, #528]	; (800d344 <tcp_receive+0x5d8>)
 800d132:	881b      	ldrh	r3, [r3, #0]
 800d134:	4413      	add	r3, r2
 800d136:	b29a      	uxth	r2, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	8b5b      	ldrh	r3, [r3, #26]
 800d142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d146:	2b00      	cmp	r3, #0
 800d148:	d035      	beq.n	800d1b6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d118      	bne.n	800d184 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d156:	2b00      	cmp	r3, #0
 800d158:	d00c      	beq.n	800d174 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	4618      	mov	r0, r3
 800d168:	f7fb f937 	bl	80083da <lwip_htonl>
 800d16c:	4603      	mov	r3, r0
 800d16e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d170:	2b00      	cmp	r3, #0
 800d172:	dc20      	bgt.n	800d1b6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	8b5b      	ldrh	r3, [r3, #26]
 800d178:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d17c:	b29a      	uxth	r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d182:	e018      	b.n	800d1b6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d18c:	68db      	ldr	r3, [r3, #12]
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	4618      	mov	r0, r3
 800d192:	f7fb f922 	bl	80083da <lwip_htonl>
 800d196:	4603      	mov	r3, r0
 800d198:	1ae3      	subs	r3, r4, r3
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	dc0b      	bgt.n	800d1b6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	8b5b      	ldrh	r3, [r3, #26]
 800d1a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d1a6:	b29a      	uxth	r2, r3
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d1ac:	e003      	b.n	800d1b6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f001 ff76 	bl	800f0a0 <tcp_send_empty_ack>
 800d1b4:	e000      	b.n	800d1b8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d1b6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d05b      	beq.n	800d278 <tcp_receive+0x50c>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1c4:	4b60      	ldr	r3, [pc, #384]	; (800d348 <tcp_receive+0x5dc>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	1ad3      	subs	r3, r2, r3
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	da54      	bge.n	800d278 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d1ce:	4b5f      	ldr	r3, [pc, #380]	; (800d34c <tcp_receive+0x5e0>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	1ad3      	subs	r3, r2, r3
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d1e2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d1ec:	10db      	asrs	r3, r3, #3
 800d1ee:	b21b      	sxth	r3, r3
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	1ad3      	subs	r3, r2, r3
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d200:	b29a      	uxth	r2, r3
 800d202:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d206:	4413      	add	r3, r2
 800d208:	b29b      	uxth	r3, r3
 800d20a:	b21a      	sxth	r2, r3
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d210:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d214:	2b00      	cmp	r3, #0
 800d216:	da05      	bge.n	800d224 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800d218:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d21c:	425b      	negs	r3, r3
 800d21e:	b29b      	uxth	r3, r3
 800d220:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d224:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d22e:	109b      	asrs	r3, r3, #2
 800d230:	b21b      	sxth	r3, r3
 800d232:	b29b      	uxth	r3, r3
 800d234:	1ad3      	subs	r3, r2, r3
 800d236:	b29b      	uxth	r3, r3
 800d238:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d242:	b29a      	uxth	r2, r3
 800d244:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d248:	4413      	add	r3, r2
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	b21a      	sxth	r2, r3
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d258:	10db      	asrs	r3, r3, #3
 800d25a:	b21b      	sxth	r3, r3
 800d25c:	b29a      	uxth	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d264:	b29b      	uxth	r3, r3
 800d266:	4413      	add	r3, r2
 800d268:	b29b      	uxth	r3, r3
 800d26a:	b21a      	sxth	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2200      	movs	r2, #0
 800d276:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d278:	4b35      	ldr	r3, [pc, #212]	; (800d350 <tcp_receive+0x5e4>)
 800d27a:	881b      	ldrh	r3, [r3, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f000 84e2 	beq.w	800dc46 <tcp_receive+0xeda>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	7d1b      	ldrb	r3, [r3, #20]
 800d286:	2b06      	cmp	r3, #6
 800d288:	f200 84dd 	bhi.w	800dc46 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d290:	4b30      	ldr	r3, [pc, #192]	; (800d354 <tcp_receive+0x5e8>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	1ad3      	subs	r3, r2, r3
 800d296:	3b01      	subs	r3, #1
 800d298:	2b00      	cmp	r3, #0
 800d29a:	f2c0 808f 	blt.w	800d3bc <tcp_receive+0x650>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d2a2:	4b2b      	ldr	r3, [pc, #172]	; (800d350 <tcp_receive+0x5e4>)
 800d2a4:	881b      	ldrh	r3, [r3, #0]
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	4b2a      	ldr	r3, [pc, #168]	; (800d354 <tcp_receive+0x5e8>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	440b      	add	r3, r1
 800d2ae:	1ad3      	subs	r3, r2, r3
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	f300 8082 	bgt.w	800d3bc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d2b8:	4b27      	ldr	r3, [pc, #156]	; (800d358 <tcp_receive+0x5ec>)
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d2c2:	4b24      	ldr	r3, [pc, #144]	; (800d354 <tcp_receive+0x5e8>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	1ad3      	subs	r3, r2, r3
 800d2c8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d2ca:	4b23      	ldr	r3, [pc, #140]	; (800d358 <tcp_receive+0x5ec>)
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d106      	bne.n	800d2e0 <tcp_receive+0x574>
 800d2d2:	4b22      	ldr	r3, [pc, #136]	; (800d35c <tcp_receive+0x5f0>)
 800d2d4:	f240 5294 	movw	r2, #1428	; 0x594
 800d2d8:	4921      	ldr	r1, [pc, #132]	; (800d360 <tcp_receive+0x5f4>)
 800d2da:	4822      	ldr	r0, [pc, #136]	; (800d364 <tcp_receive+0x5f8>)
 800d2dc:	f005 f83c 	bl	8012358 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d906      	bls.n	800d2f8 <tcp_receive+0x58c>
 800d2ea:	4b1c      	ldr	r3, [pc, #112]	; (800d35c <tcp_receive+0x5f0>)
 800d2ec:	f240 5295 	movw	r2, #1429	; 0x595
 800d2f0:	491d      	ldr	r1, [pc, #116]	; (800d368 <tcp_receive+0x5fc>)
 800d2f2:	481c      	ldr	r0, [pc, #112]	; (800d364 <tcp_receive+0x5f8>)
 800d2f4:	f005 f830 	bl	8012358 <iprintf>
      off = (u16_t)off32;
 800d2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d2fe:	4b16      	ldr	r3, [pc, #88]	; (800d358 <tcp_receive+0x5ec>)
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	891b      	ldrh	r3, [r3, #8]
 800d304:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d308:	429a      	cmp	r2, r3
 800d30a:	d906      	bls.n	800d31a <tcp_receive+0x5ae>
 800d30c:	4b13      	ldr	r3, [pc, #76]	; (800d35c <tcp_receive+0x5f0>)
 800d30e:	f240 5297 	movw	r2, #1431	; 0x597
 800d312:	4916      	ldr	r1, [pc, #88]	; (800d36c <tcp_receive+0x600>)
 800d314:	4813      	ldr	r0, [pc, #76]	; (800d364 <tcp_receive+0x5f8>)
 800d316:	f005 f81f 	bl	8012358 <iprintf>
      inseg.len -= off;
 800d31a:	4b0f      	ldr	r3, [pc, #60]	; (800d358 <tcp_receive+0x5ec>)
 800d31c:	891a      	ldrh	r2, [r3, #8]
 800d31e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d322:	1ad3      	subs	r3, r2, r3
 800d324:	b29a      	uxth	r2, r3
 800d326:	4b0c      	ldr	r3, [pc, #48]	; (800d358 <tcp_receive+0x5ec>)
 800d328:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d32a:	4b0b      	ldr	r3, [pc, #44]	; (800d358 <tcp_receive+0x5ec>)
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	891a      	ldrh	r2, [r3, #8]
 800d330:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d334:	1ad3      	subs	r3, r2, r3
 800d336:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800d338:	e02a      	b.n	800d390 <tcp_receive+0x624>
 800d33a:	bf00      	nop
 800d33c:	0801490c 	.word	0x0801490c
 800d340:	08014914 	.word	0x08014914
 800d344:	2000f094 	.word	0x2000f094
 800d348:	2000f090 	.word	0x2000f090
 800d34c:	2000f054 	.word	0x2000f054
 800d350:	2000f096 	.word	0x2000f096
 800d354:	2000f08c 	.word	0x2000f08c
 800d358:	2000f06c 	.word	0x2000f06c
 800d35c:	080145a4 	.word	0x080145a4
 800d360:	0801491c 	.word	0x0801491c
 800d364:	080145f0 	.word	0x080145f0
 800d368:	0801492c 	.word	0x0801492c
 800d36c:	0801493c 	.word	0x0801493c
        off -= p->len;
 800d370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d372:	895b      	ldrh	r3, [r3, #10]
 800d374:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d378:	1ad3      	subs	r3, r2, r3
 800d37a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d37e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d380:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d382:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d386:	2200      	movs	r2, #0
 800d388:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d38a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800d390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d392:	895b      	ldrh	r3, [r3, #10]
 800d394:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d398:	429a      	cmp	r2, r3
 800d39a:	d8e9      	bhi.n	800d370 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d39c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d3a4:	f7fc fb70 	bl	8009a88 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ac:	4a91      	ldr	r2, [pc, #580]	; (800d5f4 <tcp_receive+0x888>)
 800d3ae:	6013      	str	r3, [r2, #0]
 800d3b0:	4b91      	ldr	r3, [pc, #580]	; (800d5f8 <tcp_receive+0x88c>)
 800d3b2:	68db      	ldr	r3, [r3, #12]
 800d3b4:	4a8f      	ldr	r2, [pc, #572]	; (800d5f4 <tcp_receive+0x888>)
 800d3b6:	6812      	ldr	r2, [r2, #0]
 800d3b8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d3ba:	e00d      	b.n	800d3d8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d3bc:	4b8d      	ldr	r3, [pc, #564]	; (800d5f4 <tcp_receive+0x888>)
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c4:	1ad3      	subs	r3, r2, r3
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	da06      	bge.n	800d3d8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	8b5b      	ldrh	r3, [r3, #26]
 800d3ce:	f043 0302 	orr.w	r3, r3, #2
 800d3d2:	b29a      	uxth	r2, r3
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d3d8:	4b86      	ldr	r3, [pc, #536]	; (800d5f4 <tcp_receive+0x888>)
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e0:	1ad3      	subs	r3, r2, r3
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	f2c0 842a 	blt.w	800dc3c <tcp_receive+0xed0>
 800d3e8:	4b82      	ldr	r3, [pc, #520]	; (800d5f4 <tcp_receive+0x888>)
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f0:	6879      	ldr	r1, [r7, #4]
 800d3f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d3f4:	440b      	add	r3, r1
 800d3f6:	1ad3      	subs	r3, r2, r3
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	f300 841e 	bgt.w	800dc3c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d404:	4b7b      	ldr	r3, [pc, #492]	; (800d5f4 <tcp_receive+0x888>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	429a      	cmp	r2, r3
 800d40a:	f040 829a 	bne.w	800d942 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d40e:	4b7a      	ldr	r3, [pc, #488]	; (800d5f8 <tcp_receive+0x88c>)
 800d410:	891c      	ldrh	r4, [r3, #8]
 800d412:	4b79      	ldr	r3, [pc, #484]	; (800d5f8 <tcp_receive+0x88c>)
 800d414:	68db      	ldr	r3, [r3, #12]
 800d416:	899b      	ldrh	r3, [r3, #12]
 800d418:	b29b      	uxth	r3, r3
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7fa ffc8 	bl	80083b0 <lwip_htons>
 800d420:	4603      	mov	r3, r0
 800d422:	b2db      	uxtb	r3, r3
 800d424:	f003 0303 	and.w	r3, r3, #3
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d001      	beq.n	800d430 <tcp_receive+0x6c4>
 800d42c:	2301      	movs	r3, #1
 800d42e:	e000      	b.n	800d432 <tcp_receive+0x6c6>
 800d430:	2300      	movs	r3, #0
 800d432:	4423      	add	r3, r4
 800d434:	b29a      	uxth	r2, r3
 800d436:	4b71      	ldr	r3, [pc, #452]	; (800d5fc <tcp_receive+0x890>)
 800d438:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d43e:	4b6f      	ldr	r3, [pc, #444]	; (800d5fc <tcp_receive+0x890>)
 800d440:	881b      	ldrh	r3, [r3, #0]
 800d442:	429a      	cmp	r2, r3
 800d444:	d275      	bcs.n	800d532 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d446:	4b6c      	ldr	r3, [pc, #432]	; (800d5f8 <tcp_receive+0x88c>)
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	899b      	ldrh	r3, [r3, #12]
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	4618      	mov	r0, r3
 800d450:	f7fa ffae 	bl	80083b0 <lwip_htons>
 800d454:	4603      	mov	r3, r0
 800d456:	b2db      	uxtb	r3, r3
 800d458:	f003 0301 	and.w	r3, r3, #1
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d01f      	beq.n	800d4a0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d460:	4b65      	ldr	r3, [pc, #404]	; (800d5f8 <tcp_receive+0x88c>)
 800d462:	68db      	ldr	r3, [r3, #12]
 800d464:	899b      	ldrh	r3, [r3, #12]
 800d466:	b29b      	uxth	r3, r3
 800d468:	b21b      	sxth	r3, r3
 800d46a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d46e:	b21c      	sxth	r4, r3
 800d470:	4b61      	ldr	r3, [pc, #388]	; (800d5f8 <tcp_receive+0x88c>)
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	899b      	ldrh	r3, [r3, #12]
 800d476:	b29b      	uxth	r3, r3
 800d478:	4618      	mov	r0, r3
 800d47a:	f7fa ff99 	bl	80083b0 <lwip_htons>
 800d47e:	4603      	mov	r3, r0
 800d480:	b2db      	uxtb	r3, r3
 800d482:	b29b      	uxth	r3, r3
 800d484:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d488:	b29b      	uxth	r3, r3
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7fa ff90 	bl	80083b0 <lwip_htons>
 800d490:	4603      	mov	r3, r0
 800d492:	b21b      	sxth	r3, r3
 800d494:	4323      	orrs	r3, r4
 800d496:	b21a      	sxth	r2, r3
 800d498:	4b57      	ldr	r3, [pc, #348]	; (800d5f8 <tcp_receive+0x88c>)
 800d49a:	68db      	ldr	r3, [r3, #12]
 800d49c:	b292      	uxth	r2, r2
 800d49e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d4a4:	4b54      	ldr	r3, [pc, #336]	; (800d5f8 <tcp_receive+0x88c>)
 800d4a6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d4a8:	4b53      	ldr	r3, [pc, #332]	; (800d5f8 <tcp_receive+0x88c>)
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	899b      	ldrh	r3, [r3, #12]
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7fa ff7d 	bl	80083b0 <lwip_htons>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	b2db      	uxtb	r3, r3
 800d4ba:	f003 0302 	and.w	r3, r3, #2
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d005      	beq.n	800d4ce <tcp_receive+0x762>
            inseg.len -= 1;
 800d4c2:	4b4d      	ldr	r3, [pc, #308]	; (800d5f8 <tcp_receive+0x88c>)
 800d4c4:	891b      	ldrh	r3, [r3, #8]
 800d4c6:	3b01      	subs	r3, #1
 800d4c8:	b29a      	uxth	r2, r3
 800d4ca:	4b4b      	ldr	r3, [pc, #300]	; (800d5f8 <tcp_receive+0x88c>)
 800d4cc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d4ce:	4b4a      	ldr	r3, [pc, #296]	; (800d5f8 <tcp_receive+0x88c>)
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	4a49      	ldr	r2, [pc, #292]	; (800d5f8 <tcp_receive+0x88c>)
 800d4d4:	8912      	ldrh	r2, [r2, #8]
 800d4d6:	4611      	mov	r1, r2
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f7fc f9d5 	bl	8009888 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d4de:	4b46      	ldr	r3, [pc, #280]	; (800d5f8 <tcp_receive+0x88c>)
 800d4e0:	891c      	ldrh	r4, [r3, #8]
 800d4e2:	4b45      	ldr	r3, [pc, #276]	; (800d5f8 <tcp_receive+0x88c>)
 800d4e4:	68db      	ldr	r3, [r3, #12]
 800d4e6:	899b      	ldrh	r3, [r3, #12]
 800d4e8:	b29b      	uxth	r3, r3
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7fa ff60 	bl	80083b0 <lwip_htons>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	f003 0303 	and.w	r3, r3, #3
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d001      	beq.n	800d500 <tcp_receive+0x794>
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	e000      	b.n	800d502 <tcp_receive+0x796>
 800d500:	2300      	movs	r3, #0
 800d502:	4423      	add	r3, r4
 800d504:	b29a      	uxth	r2, r3
 800d506:	4b3d      	ldr	r3, [pc, #244]	; (800d5fc <tcp_receive+0x890>)
 800d508:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d50a:	4b3c      	ldr	r3, [pc, #240]	; (800d5fc <tcp_receive+0x890>)
 800d50c:	881b      	ldrh	r3, [r3, #0]
 800d50e:	461a      	mov	r2, r3
 800d510:	4b38      	ldr	r3, [pc, #224]	; (800d5f4 <tcp_receive+0x888>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	441a      	add	r2, r3
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d51a:	6879      	ldr	r1, [r7, #4]
 800d51c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d51e:	440b      	add	r3, r1
 800d520:	429a      	cmp	r2, r3
 800d522:	d006      	beq.n	800d532 <tcp_receive+0x7c6>
 800d524:	4b36      	ldr	r3, [pc, #216]	; (800d600 <tcp_receive+0x894>)
 800d526:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800d52a:	4936      	ldr	r1, [pc, #216]	; (800d604 <tcp_receive+0x898>)
 800d52c:	4836      	ldr	r0, [pc, #216]	; (800d608 <tcp_receive+0x89c>)
 800d52e:	f004 ff13 	bl	8012358 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d536:	2b00      	cmp	r3, #0
 800d538:	f000 80e7 	beq.w	800d70a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d53c:	4b2e      	ldr	r3, [pc, #184]	; (800d5f8 <tcp_receive+0x88c>)
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	899b      	ldrh	r3, [r3, #12]
 800d542:	b29b      	uxth	r3, r3
 800d544:	4618      	mov	r0, r3
 800d546:	f7fa ff33 	bl	80083b0 <lwip_htons>
 800d54a:	4603      	mov	r3, r0
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	f003 0301 	and.w	r3, r3, #1
 800d552:	2b00      	cmp	r3, #0
 800d554:	d010      	beq.n	800d578 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d556:	e00a      	b.n	800d56e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d55c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d562:	681a      	ldr	r2, [r3, #0]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800d568:	68f8      	ldr	r0, [r7, #12]
 800d56a:	f7fd fd92 	bl	800b092 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d572:	2b00      	cmp	r3, #0
 800d574:	d1f0      	bne.n	800d558 <tcp_receive+0x7ec>
 800d576:	e0c8      	b.n	800d70a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d57c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d57e:	e052      	b.n	800d626 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	899b      	ldrh	r3, [r3, #12]
 800d586:	b29b      	uxth	r3, r3
 800d588:	4618      	mov	r0, r3
 800d58a:	f7fa ff11 	bl	80083b0 <lwip_htons>
 800d58e:	4603      	mov	r3, r0
 800d590:	b2db      	uxtb	r3, r3
 800d592:	f003 0301 	and.w	r3, r3, #1
 800d596:	2b00      	cmp	r3, #0
 800d598:	d03d      	beq.n	800d616 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d59a:	4b17      	ldr	r3, [pc, #92]	; (800d5f8 <tcp_receive+0x88c>)
 800d59c:	68db      	ldr	r3, [r3, #12]
 800d59e:	899b      	ldrh	r3, [r3, #12]
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7fa ff04 	bl	80083b0 <lwip_htons>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d130      	bne.n	800d616 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d5b4:	4b10      	ldr	r3, [pc, #64]	; (800d5f8 <tcp_receive+0x88c>)
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	899b      	ldrh	r3, [r3, #12]
 800d5ba:	b29c      	uxth	r4, r3
 800d5bc:	2001      	movs	r0, #1
 800d5be:	f7fa fef7 	bl	80083b0 <lwip_htons>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	4b0c      	ldr	r3, [pc, #48]	; (800d5f8 <tcp_receive+0x88c>)
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	4322      	orrs	r2, r4
 800d5cc:	b292      	uxth	r2, r2
 800d5ce:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d5d0:	4b09      	ldr	r3, [pc, #36]	; (800d5f8 <tcp_receive+0x88c>)
 800d5d2:	891c      	ldrh	r4, [r3, #8]
 800d5d4:	4b08      	ldr	r3, [pc, #32]	; (800d5f8 <tcp_receive+0x88c>)
 800d5d6:	68db      	ldr	r3, [r3, #12]
 800d5d8:	899b      	ldrh	r3, [r3, #12]
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7fa fee7 	bl	80083b0 <lwip_htons>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	f003 0303 	and.w	r3, r3, #3
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d00e      	beq.n	800d60c <tcp_receive+0x8a0>
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	e00d      	b.n	800d60e <tcp_receive+0x8a2>
 800d5f2:	bf00      	nop
 800d5f4:	2000f08c 	.word	0x2000f08c
 800d5f8:	2000f06c 	.word	0x2000f06c
 800d5fc:	2000f096 	.word	0x2000f096
 800d600:	080145a4 	.word	0x080145a4
 800d604:	0801494c 	.word	0x0801494c
 800d608:	080145f0 	.word	0x080145f0
 800d60c:	2300      	movs	r3, #0
 800d60e:	4423      	add	r3, r4
 800d610:	b29a      	uxth	r2, r3
 800d612:	4b98      	ldr	r3, [pc, #608]	; (800d874 <tcp_receive+0xb08>)
 800d614:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d618:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d61a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d620:	6938      	ldr	r0, [r7, #16]
 800d622:	f7fd fd36 	bl	800b092 <tcp_seg_free>
            while (next &&
 800d626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d00e      	beq.n	800d64a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d62c:	4b91      	ldr	r3, [pc, #580]	; (800d874 <tcp_receive+0xb08>)
 800d62e:	881b      	ldrh	r3, [r3, #0]
 800d630:	461a      	mov	r2, r3
 800d632:	4b91      	ldr	r3, [pc, #580]	; (800d878 <tcp_receive+0xb0c>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	441a      	add	r2, r3
 800d638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d63a:	68db      	ldr	r3, [r3, #12]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d640:	8909      	ldrh	r1, [r1, #8]
 800d642:	440b      	add	r3, r1
 800d644:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d646:	2b00      	cmp	r3, #0
 800d648:	da9a      	bge.n	800d580 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d059      	beq.n	800d704 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800d650:	4b88      	ldr	r3, [pc, #544]	; (800d874 <tcp_receive+0xb08>)
 800d652:	881b      	ldrh	r3, [r3, #0]
 800d654:	461a      	mov	r2, r3
 800d656:	4b88      	ldr	r3, [pc, #544]	; (800d878 <tcp_receive+0xb0c>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	441a      	add	r2, r3
 800d65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d65e:	68db      	ldr	r3, [r3, #12]
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d664:	2b00      	cmp	r3, #0
 800d666:	dd4d      	ble.n	800d704 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	b29a      	uxth	r2, r3
 800d670:	4b81      	ldr	r3, [pc, #516]	; (800d878 <tcp_receive+0xb0c>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	b29b      	uxth	r3, r3
 800d676:	1ad3      	subs	r3, r2, r3
 800d678:	b29a      	uxth	r2, r3
 800d67a:	4b80      	ldr	r3, [pc, #512]	; (800d87c <tcp_receive+0xb10>)
 800d67c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d67e:	4b7f      	ldr	r3, [pc, #508]	; (800d87c <tcp_receive+0xb10>)
 800d680:	68db      	ldr	r3, [r3, #12]
 800d682:	899b      	ldrh	r3, [r3, #12]
 800d684:	b29b      	uxth	r3, r3
 800d686:	4618      	mov	r0, r3
 800d688:	f7fa fe92 	bl	80083b0 <lwip_htons>
 800d68c:	4603      	mov	r3, r0
 800d68e:	b2db      	uxtb	r3, r3
 800d690:	f003 0302 	and.w	r3, r3, #2
 800d694:	2b00      	cmp	r3, #0
 800d696:	d005      	beq.n	800d6a4 <tcp_receive+0x938>
                inseg.len -= 1;
 800d698:	4b78      	ldr	r3, [pc, #480]	; (800d87c <tcp_receive+0xb10>)
 800d69a:	891b      	ldrh	r3, [r3, #8]
 800d69c:	3b01      	subs	r3, #1
 800d69e:	b29a      	uxth	r2, r3
 800d6a0:	4b76      	ldr	r3, [pc, #472]	; (800d87c <tcp_receive+0xb10>)
 800d6a2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d6a4:	4b75      	ldr	r3, [pc, #468]	; (800d87c <tcp_receive+0xb10>)
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	4a74      	ldr	r2, [pc, #464]	; (800d87c <tcp_receive+0xb10>)
 800d6aa:	8912      	ldrh	r2, [r2, #8]
 800d6ac:	4611      	mov	r1, r2
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fc f8ea 	bl	8009888 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d6b4:	4b71      	ldr	r3, [pc, #452]	; (800d87c <tcp_receive+0xb10>)
 800d6b6:	891c      	ldrh	r4, [r3, #8]
 800d6b8:	4b70      	ldr	r3, [pc, #448]	; (800d87c <tcp_receive+0xb10>)
 800d6ba:	68db      	ldr	r3, [r3, #12]
 800d6bc:	899b      	ldrh	r3, [r3, #12]
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7fa fe75 	bl	80083b0 <lwip_htons>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	f003 0303 	and.w	r3, r3, #3
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d001      	beq.n	800d6d6 <tcp_receive+0x96a>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	e000      	b.n	800d6d8 <tcp_receive+0x96c>
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	4423      	add	r3, r4
 800d6da:	b29a      	uxth	r2, r3
 800d6dc:	4b65      	ldr	r3, [pc, #404]	; (800d874 <tcp_receive+0xb08>)
 800d6de:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d6e0:	4b64      	ldr	r3, [pc, #400]	; (800d874 <tcp_receive+0xb08>)
 800d6e2:	881b      	ldrh	r3, [r3, #0]
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	4b64      	ldr	r3, [pc, #400]	; (800d878 <tcp_receive+0xb0c>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	441a      	add	r2, r3
 800d6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d006      	beq.n	800d704 <tcp_receive+0x998>
 800d6f6:	4b62      	ldr	r3, [pc, #392]	; (800d880 <tcp_receive+0xb14>)
 800d6f8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800d6fc:	4961      	ldr	r1, [pc, #388]	; (800d884 <tcp_receive+0xb18>)
 800d6fe:	4862      	ldr	r0, [pc, #392]	; (800d888 <tcp_receive+0xb1c>)
 800d700:	f004 fe2a 	bl	8012358 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d708:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d70a:	4b5a      	ldr	r3, [pc, #360]	; (800d874 <tcp_receive+0xb08>)
 800d70c:	881b      	ldrh	r3, [r3, #0]
 800d70e:	461a      	mov	r2, r3
 800d710:	4b59      	ldr	r3, [pc, #356]	; (800d878 <tcp_receive+0xb0c>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	441a      	add	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d71e:	4b55      	ldr	r3, [pc, #340]	; (800d874 <tcp_receive+0xb08>)
 800d720:	881b      	ldrh	r3, [r3, #0]
 800d722:	429a      	cmp	r2, r3
 800d724:	d206      	bcs.n	800d734 <tcp_receive+0x9c8>
 800d726:	4b56      	ldr	r3, [pc, #344]	; (800d880 <tcp_receive+0xb14>)
 800d728:	f240 6207 	movw	r2, #1543	; 0x607
 800d72c:	4957      	ldr	r1, [pc, #348]	; (800d88c <tcp_receive+0xb20>)
 800d72e:	4856      	ldr	r0, [pc, #344]	; (800d888 <tcp_receive+0xb1c>)
 800d730:	f004 fe12 	bl	8012358 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d738:	4b4e      	ldr	r3, [pc, #312]	; (800d874 <tcp_receive+0xb08>)
 800d73a:	881b      	ldrh	r3, [r3, #0]
 800d73c:	1ad3      	subs	r3, r2, r3
 800d73e:	b29a      	uxth	r2, r3
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f7fc ffc5 	bl	800a6d4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d74a:	4b4c      	ldr	r3, [pc, #304]	; (800d87c <tcp_receive+0xb10>)
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	891b      	ldrh	r3, [r3, #8]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d006      	beq.n	800d762 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800d754:	4b49      	ldr	r3, [pc, #292]	; (800d87c <tcp_receive+0xb10>)
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	4a4d      	ldr	r2, [pc, #308]	; (800d890 <tcp_receive+0xb24>)
 800d75a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d75c:	4b47      	ldr	r3, [pc, #284]	; (800d87c <tcp_receive+0xb10>)
 800d75e:	2200      	movs	r2, #0
 800d760:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d762:	4b46      	ldr	r3, [pc, #280]	; (800d87c <tcp_receive+0xb10>)
 800d764:	68db      	ldr	r3, [r3, #12]
 800d766:	899b      	ldrh	r3, [r3, #12]
 800d768:	b29b      	uxth	r3, r3
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7fa fe20 	bl	80083b0 <lwip_htons>
 800d770:	4603      	mov	r3, r0
 800d772:	b2db      	uxtb	r3, r3
 800d774:	f003 0301 	and.w	r3, r3, #1
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f000 80b8 	beq.w	800d8ee <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d77e:	4b45      	ldr	r3, [pc, #276]	; (800d894 <tcp_receive+0xb28>)
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	f043 0320 	orr.w	r3, r3, #32
 800d786:	b2da      	uxtb	r2, r3
 800d788:	4b42      	ldr	r3, [pc, #264]	; (800d894 <tcp_receive+0xb28>)
 800d78a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d78c:	e0af      	b.n	800d8ee <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d792:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	4a36      	ldr	r2, [pc, #216]	; (800d878 <tcp_receive+0xb0c>)
 800d79e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	891b      	ldrh	r3, [r3, #8]
 800d7a4:	461c      	mov	r4, r3
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	68db      	ldr	r3, [r3, #12]
 800d7aa:	899b      	ldrh	r3, [r3, #12]
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7fa fdfe 	bl	80083b0 <lwip_htons>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	b2db      	uxtb	r3, r3
 800d7b8:	f003 0303 	and.w	r3, r3, #3
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d001      	beq.n	800d7c4 <tcp_receive+0xa58>
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	e000      	b.n	800d7c6 <tcp_receive+0xa5a>
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	191a      	adds	r2, r3, r4
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7cc:	441a      	add	r2, r3
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7d6:	461c      	mov	r4, r3
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	891b      	ldrh	r3, [r3, #8]
 800d7dc:	461d      	mov	r5, r3
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	899b      	ldrh	r3, [r3, #12]
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f7fa fde2 	bl	80083b0 <lwip_htons>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	f003 0303 	and.w	r3, r3, #3
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d001      	beq.n	800d7fc <tcp_receive+0xa90>
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	e000      	b.n	800d7fe <tcp_receive+0xa92>
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	442b      	add	r3, r5
 800d800:	429c      	cmp	r4, r3
 800d802:	d206      	bcs.n	800d812 <tcp_receive+0xaa6>
 800d804:	4b1e      	ldr	r3, [pc, #120]	; (800d880 <tcp_receive+0xb14>)
 800d806:	f240 622b 	movw	r2, #1579	; 0x62b
 800d80a:	4923      	ldr	r1, [pc, #140]	; (800d898 <tcp_receive+0xb2c>)
 800d80c:	481e      	ldr	r0, [pc, #120]	; (800d888 <tcp_receive+0xb1c>)
 800d80e:	f004 fda3 	bl	8012358 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	891b      	ldrh	r3, [r3, #8]
 800d816:	461c      	mov	r4, r3
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	68db      	ldr	r3, [r3, #12]
 800d81c:	899b      	ldrh	r3, [r3, #12]
 800d81e:	b29b      	uxth	r3, r3
 800d820:	4618      	mov	r0, r3
 800d822:	f7fa fdc5 	bl	80083b0 <lwip_htons>
 800d826:	4603      	mov	r3, r0
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	f003 0303 	and.w	r3, r3, #3
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d001      	beq.n	800d836 <tcp_receive+0xaca>
 800d832:	2301      	movs	r3, #1
 800d834:	e000      	b.n	800d838 <tcp_receive+0xacc>
 800d836:	2300      	movs	r3, #0
 800d838:	1919      	adds	r1, r3, r4
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d83e:	b28b      	uxth	r3, r1
 800d840:	1ad3      	subs	r3, r2, r3
 800d842:	b29a      	uxth	r2, r3
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f7fc ff43 	bl	800a6d4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	891b      	ldrh	r3, [r3, #8]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d028      	beq.n	800d8aa <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d858:	4b0d      	ldr	r3, [pc, #52]	; (800d890 <tcp_receive+0xb24>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d01d      	beq.n	800d89c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800d860:	4b0b      	ldr	r3, [pc, #44]	; (800d890 <tcp_receive+0xb24>)
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	4619      	mov	r1, r3
 800d86a:	4610      	mov	r0, r2
 800d86c:	f7fc fa60 	bl	8009d30 <pbuf_cat>
 800d870:	e018      	b.n	800d8a4 <tcp_receive+0xb38>
 800d872:	bf00      	nop
 800d874:	2000f096 	.word	0x2000f096
 800d878:	2000f08c 	.word	0x2000f08c
 800d87c:	2000f06c 	.word	0x2000f06c
 800d880:	080145a4 	.word	0x080145a4
 800d884:	08014984 	.word	0x08014984
 800d888:	080145f0 	.word	0x080145f0
 800d88c:	080149c0 	.word	0x080149c0
 800d890:	2000f09c 	.word	0x2000f09c
 800d894:	2000f099 	.word	0x2000f099
 800d898:	080149e0 	.word	0x080149e0
            } else {
              recv_data = cseg->p;
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	4a70      	ldr	r2, [pc, #448]	; (800da64 <tcp_receive+0xcf8>)
 800d8a2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	68db      	ldr	r3, [r3, #12]
 800d8ae:	899b      	ldrh	r3, [r3, #12]
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7fa fd7c 	bl	80083b0 <lwip_htons>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	f003 0301 	and.w	r3, r3, #1
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d00d      	beq.n	800d8e0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d8c4:	4b68      	ldr	r3, [pc, #416]	; (800da68 <tcp_receive+0xcfc>)
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	f043 0320 	orr.w	r3, r3, #32
 800d8cc:	b2da      	uxtb	r2, r3
 800d8ce:	4b66      	ldr	r3, [pc, #408]	; (800da68 <tcp_receive+0xcfc>)
 800d8d0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	7d1b      	ldrb	r3, [r3, #20]
 800d8d6:	2b04      	cmp	r3, #4
 800d8d8:	d102      	bne.n	800d8e0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2207      	movs	r2, #7
 800d8de:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	681a      	ldr	r2, [r3, #0]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d8e8:	68b8      	ldr	r0, [r7, #8]
 800d8ea:	f7fd fbd2 	bl	800b092 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d008      	beq.n	800d908 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8fa:	68db      	ldr	r3, [r3, #12]
 800d8fc:	685a      	ldr	r2, [r3, #4]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d902:	429a      	cmp	r2, r3
 800d904:	f43f af43 	beq.w	800d78e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	8b5b      	ldrh	r3, [r3, #26]
 800d90c:	f003 0301 	and.w	r3, r3, #1
 800d910:	2b00      	cmp	r3, #0
 800d912:	d00e      	beq.n	800d932 <tcp_receive+0xbc6>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	8b5b      	ldrh	r3, [r3, #26]
 800d918:	f023 0301 	bic.w	r3, r3, #1
 800d91c:	b29a      	uxth	r2, r3
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	835a      	strh	r2, [r3, #26]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	8b5b      	ldrh	r3, [r3, #26]
 800d926:	f043 0302 	orr.w	r3, r3, #2
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d930:	e188      	b.n	800dc44 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	8b5b      	ldrh	r3, [r3, #26]
 800d936:	f043 0301 	orr.w	r3, r3, #1
 800d93a:	b29a      	uxth	r2, r3
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d940:	e180      	b.n	800dc44 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d946:	2b00      	cmp	r3, #0
 800d948:	d106      	bne.n	800d958 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d94a:	4848      	ldr	r0, [pc, #288]	; (800da6c <tcp_receive+0xd00>)
 800d94c:	f7fd fbba 	bl	800b0c4 <tcp_seg_copy>
 800d950:	4602      	mov	r2, r0
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	675a      	str	r2, [r3, #116]	; 0x74
 800d956:	e16d      	b.n	800dc34 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d958:	2300      	movs	r3, #0
 800d95a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d960:	63bb      	str	r3, [r7, #56]	; 0x38
 800d962:	e157      	b.n	800dc14 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800d964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d966:	68db      	ldr	r3, [r3, #12]
 800d968:	685a      	ldr	r2, [r3, #4]
 800d96a:	4b41      	ldr	r3, [pc, #260]	; (800da70 <tcp_receive+0xd04>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d11d      	bne.n	800d9ae <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d972:	4b3e      	ldr	r3, [pc, #248]	; (800da6c <tcp_receive+0xd00>)
 800d974:	891a      	ldrh	r2, [r3, #8]
 800d976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d978:	891b      	ldrh	r3, [r3, #8]
 800d97a:	429a      	cmp	r2, r3
 800d97c:	f240 814f 	bls.w	800dc1e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d980:	483a      	ldr	r0, [pc, #232]	; (800da6c <tcp_receive+0xd00>)
 800d982:	f7fd fb9f 	bl	800b0c4 <tcp_seg_copy>
 800d986:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	f000 8149 	beq.w	800dc22 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800d990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d992:	2b00      	cmp	r3, #0
 800d994:	d003      	beq.n	800d99e <tcp_receive+0xc32>
                    prev->next = cseg;
 800d996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d998:	697a      	ldr	r2, [r7, #20]
 800d99a:	601a      	str	r2, [r3, #0]
 800d99c:	e002      	b.n	800d9a4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	697a      	ldr	r2, [r7, #20]
 800d9a2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d9a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d9a6:	6978      	ldr	r0, [r7, #20]
 800d9a8:	f7ff f8dc 	bl	800cb64 <tcp_oos_insert_segment>
                }
                break;
 800d9ac:	e139      	b.n	800dc22 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d117      	bne.n	800d9e4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d9b4:	4b2e      	ldr	r3, [pc, #184]	; (800da70 <tcp_receive+0xd04>)
 800d9b6:	681a      	ldr	r2, [r3, #0]
 800d9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ba:	68db      	ldr	r3, [r3, #12]
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	1ad3      	subs	r3, r2, r3
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	da57      	bge.n	800da74 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d9c4:	4829      	ldr	r0, [pc, #164]	; (800da6c <tcp_receive+0xd00>)
 800d9c6:	f7fd fb7d 	bl	800b0c4 <tcp_seg_copy>
 800d9ca:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	f000 8129 	beq.w	800dc26 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	69ba      	ldr	r2, [r7, #24]
 800d9d8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d9da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d9dc:	69b8      	ldr	r0, [r7, #24]
 800d9de:	f7ff f8c1 	bl	800cb64 <tcp_oos_insert_segment>
                  }
                  break;
 800d9e2:	e120      	b.n	800dc26 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d9e4:	4b22      	ldr	r3, [pc, #136]	; (800da70 <tcp_receive+0xd04>)
 800d9e6:	681a      	ldr	r2, [r3, #0]
 800d9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9ea:	68db      	ldr	r3, [r3, #12]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	1ad3      	subs	r3, r2, r3
 800d9f0:	3b01      	subs	r3, #1
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	db3e      	blt.n	800da74 <tcp_receive+0xd08>
 800d9f6:	4b1e      	ldr	r3, [pc, #120]	; (800da70 <tcp_receive+0xd04>)
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	1ad3      	subs	r3, r2, r3
 800da02:	3301      	adds	r3, #1
 800da04:	2b00      	cmp	r3, #0
 800da06:	dc35      	bgt.n	800da74 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800da08:	4818      	ldr	r0, [pc, #96]	; (800da6c <tcp_receive+0xd00>)
 800da0a:	f7fd fb5b 	bl	800b0c4 <tcp_seg_copy>
 800da0e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	2b00      	cmp	r3, #0
 800da14:	f000 8109 	beq.w	800dc2a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800da18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da20:	8912      	ldrh	r2, [r2, #8]
 800da22:	441a      	add	r2, r3
 800da24:	4b12      	ldr	r3, [pc, #72]	; (800da70 <tcp_receive+0xd04>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	1ad3      	subs	r3, r2, r3
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	dd12      	ble.n	800da54 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800da2e:	4b10      	ldr	r3, [pc, #64]	; (800da70 <tcp_receive+0xd04>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	b29a      	uxth	r2, r3
 800da34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	1ad3      	subs	r3, r2, r3
 800da3e:	b29a      	uxth	r2, r3
 800da40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da42:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800da44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da46:	685a      	ldr	r2, [r3, #4]
 800da48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da4a:	891b      	ldrh	r3, [r3, #8]
 800da4c:	4619      	mov	r1, r3
 800da4e:	4610      	mov	r0, r2
 800da50:	f7fb ff1a 	bl	8009888 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800da54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da56:	69fa      	ldr	r2, [r7, #28]
 800da58:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800da5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da5c:	69f8      	ldr	r0, [r7, #28]
 800da5e:	f7ff f881 	bl	800cb64 <tcp_oos_insert_segment>
                  }
                  break;
 800da62:	e0e2      	b.n	800dc2a <tcp_receive+0xebe>
 800da64:	2000f09c 	.word	0x2000f09c
 800da68:	2000f099 	.word	0x2000f099
 800da6c:	2000f06c 	.word	0x2000f06c
 800da70:	2000f08c 	.word	0x2000f08c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800da74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da76:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800da78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	f040 80c6 	bne.w	800dc0e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800da82:	4b80      	ldr	r3, [pc, #512]	; (800dc84 <tcp_receive+0xf18>)
 800da84:	681a      	ldr	r2, [r3, #0]
 800da86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da88:	68db      	ldr	r3, [r3, #12]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800da8e:	2b00      	cmp	r3, #0
 800da90:	f340 80bd 	ble.w	800dc0e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800da94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	899b      	ldrh	r3, [r3, #12]
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7fa fc87 	bl	80083b0 <lwip_htons>
 800daa2:	4603      	mov	r3, r0
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	f003 0301 	and.w	r3, r3, #1
 800daaa:	2b00      	cmp	r3, #0
 800daac:	f040 80bf 	bne.w	800dc2e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800dab0:	4875      	ldr	r0, [pc, #468]	; (800dc88 <tcp_receive+0xf1c>)
 800dab2:	f7fd fb07 	bl	800b0c4 <tcp_seg_copy>
 800dab6:	4602      	mov	r2, r0
 800dab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daba:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800dabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	f000 80b6 	beq.w	800dc32 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800dac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac8:	68db      	ldr	r3, [r3, #12]
 800daca:	685b      	ldr	r3, [r3, #4]
 800dacc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dace:	8912      	ldrh	r2, [r2, #8]
 800dad0:	441a      	add	r2, r3
 800dad2:	4b6c      	ldr	r3, [pc, #432]	; (800dc84 <tcp_receive+0xf18>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	1ad3      	subs	r3, r2, r3
 800dad8:	2b00      	cmp	r3, #0
 800dada:	dd12      	ble.n	800db02 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800dadc:	4b69      	ldr	r3, [pc, #420]	; (800dc84 <tcp_receive+0xf18>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	b29a      	uxth	r2, r3
 800dae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae4:	68db      	ldr	r3, [r3, #12]
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	b29b      	uxth	r3, r3
 800daea:	1ad3      	subs	r3, r2, r3
 800daec:	b29a      	uxth	r2, r3
 800daee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800daf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf4:	685a      	ldr	r2, [r3, #4]
 800daf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf8:	891b      	ldrh	r3, [r3, #8]
 800dafa:	4619      	mov	r1, r3
 800dafc:	4610      	mov	r0, r2
 800dafe:	f7fb fec3 	bl	8009888 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800db02:	4b62      	ldr	r3, [pc, #392]	; (800dc8c <tcp_receive+0xf20>)
 800db04:	881b      	ldrh	r3, [r3, #0]
 800db06:	461a      	mov	r2, r3
 800db08:	4b5e      	ldr	r3, [pc, #376]	; (800dc84 <tcp_receive+0xf18>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	441a      	add	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db12:	6879      	ldr	r1, [r7, #4]
 800db14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800db16:	440b      	add	r3, r1
 800db18:	1ad3      	subs	r3, r2, r3
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	f340 8089 	ble.w	800dc32 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800db20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	68db      	ldr	r3, [r3, #12]
 800db26:	899b      	ldrh	r3, [r3, #12]
 800db28:	b29b      	uxth	r3, r3
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7fa fc40 	bl	80083b0 <lwip_htons>
 800db30:	4603      	mov	r3, r0
 800db32:	b2db      	uxtb	r3, r3
 800db34:	f003 0301 	and.w	r3, r3, #1
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d022      	beq.n	800db82 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800db3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	68db      	ldr	r3, [r3, #12]
 800db42:	899b      	ldrh	r3, [r3, #12]
 800db44:	b29b      	uxth	r3, r3
 800db46:	b21b      	sxth	r3, r3
 800db48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800db4c:	b21c      	sxth	r4, r3
 800db4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	68db      	ldr	r3, [r3, #12]
 800db54:	899b      	ldrh	r3, [r3, #12]
 800db56:	b29b      	uxth	r3, r3
 800db58:	4618      	mov	r0, r3
 800db5a:	f7fa fc29 	bl	80083b0 <lwip_htons>
 800db5e:	4603      	mov	r3, r0
 800db60:	b2db      	uxtb	r3, r3
 800db62:	b29b      	uxth	r3, r3
 800db64:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800db68:	b29b      	uxth	r3, r3
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fa fc20 	bl	80083b0 <lwip_htons>
 800db70:	4603      	mov	r3, r0
 800db72:	b21b      	sxth	r3, r3
 800db74:	4323      	orrs	r3, r4
 800db76:	b21a      	sxth	r2, r3
 800db78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	68db      	ldr	r3, [r3, #12]
 800db7e:	b292      	uxth	r2, r2
 800db80:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db86:	b29a      	uxth	r2, r3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db8c:	4413      	add	r3, r2
 800db8e:	b299      	uxth	r1, r3
 800db90:	4b3c      	ldr	r3, [pc, #240]	; (800dc84 <tcp_receive+0xf18>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	b29a      	uxth	r2, r3
 800db96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	1a8a      	subs	r2, r1, r2
 800db9c:	b292      	uxth	r2, r2
 800db9e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800dba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	685a      	ldr	r2, [r3, #4]
 800dba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	891b      	ldrh	r3, [r3, #8]
 800dbac:	4619      	mov	r1, r3
 800dbae:	4610      	mov	r0, r2
 800dbb0:	f7fb fe6a 	bl	8009888 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800dbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	891c      	ldrh	r4, [r3, #8]
 800dbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	68db      	ldr	r3, [r3, #12]
 800dbc0:	899b      	ldrh	r3, [r3, #12]
 800dbc2:	b29b      	uxth	r3, r3
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7fa fbf3 	bl	80083b0 <lwip_htons>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	b2db      	uxtb	r3, r3
 800dbce:	f003 0303 	and.w	r3, r3, #3
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d001      	beq.n	800dbda <tcp_receive+0xe6e>
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	e000      	b.n	800dbdc <tcp_receive+0xe70>
 800dbda:	2300      	movs	r3, #0
 800dbdc:	4423      	add	r3, r4
 800dbde:	b29a      	uxth	r2, r3
 800dbe0:	4b2a      	ldr	r3, [pc, #168]	; (800dc8c <tcp_receive+0xf20>)
 800dbe2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800dbe4:	4b29      	ldr	r3, [pc, #164]	; (800dc8c <tcp_receive+0xf20>)
 800dbe6:	881b      	ldrh	r3, [r3, #0]
 800dbe8:	461a      	mov	r2, r3
 800dbea:	4b26      	ldr	r3, [pc, #152]	; (800dc84 <tcp_receive+0xf18>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	441a      	add	r2, r3
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf4:	6879      	ldr	r1, [r7, #4]
 800dbf6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dbf8:	440b      	add	r3, r1
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d019      	beq.n	800dc32 <tcp_receive+0xec6>
 800dbfe:	4b24      	ldr	r3, [pc, #144]	; (800dc90 <tcp_receive+0xf24>)
 800dc00:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800dc04:	4923      	ldr	r1, [pc, #140]	; (800dc94 <tcp_receive+0xf28>)
 800dc06:	4824      	ldr	r0, [pc, #144]	; (800dc98 <tcp_receive+0xf2c>)
 800dc08:	f004 fba6 	bl	8012358 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800dc0c:	e011      	b.n	800dc32 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800dc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	f47f aea4 	bne.w	800d964 <tcp_receive+0xbf8>
 800dc1c:	e00a      	b.n	800dc34 <tcp_receive+0xec8>
                break;
 800dc1e:	bf00      	nop
 800dc20:	e008      	b.n	800dc34 <tcp_receive+0xec8>
                break;
 800dc22:	bf00      	nop
 800dc24:	e006      	b.n	800dc34 <tcp_receive+0xec8>
                  break;
 800dc26:	bf00      	nop
 800dc28:	e004      	b.n	800dc34 <tcp_receive+0xec8>
                  break;
 800dc2a:	bf00      	nop
 800dc2c:	e002      	b.n	800dc34 <tcp_receive+0xec8>
                  break;
 800dc2e:	bf00      	nop
 800dc30:	e000      	b.n	800dc34 <tcp_receive+0xec8>
                break;
 800dc32:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f001 fa33 	bl	800f0a0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800dc3a:	e003      	b.n	800dc44 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f001 fa2f 	bl	800f0a0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dc42:	e01a      	b.n	800dc7a <tcp_receive+0xf0e>
 800dc44:	e019      	b.n	800dc7a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800dc46:	4b0f      	ldr	r3, [pc, #60]	; (800dc84 <tcp_receive+0xf18>)
 800dc48:	681a      	ldr	r2, [r3, #0]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4e:	1ad3      	subs	r3, r2, r3
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	db0a      	blt.n	800dc6a <tcp_receive+0xefe>
 800dc54:	4b0b      	ldr	r3, [pc, #44]	; (800dc84 <tcp_receive+0xf18>)
 800dc56:	681a      	ldr	r2, [r3, #0]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc5c:	6879      	ldr	r1, [r7, #4]
 800dc5e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dc60:	440b      	add	r3, r1
 800dc62:	1ad3      	subs	r3, r2, r3
 800dc64:	3301      	adds	r3, #1
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	dd07      	ble.n	800dc7a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	8b5b      	ldrh	r3, [r3, #26]
 800dc6e:	f043 0302 	orr.w	r3, r3, #2
 800dc72:	b29a      	uxth	r2, r3
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800dc78:	e7ff      	b.n	800dc7a <tcp_receive+0xf0e>
 800dc7a:	bf00      	nop
 800dc7c:	3750      	adds	r7, #80	; 0x50
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bdb0      	pop	{r4, r5, r7, pc}
 800dc82:	bf00      	nop
 800dc84:	2000f08c 	.word	0x2000f08c
 800dc88:	2000f06c 	.word	0x2000f06c
 800dc8c:	2000f096 	.word	0x2000f096
 800dc90:	080145a4 	.word	0x080145a4
 800dc94:	0801494c 	.word	0x0801494c
 800dc98:	080145f0 	.word	0x080145f0

0800dc9c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800dca2:	4b15      	ldr	r3, [pc, #84]	; (800dcf8 <tcp_get_next_optbyte+0x5c>)
 800dca4:	881b      	ldrh	r3, [r3, #0]
 800dca6:	1c5a      	adds	r2, r3, #1
 800dca8:	b291      	uxth	r1, r2
 800dcaa:	4a13      	ldr	r2, [pc, #76]	; (800dcf8 <tcp_get_next_optbyte+0x5c>)
 800dcac:	8011      	strh	r1, [r2, #0]
 800dcae:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800dcb0:	4b12      	ldr	r3, [pc, #72]	; (800dcfc <tcp_get_next_optbyte+0x60>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d004      	beq.n	800dcc2 <tcp_get_next_optbyte+0x26>
 800dcb8:	4b11      	ldr	r3, [pc, #68]	; (800dd00 <tcp_get_next_optbyte+0x64>)
 800dcba:	881b      	ldrh	r3, [r3, #0]
 800dcbc:	88fa      	ldrh	r2, [r7, #6]
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d208      	bcs.n	800dcd4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800dcc2:	4b10      	ldr	r3, [pc, #64]	; (800dd04 <tcp_get_next_optbyte+0x68>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	3314      	adds	r3, #20
 800dcc8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800dcca:	88fb      	ldrh	r3, [r7, #6]
 800dccc:	683a      	ldr	r2, [r7, #0]
 800dcce:	4413      	add	r3, r2
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	e00b      	b.n	800dcec <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800dcd4:	88fb      	ldrh	r3, [r7, #6]
 800dcd6:	b2da      	uxtb	r2, r3
 800dcd8:	4b09      	ldr	r3, [pc, #36]	; (800dd00 <tcp_get_next_optbyte+0x64>)
 800dcda:	881b      	ldrh	r3, [r3, #0]
 800dcdc:	b2db      	uxtb	r3, r3
 800dcde:	1ad3      	subs	r3, r2, r3
 800dce0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800dce2:	4b06      	ldr	r3, [pc, #24]	; (800dcfc <tcp_get_next_optbyte+0x60>)
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	797b      	ldrb	r3, [r7, #5]
 800dce8:	4413      	add	r3, r2
 800dcea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	370c      	adds	r7, #12
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr
 800dcf8:	2000f088 	.word	0x2000f088
 800dcfc:	2000f084 	.word	0x2000f084
 800dd00:	2000f082 	.word	0x2000f082
 800dd04:	2000f07c 	.word	0x2000f07c

0800dd08 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b084      	sub	sp, #16
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d106      	bne.n	800dd24 <tcp_parseopt+0x1c>
 800dd16:	4b32      	ldr	r3, [pc, #200]	; (800dde0 <tcp_parseopt+0xd8>)
 800dd18:	f240 727d 	movw	r2, #1917	; 0x77d
 800dd1c:	4931      	ldr	r1, [pc, #196]	; (800dde4 <tcp_parseopt+0xdc>)
 800dd1e:	4832      	ldr	r0, [pc, #200]	; (800dde8 <tcp_parseopt+0xe0>)
 800dd20:	f004 fb1a 	bl	8012358 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800dd24:	4b31      	ldr	r3, [pc, #196]	; (800ddec <tcp_parseopt+0xe4>)
 800dd26:	881b      	ldrh	r3, [r3, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d055      	beq.n	800ddd8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dd2c:	4b30      	ldr	r3, [pc, #192]	; (800ddf0 <tcp_parseopt+0xe8>)
 800dd2e:	2200      	movs	r2, #0
 800dd30:	801a      	strh	r2, [r3, #0]
 800dd32:	e045      	b.n	800ddc0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800dd34:	f7ff ffb2 	bl	800dc9c <tcp_get_next_optbyte>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800dd3c:	7bfb      	ldrb	r3, [r7, #15]
 800dd3e:	2b02      	cmp	r3, #2
 800dd40:	d006      	beq.n	800dd50 <tcp_parseopt+0x48>
 800dd42:	2b02      	cmp	r3, #2
 800dd44:	dc2b      	bgt.n	800dd9e <tcp_parseopt+0x96>
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d041      	beq.n	800ddce <tcp_parseopt+0xc6>
 800dd4a:	2b01      	cmp	r3, #1
 800dd4c:	d127      	bne.n	800dd9e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800dd4e:	e037      	b.n	800ddc0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800dd50:	f7ff ffa4 	bl	800dc9c <tcp_get_next_optbyte>
 800dd54:	4603      	mov	r3, r0
 800dd56:	2b04      	cmp	r3, #4
 800dd58:	d13b      	bne.n	800ddd2 <tcp_parseopt+0xca>
 800dd5a:	4b25      	ldr	r3, [pc, #148]	; (800ddf0 <tcp_parseopt+0xe8>)
 800dd5c:	881b      	ldrh	r3, [r3, #0]
 800dd5e:	3301      	adds	r3, #1
 800dd60:	4a22      	ldr	r2, [pc, #136]	; (800ddec <tcp_parseopt+0xe4>)
 800dd62:	8812      	ldrh	r2, [r2, #0]
 800dd64:	4293      	cmp	r3, r2
 800dd66:	da34      	bge.n	800ddd2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800dd68:	f7ff ff98 	bl	800dc9c <tcp_get_next_optbyte>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	021b      	lsls	r3, r3, #8
 800dd72:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800dd74:	f7ff ff92 	bl	800dc9c <tcp_get_next_optbyte>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	89bb      	ldrh	r3, [r7, #12]
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800dd82:	89bb      	ldrh	r3, [r7, #12]
 800dd84:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800dd88:	d804      	bhi.n	800dd94 <tcp_parseopt+0x8c>
 800dd8a:	89bb      	ldrh	r3, [r7, #12]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d001      	beq.n	800dd94 <tcp_parseopt+0x8c>
 800dd90:	89ba      	ldrh	r2, [r7, #12]
 800dd92:	e001      	b.n	800dd98 <tcp_parseopt+0x90>
 800dd94:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800dd9c:	e010      	b.n	800ddc0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800dd9e:	f7ff ff7d 	bl	800dc9c <tcp_get_next_optbyte>
 800dda2:	4603      	mov	r3, r0
 800dda4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800dda6:	7afb      	ldrb	r3, [r7, #11]
 800dda8:	2b01      	cmp	r3, #1
 800ddaa:	d914      	bls.n	800ddd6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ddac:	7afb      	ldrb	r3, [r7, #11]
 800ddae:	b29a      	uxth	r2, r3
 800ddb0:	4b0f      	ldr	r3, [pc, #60]	; (800ddf0 <tcp_parseopt+0xe8>)
 800ddb2:	881b      	ldrh	r3, [r3, #0]
 800ddb4:	4413      	add	r3, r2
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	3b02      	subs	r3, #2
 800ddba:	b29a      	uxth	r2, r3
 800ddbc:	4b0c      	ldr	r3, [pc, #48]	; (800ddf0 <tcp_parseopt+0xe8>)
 800ddbe:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ddc0:	4b0b      	ldr	r3, [pc, #44]	; (800ddf0 <tcp_parseopt+0xe8>)
 800ddc2:	881a      	ldrh	r2, [r3, #0]
 800ddc4:	4b09      	ldr	r3, [pc, #36]	; (800ddec <tcp_parseopt+0xe4>)
 800ddc6:	881b      	ldrh	r3, [r3, #0]
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d3b3      	bcc.n	800dd34 <tcp_parseopt+0x2c>
 800ddcc:	e004      	b.n	800ddd8 <tcp_parseopt+0xd0>
          return;
 800ddce:	bf00      	nop
 800ddd0:	e002      	b.n	800ddd8 <tcp_parseopt+0xd0>
            return;
 800ddd2:	bf00      	nop
 800ddd4:	e000      	b.n	800ddd8 <tcp_parseopt+0xd0>
            return;
 800ddd6:	bf00      	nop
      }
    }
  }
}
 800ddd8:	3710      	adds	r7, #16
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	bf00      	nop
 800dde0:	080145a4 	.word	0x080145a4
 800dde4:	08014a08 	.word	0x08014a08
 800dde8:	080145f0 	.word	0x080145f0
 800ddec:	2000f080 	.word	0x2000f080
 800ddf0:	2000f088 	.word	0x2000f088

0800ddf4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ddf8:	4b05      	ldr	r3, [pc, #20]	; (800de10 <tcp_trigger_input_pcb_close+0x1c>)
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	f043 0310 	orr.w	r3, r3, #16
 800de00:	b2da      	uxtb	r2, r3
 800de02:	4b03      	ldr	r3, [pc, #12]	; (800de10 <tcp_trigger_input_pcb_close+0x1c>)
 800de04:	701a      	strb	r2, [r3, #0]
}
 800de06:	bf00      	nop
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr
 800de10:	2000f099 	.word	0x2000f099

0800de14 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b084      	sub	sp, #16
 800de18:	af00      	add	r7, sp, #0
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	60b9      	str	r1, [r7, #8]
 800de1e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d00a      	beq.n	800de3c <tcp_route+0x28>
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	7a1b      	ldrb	r3, [r3, #8]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d006      	beq.n	800de3c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	7a1b      	ldrb	r3, [r3, #8]
 800de32:	4618      	mov	r0, r3
 800de34:	f7fb fb20 	bl	8009478 <netif_get_by_index>
 800de38:	4603      	mov	r3, r0
 800de3a:	e003      	b.n	800de44 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f002 fead 	bl	8010b9c <ip4_route>
 800de42:	4603      	mov	r3, r0
  }
}
 800de44:	4618      	mov	r0, r3
 800de46:	3710      	adds	r7, #16
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800de4c:	b590      	push	{r4, r7, lr}
 800de4e:	b087      	sub	sp, #28
 800de50:	af00      	add	r7, sp, #0
 800de52:	60f8      	str	r0, [r7, #12]
 800de54:	60b9      	str	r1, [r7, #8]
 800de56:	603b      	str	r3, [r7, #0]
 800de58:	4613      	mov	r3, r2
 800de5a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d105      	bne.n	800de6e <tcp_create_segment+0x22>
 800de62:	4b44      	ldr	r3, [pc, #272]	; (800df74 <tcp_create_segment+0x128>)
 800de64:	22a3      	movs	r2, #163	; 0xa3
 800de66:	4944      	ldr	r1, [pc, #272]	; (800df78 <tcp_create_segment+0x12c>)
 800de68:	4844      	ldr	r0, [pc, #272]	; (800df7c <tcp_create_segment+0x130>)
 800de6a:	f004 fa75 	bl	8012358 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d105      	bne.n	800de80 <tcp_create_segment+0x34>
 800de74:	4b3f      	ldr	r3, [pc, #252]	; (800df74 <tcp_create_segment+0x128>)
 800de76:	22a4      	movs	r2, #164	; 0xa4
 800de78:	4941      	ldr	r1, [pc, #260]	; (800df80 <tcp_create_segment+0x134>)
 800de7a:	4840      	ldr	r0, [pc, #256]	; (800df7c <tcp_create_segment+0x130>)
 800de7c:	f004 fa6c 	bl	8012358 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800de80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	b2db      	uxtb	r3, r3
 800de88:	f003 0304 	and.w	r3, r3, #4
 800de8c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800de8e:	2003      	movs	r0, #3
 800de90:	f7fa ff66 	bl	8008d60 <memp_malloc>
 800de94:	6138      	str	r0, [r7, #16]
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d104      	bne.n	800dea6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800de9c:	68b8      	ldr	r0, [r7, #8]
 800de9e:	f7fb fe79 	bl	8009b94 <pbuf_free>
    return NULL;
 800dea2:	2300      	movs	r3, #0
 800dea4:	e061      	b.n	800df6a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800deac:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	2200      	movs	r2, #0
 800deb2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	68ba      	ldr	r2, [r7, #8]
 800deb8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	891a      	ldrh	r2, [r3, #8]
 800debe:	7dfb      	ldrb	r3, [r7, #23]
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d205      	bcs.n	800ded2 <tcp_create_segment+0x86>
 800dec6:	4b2b      	ldr	r3, [pc, #172]	; (800df74 <tcp_create_segment+0x128>)
 800dec8:	22b0      	movs	r2, #176	; 0xb0
 800deca:	492e      	ldr	r1, [pc, #184]	; (800df84 <tcp_create_segment+0x138>)
 800decc:	482b      	ldr	r0, [pc, #172]	; (800df7c <tcp_create_segment+0x130>)
 800dece:	f004 fa43 	bl	8012358 <iprintf>
  seg->len = p->tot_len - optlen;
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	891a      	ldrh	r2, [r3, #8]
 800ded6:	7dfb      	ldrb	r3, [r7, #23]
 800ded8:	b29b      	uxth	r3, r3
 800deda:	1ad3      	subs	r3, r2, r3
 800dedc:	b29a      	uxth	r2, r3
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800dee2:	2114      	movs	r1, #20
 800dee4:	68b8      	ldr	r0, [r7, #8]
 800dee6:	f7fb fdbf 	bl	8009a68 <pbuf_add_header>
 800deea:	4603      	mov	r3, r0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d004      	beq.n	800defa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800def0:	6938      	ldr	r0, [r7, #16]
 800def2:	f7fd f8ce 	bl	800b092 <tcp_seg_free>
    return NULL;
 800def6:	2300      	movs	r3, #0
 800def8:	e037      	b.n	800df6a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	685a      	ldr	r2, [r3, #4]
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	8ada      	ldrh	r2, [r3, #22]
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	68dc      	ldr	r4, [r3, #12]
 800df0c:	4610      	mov	r0, r2
 800df0e:	f7fa fa4f 	bl	80083b0 <lwip_htons>
 800df12:	4603      	mov	r3, r0
 800df14:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	8b1a      	ldrh	r2, [r3, #24]
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	68dc      	ldr	r4, [r3, #12]
 800df1e:	4610      	mov	r0, r2
 800df20:	f7fa fa46 	bl	80083b0 <lwip_htons>
 800df24:	4603      	mov	r3, r0
 800df26:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	68dc      	ldr	r4, [r3, #12]
 800df2c:	6838      	ldr	r0, [r7, #0]
 800df2e:	f7fa fa54 	bl	80083da <lwip_htonl>
 800df32:	4603      	mov	r3, r0
 800df34:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800df36:	7dfb      	ldrb	r3, [r7, #23]
 800df38:	089b      	lsrs	r3, r3, #2
 800df3a:	b2db      	uxtb	r3, r3
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	3305      	adds	r3, #5
 800df40:	b29b      	uxth	r3, r3
 800df42:	031b      	lsls	r3, r3, #12
 800df44:	b29a      	uxth	r2, r3
 800df46:	79fb      	ldrb	r3, [r7, #7]
 800df48:	b29b      	uxth	r3, r3
 800df4a:	4313      	orrs	r3, r2
 800df4c:	b29a      	uxth	r2, r3
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	68dc      	ldr	r4, [r3, #12]
 800df52:	4610      	mov	r0, r2
 800df54:	f7fa fa2c 	bl	80083b0 <lwip_htons>
 800df58:	4603      	mov	r3, r0
 800df5a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	68db      	ldr	r3, [r3, #12]
 800df60:	2200      	movs	r2, #0
 800df62:	749a      	strb	r2, [r3, #18]
 800df64:	2200      	movs	r2, #0
 800df66:	74da      	strb	r2, [r3, #19]
  return seg;
 800df68:	693b      	ldr	r3, [r7, #16]
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	371c      	adds	r7, #28
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd90      	pop	{r4, r7, pc}
 800df72:	bf00      	nop
 800df74:	08014a24 	.word	0x08014a24
 800df78:	08014a58 	.word	0x08014a58
 800df7c:	08014a78 	.word	0x08014a78
 800df80:	08014aa0 	.word	0x08014aa0
 800df84:	08014ac4 	.word	0x08014ac4

0800df88 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800df88:	b590      	push	{r4, r7, lr}
 800df8a:	b08b      	sub	sp, #44	; 0x2c
 800df8c:	af02      	add	r7, sp, #8
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	460b      	mov	r3, r1
 800df92:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800df94:	2300      	movs	r3, #0
 800df96:	61fb      	str	r3, [r7, #28]
 800df98:	2300      	movs	r3, #0
 800df9a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800df9c:	2300      	movs	r3, #0
 800df9e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d106      	bne.n	800dfb4 <tcp_split_unsent_seg+0x2c>
 800dfa6:	4b95      	ldr	r3, [pc, #596]	; (800e1fc <tcp_split_unsent_seg+0x274>)
 800dfa8:	f240 324b 	movw	r2, #843	; 0x34b
 800dfac:	4994      	ldr	r1, [pc, #592]	; (800e200 <tcp_split_unsent_seg+0x278>)
 800dfae:	4895      	ldr	r0, [pc, #596]	; (800e204 <tcp_split_unsent_seg+0x27c>)
 800dfb0:	f004 f9d2 	bl	8012358 <iprintf>

  useg = pcb->unsent;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfb8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d102      	bne.n	800dfc6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800dfc0:	f04f 33ff 	mov.w	r3, #4294967295
 800dfc4:	e116      	b.n	800e1f4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800dfc6:	887b      	ldrh	r3, [r7, #2]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d109      	bne.n	800dfe0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800dfcc:	4b8b      	ldr	r3, [pc, #556]	; (800e1fc <tcp_split_unsent_seg+0x274>)
 800dfce:	f240 3253 	movw	r2, #851	; 0x353
 800dfd2:	498d      	ldr	r1, [pc, #564]	; (800e208 <tcp_split_unsent_seg+0x280>)
 800dfd4:	488b      	ldr	r0, [pc, #556]	; (800e204 <tcp_split_unsent_seg+0x27c>)
 800dfd6:	f004 f9bf 	bl	8012358 <iprintf>
    return ERR_VAL;
 800dfda:	f06f 0305 	mvn.w	r3, #5
 800dfde:	e109      	b.n	800e1f4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	891b      	ldrh	r3, [r3, #8]
 800dfe4:	887a      	ldrh	r2, [r7, #2]
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d301      	bcc.n	800dfee <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800dfea:	2300      	movs	r3, #0
 800dfec:	e102      	b.n	800e1f4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dff2:	887a      	ldrh	r2, [r7, #2]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d906      	bls.n	800e006 <tcp_split_unsent_seg+0x7e>
 800dff8:	4b80      	ldr	r3, [pc, #512]	; (800e1fc <tcp_split_unsent_seg+0x274>)
 800dffa:	f240 325b 	movw	r2, #859	; 0x35b
 800dffe:	4983      	ldr	r1, [pc, #524]	; (800e20c <tcp_split_unsent_seg+0x284>)
 800e000:	4880      	ldr	r0, [pc, #512]	; (800e204 <tcp_split_unsent_seg+0x27c>)
 800e002:	f004 f9a9 	bl	8012358 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	891b      	ldrh	r3, [r3, #8]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d106      	bne.n	800e01c <tcp_split_unsent_seg+0x94>
 800e00e:	4b7b      	ldr	r3, [pc, #492]	; (800e1fc <tcp_split_unsent_seg+0x274>)
 800e010:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e014:	497e      	ldr	r1, [pc, #504]	; (800e210 <tcp_split_unsent_seg+0x288>)
 800e016:	487b      	ldr	r0, [pc, #492]	; (800e204 <tcp_split_unsent_seg+0x27c>)
 800e018:	f004 f99e 	bl	8012358 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	7a9b      	ldrb	r3, [r3, #10]
 800e020:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e022:	7bfb      	ldrb	r3, [r7, #15]
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	b2db      	uxtb	r3, r3
 800e028:	f003 0304 	and.w	r3, r3, #4
 800e02c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	891a      	ldrh	r2, [r3, #8]
 800e032:	887b      	ldrh	r3, [r7, #2]
 800e034:	1ad3      	subs	r3, r2, r3
 800e036:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e038:	7bbb      	ldrb	r3, [r7, #14]
 800e03a:	b29a      	uxth	r2, r3
 800e03c:	89bb      	ldrh	r3, [r7, #12]
 800e03e:	4413      	add	r3, r2
 800e040:	b29b      	uxth	r3, r3
 800e042:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e046:	4619      	mov	r1, r3
 800e048:	2036      	movs	r0, #54	; 0x36
 800e04a:	f7fb fabf 	bl	80095cc <pbuf_alloc>
 800e04e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	2b00      	cmp	r3, #0
 800e054:	f000 80b7 	beq.w	800e1c6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	891a      	ldrh	r2, [r3, #8]
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	891b      	ldrh	r3, [r3, #8]
 800e062:	1ad3      	subs	r3, r2, r3
 800e064:	b29a      	uxth	r2, r3
 800e066:	887b      	ldrh	r3, [r7, #2]
 800e068:	4413      	add	r3, r2
 800e06a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	6858      	ldr	r0, [r3, #4]
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	685a      	ldr	r2, [r3, #4]
 800e074:	7bbb      	ldrb	r3, [r7, #14]
 800e076:	18d1      	adds	r1, r2, r3
 800e078:	897b      	ldrh	r3, [r7, #10]
 800e07a:	89ba      	ldrh	r2, [r7, #12]
 800e07c:	f7fb ff80 	bl	8009f80 <pbuf_copy_partial>
 800e080:	4603      	mov	r3, r0
 800e082:	461a      	mov	r2, r3
 800e084:	89bb      	ldrh	r3, [r7, #12]
 800e086:	4293      	cmp	r3, r2
 800e088:	f040 809f 	bne.w	800e1ca <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	899b      	ldrh	r3, [r3, #12]
 800e092:	b29b      	uxth	r3, r3
 800e094:	4618      	mov	r0, r3
 800e096:	f7fa f98b 	bl	80083b0 <lwip_htons>
 800e09a:	4603      	mov	r3, r0
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e0a2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e0a8:	7efb      	ldrb	r3, [r7, #27]
 800e0aa:	f003 0308 	and.w	r3, r3, #8
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d007      	beq.n	800e0c2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e0b2:	7efb      	ldrb	r3, [r7, #27]
 800e0b4:	f023 0308 	bic.w	r3, r3, #8
 800e0b8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e0ba:	7ebb      	ldrb	r3, [r7, #26]
 800e0bc:	f043 0308 	orr.w	r3, r3, #8
 800e0c0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e0c2:	7efb      	ldrb	r3, [r7, #27]
 800e0c4:	f003 0301 	and.w	r3, r3, #1
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d007      	beq.n	800e0dc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e0cc:	7efb      	ldrb	r3, [r7, #27]
 800e0ce:	f023 0301 	bic.w	r3, r3, #1
 800e0d2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e0d4:	7ebb      	ldrb	r3, [r7, #26]
 800e0d6:	f043 0301 	orr.w	r3, r3, #1
 800e0da:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7fa f979 	bl	80083da <lwip_htonl>
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	887b      	ldrh	r3, [r7, #2]
 800e0ec:	18d1      	adds	r1, r2, r3
 800e0ee:	7eba      	ldrb	r2, [r7, #26]
 800e0f0:	7bfb      	ldrb	r3, [r7, #15]
 800e0f2:	9300      	str	r3, [sp, #0]
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	6939      	ldr	r1, [r7, #16]
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f7ff fea7 	bl	800de4c <tcp_create_segment>
 800e0fe:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e100:	69fb      	ldr	r3, [r7, #28]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d063      	beq.n	800e1ce <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	685b      	ldr	r3, [r3, #4]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fb fdd0 	bl	8009cb0 <pbuf_clen>
 800e110:	4603      	mov	r3, r0
 800e112:	461a      	mov	r2, r3
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e11a:	1a9b      	subs	r3, r3, r2
 800e11c:	b29a      	uxth	r2, r3
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	6858      	ldr	r0, [r3, #4]
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	891a      	ldrh	r2, [r3, #8]
 800e12e:	89bb      	ldrh	r3, [r7, #12]
 800e130:	1ad3      	subs	r3, r2, r3
 800e132:	b29b      	uxth	r3, r3
 800e134:	4619      	mov	r1, r3
 800e136:	f7fb fba7 	bl	8009888 <pbuf_realloc>
  useg->len -= remainder;
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	891a      	ldrh	r2, [r3, #8]
 800e13e:	89bb      	ldrh	r3, [r7, #12]
 800e140:	1ad3      	subs	r3, r2, r3
 800e142:	b29a      	uxth	r2, r3
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	899b      	ldrh	r3, [r3, #12]
 800e14e:	b29c      	uxth	r4, r3
 800e150:	7efb      	ldrb	r3, [r7, #27]
 800e152:	b29b      	uxth	r3, r3
 800e154:	4618      	mov	r0, r3
 800e156:	f7fa f92b 	bl	80083b0 <lwip_htons>
 800e15a:	4603      	mov	r3, r0
 800e15c:	461a      	mov	r2, r3
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	4322      	orrs	r2, r4
 800e164:	b292      	uxth	r2, r2
 800e166:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	4618      	mov	r0, r3
 800e16e:	f7fb fd9f 	bl	8009cb0 <pbuf_clen>
 800e172:	4603      	mov	r3, r0
 800e174:	461a      	mov	r2, r3
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e17c:	4413      	add	r3, r2
 800e17e:	b29a      	uxth	r2, r3
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e186:	69fb      	ldr	r3, [r7, #28]
 800e188:	685b      	ldr	r3, [r3, #4]
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7fb fd90 	bl	8009cb0 <pbuf_clen>
 800e190:	4603      	mov	r3, r0
 800e192:	461a      	mov	r2, r3
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e19a:	4413      	add	r3, r2
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	681a      	ldr	r2, [r3, #0]
 800e1a8:	69fb      	ldr	r3, [r7, #28]
 800e1aa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	69fa      	ldr	r2, [r7, #28]
 800e1b0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e1b2:	69fb      	ldr	r3, [r7, #28]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d103      	bne.n	800e1c2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	e016      	b.n	800e1f4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e1c6:	bf00      	nop
 800e1c8:	e002      	b.n	800e1d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e1ca:	bf00      	nop
 800e1cc:	e000      	b.n	800e1d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e1ce:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d006      	beq.n	800e1e4 <tcp_split_unsent_seg+0x25c>
 800e1d6:	4b09      	ldr	r3, [pc, #36]	; (800e1fc <tcp_split_unsent_seg+0x274>)
 800e1d8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800e1dc:	490d      	ldr	r1, [pc, #52]	; (800e214 <tcp_split_unsent_seg+0x28c>)
 800e1de:	4809      	ldr	r0, [pc, #36]	; (800e204 <tcp_split_unsent_seg+0x27c>)
 800e1e0:	f004 f8ba 	bl	8012358 <iprintf>
  if (p != NULL) {
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d002      	beq.n	800e1f0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e1ea:	6938      	ldr	r0, [r7, #16]
 800e1ec:	f7fb fcd2 	bl	8009b94 <pbuf_free>
  }

  return ERR_MEM;
 800e1f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	3724      	adds	r7, #36	; 0x24
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd90      	pop	{r4, r7, pc}
 800e1fc:	08014a24 	.word	0x08014a24
 800e200:	08014db8 	.word	0x08014db8
 800e204:	08014a78 	.word	0x08014a78
 800e208:	08014ddc 	.word	0x08014ddc
 800e20c:	08014e00 	.word	0x08014e00
 800e210:	08014e10 	.word	0x08014e10
 800e214:	08014e20 	.word	0x08014e20

0800e218 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e218:	b590      	push	{r4, r7, lr}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d106      	bne.n	800e234 <tcp_send_fin+0x1c>
 800e226:	4b21      	ldr	r3, [pc, #132]	; (800e2ac <tcp_send_fin+0x94>)
 800e228:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800e22c:	4920      	ldr	r1, [pc, #128]	; (800e2b0 <tcp_send_fin+0x98>)
 800e22e:	4821      	ldr	r0, [pc, #132]	; (800e2b4 <tcp_send_fin+0x9c>)
 800e230:	f004 f892 	bl	8012358 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d02e      	beq.n	800e29a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e240:	60fb      	str	r3, [r7, #12]
 800e242:	e002      	b.n	800e24a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d1f8      	bne.n	800e244 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	68db      	ldr	r3, [r3, #12]
 800e256:	899b      	ldrh	r3, [r3, #12]
 800e258:	b29b      	uxth	r3, r3
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fa f8a8 	bl	80083b0 <lwip_htons>
 800e260:	4603      	mov	r3, r0
 800e262:	b2db      	uxtb	r3, r3
 800e264:	f003 0307 	and.w	r3, r3, #7
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d116      	bne.n	800e29a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	68db      	ldr	r3, [r3, #12]
 800e270:	899b      	ldrh	r3, [r3, #12]
 800e272:	b29c      	uxth	r4, r3
 800e274:	2001      	movs	r0, #1
 800e276:	f7fa f89b 	bl	80083b0 <lwip_htons>
 800e27a:	4603      	mov	r3, r0
 800e27c:	461a      	mov	r2, r3
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	68db      	ldr	r3, [r3, #12]
 800e282:	4322      	orrs	r2, r4
 800e284:	b292      	uxth	r2, r2
 800e286:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	8b5b      	ldrh	r3, [r3, #26]
 800e28c:	f043 0320 	orr.w	r3, r3, #32
 800e290:	b29a      	uxth	r2, r3
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e296:	2300      	movs	r3, #0
 800e298:	e004      	b.n	800e2a4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e29a:	2101      	movs	r1, #1
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f000 f80b 	bl	800e2b8 <tcp_enqueue_flags>
 800e2a2:	4603      	mov	r3, r0
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3714      	adds	r7, #20
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd90      	pop	{r4, r7, pc}
 800e2ac:	08014a24 	.word	0x08014a24
 800e2b0:	08014e2c 	.word	0x08014e2c
 800e2b4:	08014a78 	.word	0x08014a78

0800e2b8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b08a      	sub	sp, #40	; 0x28
 800e2bc:	af02      	add	r7, sp, #8
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	460b      	mov	r3, r1
 800e2c2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e2cc:	78fb      	ldrb	r3, [r7, #3]
 800e2ce:	f003 0303 	and.w	r3, r3, #3
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d106      	bne.n	800e2e4 <tcp_enqueue_flags+0x2c>
 800e2d6:	4b67      	ldr	r3, [pc, #412]	; (800e474 <tcp_enqueue_flags+0x1bc>)
 800e2d8:	f240 4211 	movw	r2, #1041	; 0x411
 800e2dc:	4966      	ldr	r1, [pc, #408]	; (800e478 <tcp_enqueue_flags+0x1c0>)
 800e2de:	4867      	ldr	r0, [pc, #412]	; (800e47c <tcp_enqueue_flags+0x1c4>)
 800e2e0:	f004 f83a 	bl	8012358 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d106      	bne.n	800e2f8 <tcp_enqueue_flags+0x40>
 800e2ea:	4b62      	ldr	r3, [pc, #392]	; (800e474 <tcp_enqueue_flags+0x1bc>)
 800e2ec:	f240 4213 	movw	r2, #1043	; 0x413
 800e2f0:	4963      	ldr	r1, [pc, #396]	; (800e480 <tcp_enqueue_flags+0x1c8>)
 800e2f2:	4862      	ldr	r0, [pc, #392]	; (800e47c <tcp_enqueue_flags+0x1c4>)
 800e2f4:	f004 f830 	bl	8012358 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e2f8:	78fb      	ldrb	r3, [r7, #3]
 800e2fa:	f003 0302 	and.w	r3, r3, #2
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d001      	beq.n	800e306 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e302:	2301      	movs	r3, #1
 800e304:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e306:	7ffb      	ldrb	r3, [r7, #31]
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	b2db      	uxtb	r3, r3
 800e30c:	f003 0304 	and.w	r3, r3, #4
 800e310:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e312:	7dfb      	ldrb	r3, [r7, #23]
 800e314:	b29b      	uxth	r3, r3
 800e316:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e31a:	4619      	mov	r1, r3
 800e31c:	2036      	movs	r0, #54	; 0x36
 800e31e:	f7fb f955 	bl	80095cc <pbuf_alloc>
 800e322:	6138      	str	r0, [r7, #16]
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d109      	bne.n	800e33e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	8b5b      	ldrh	r3, [r3, #26]
 800e32e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e332:	b29a      	uxth	r2, r3
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e338:	f04f 33ff 	mov.w	r3, #4294967295
 800e33c:	e095      	b.n	800e46a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	895a      	ldrh	r2, [r3, #10]
 800e342:	7dfb      	ldrb	r3, [r7, #23]
 800e344:	b29b      	uxth	r3, r3
 800e346:	429a      	cmp	r2, r3
 800e348:	d206      	bcs.n	800e358 <tcp_enqueue_flags+0xa0>
 800e34a:	4b4a      	ldr	r3, [pc, #296]	; (800e474 <tcp_enqueue_flags+0x1bc>)
 800e34c:	f240 4239 	movw	r2, #1081	; 0x439
 800e350:	494c      	ldr	r1, [pc, #304]	; (800e484 <tcp_enqueue_flags+0x1cc>)
 800e352:	484a      	ldr	r0, [pc, #296]	; (800e47c <tcp_enqueue_flags+0x1c4>)
 800e354:	f004 f800 	bl	8012358 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e35c:	78fa      	ldrb	r2, [r7, #3]
 800e35e:	7ffb      	ldrb	r3, [r7, #31]
 800e360:	9300      	str	r3, [sp, #0]
 800e362:	460b      	mov	r3, r1
 800e364:	6939      	ldr	r1, [r7, #16]
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f7ff fd70 	bl	800de4c <tcp_create_segment>
 800e36c:	60f8      	str	r0, [r7, #12]
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d109      	bne.n	800e388 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	8b5b      	ldrh	r3, [r3, #26]
 800e378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e37c:	b29a      	uxth	r2, r3
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e382:	f04f 33ff 	mov.w	r3, #4294967295
 800e386:	e070      	b.n	800e46a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	68db      	ldr	r3, [r3, #12]
 800e38c:	f003 0303 	and.w	r3, r3, #3
 800e390:	2b00      	cmp	r3, #0
 800e392:	d006      	beq.n	800e3a2 <tcp_enqueue_flags+0xea>
 800e394:	4b37      	ldr	r3, [pc, #220]	; (800e474 <tcp_enqueue_flags+0x1bc>)
 800e396:	f240 4242 	movw	r2, #1090	; 0x442
 800e39a:	493b      	ldr	r1, [pc, #236]	; (800e488 <tcp_enqueue_flags+0x1d0>)
 800e39c:	4837      	ldr	r0, [pc, #220]	; (800e47c <tcp_enqueue_flags+0x1c4>)
 800e39e:	f003 ffdb 	bl	8012358 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	891b      	ldrh	r3, [r3, #8]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d006      	beq.n	800e3b8 <tcp_enqueue_flags+0x100>
 800e3aa:	4b32      	ldr	r3, [pc, #200]	; (800e474 <tcp_enqueue_flags+0x1bc>)
 800e3ac:	f240 4243 	movw	r2, #1091	; 0x443
 800e3b0:	4936      	ldr	r1, [pc, #216]	; (800e48c <tcp_enqueue_flags+0x1d4>)
 800e3b2:	4832      	ldr	r0, [pc, #200]	; (800e47c <tcp_enqueue_flags+0x1c4>)
 800e3b4:	f003 ffd0 	bl	8012358 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d103      	bne.n	800e3c8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	68fa      	ldr	r2, [r7, #12]
 800e3c4:	66da      	str	r2, [r3, #108]	; 0x6c
 800e3c6:	e00d      	b.n	800e3e4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3cc:	61bb      	str	r3, [r7, #24]
 800e3ce:	e002      	b.n	800e3d6 <tcp_enqueue_flags+0x11e>
 800e3d0:	69bb      	ldr	r3, [r7, #24]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	61bb      	str	r3, [r7, #24]
 800e3d6:	69bb      	ldr	r3, [r7, #24]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d1f8      	bne.n	800e3d0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e3de:	69bb      	ldr	r3, [r7, #24]
 800e3e0:	68fa      	ldr	r2, [r7, #12]
 800e3e2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e3ec:	78fb      	ldrb	r3, [r7, #3]
 800e3ee:	f003 0302 	and.w	r3, r3, #2
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d104      	bne.n	800e400 <tcp_enqueue_flags+0x148>
 800e3f6:	78fb      	ldrb	r3, [r7, #3]
 800e3f8:	f003 0301 	and.w	r3, r3, #1
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d004      	beq.n	800e40a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e404:	1c5a      	adds	r2, r3, #1
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e40a:	78fb      	ldrb	r3, [r7, #3]
 800e40c:	f003 0301 	and.w	r3, r3, #1
 800e410:	2b00      	cmp	r3, #0
 800e412:	d006      	beq.n	800e422 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	8b5b      	ldrh	r3, [r3, #26]
 800e418:	f043 0320 	orr.w	r3, r3, #32
 800e41c:	b29a      	uxth	r2, r3
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	4618      	mov	r0, r3
 800e428:	f7fb fc42 	bl	8009cb0 <pbuf_clen>
 800e42c:	4603      	mov	r3, r0
 800e42e:	461a      	mov	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e436:	4413      	add	r3, r2
 800e438:	b29a      	uxth	r2, r3
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e446:	2b00      	cmp	r3, #0
 800e448:	d00e      	beq.n	800e468 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d10a      	bne.n	800e468 <tcp_enqueue_flags+0x1b0>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e456:	2b00      	cmp	r3, #0
 800e458:	d106      	bne.n	800e468 <tcp_enqueue_flags+0x1b0>
 800e45a:	4b06      	ldr	r3, [pc, #24]	; (800e474 <tcp_enqueue_flags+0x1bc>)
 800e45c:	f240 4265 	movw	r2, #1125	; 0x465
 800e460:	490b      	ldr	r1, [pc, #44]	; (800e490 <tcp_enqueue_flags+0x1d8>)
 800e462:	4806      	ldr	r0, [pc, #24]	; (800e47c <tcp_enqueue_flags+0x1c4>)
 800e464:	f003 ff78 	bl	8012358 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e468:	2300      	movs	r3, #0
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3720      	adds	r7, #32
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}
 800e472:	bf00      	nop
 800e474:	08014a24 	.word	0x08014a24
 800e478:	08014e48 	.word	0x08014e48
 800e47c:	08014a78 	.word	0x08014a78
 800e480:	08014ea0 	.word	0x08014ea0
 800e484:	08014ec0 	.word	0x08014ec0
 800e488:	08014efc 	.word	0x08014efc
 800e48c:	08014f14 	.word	0x08014f14
 800e490:	08014f40 	.word	0x08014f40

0800e494 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e494:	b5b0      	push	{r4, r5, r7, lr}
 800e496:	b08a      	sub	sp, #40	; 0x28
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d106      	bne.n	800e4b0 <tcp_output+0x1c>
 800e4a2:	4b8a      	ldr	r3, [pc, #552]	; (800e6cc <tcp_output+0x238>)
 800e4a4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e4a8:	4989      	ldr	r1, [pc, #548]	; (800e6d0 <tcp_output+0x23c>)
 800e4aa:	488a      	ldr	r0, [pc, #552]	; (800e6d4 <tcp_output+0x240>)
 800e4ac:	f003 ff54 	bl	8012358 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	7d1b      	ldrb	r3, [r3, #20]
 800e4b4:	2b01      	cmp	r3, #1
 800e4b6:	d106      	bne.n	800e4c6 <tcp_output+0x32>
 800e4b8:	4b84      	ldr	r3, [pc, #528]	; (800e6cc <tcp_output+0x238>)
 800e4ba:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e4be:	4986      	ldr	r1, [pc, #536]	; (800e6d8 <tcp_output+0x244>)
 800e4c0:	4884      	ldr	r0, [pc, #528]	; (800e6d4 <tcp_output+0x240>)
 800e4c2:	f003 ff49 	bl	8012358 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e4c6:	4b85      	ldr	r3, [pc, #532]	; (800e6dc <tcp_output+0x248>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	687a      	ldr	r2, [r7, #4]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d101      	bne.n	800e4d4 <tcp_output+0x40>
    return ERR_OK;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	e1ce      	b.n	800e872 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	bf28      	it	cs
 800e4e4:	4613      	movcs	r3, r2
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d10b      	bne.n	800e50e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	8b5b      	ldrh	r3, [r3, #26]
 800e4fa:	f003 0302 	and.w	r3, r3, #2
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	f000 81aa 	beq.w	800e858 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f000 fdcb 	bl	800f0a0 <tcp_send_empty_ack>
 800e50a:	4603      	mov	r3, r0
 800e50c:	e1b1      	b.n	800e872 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e50e:	6879      	ldr	r1, [r7, #4]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	3304      	adds	r3, #4
 800e514:	461a      	mov	r2, r3
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f7ff fc7c 	bl	800de14 <tcp_route>
 800e51c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d102      	bne.n	800e52a <tcp_output+0x96>
    return ERR_RTE;
 800e524:	f06f 0303 	mvn.w	r3, #3
 800e528:	e1a3      	b.n	800e872 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d003      	beq.n	800e538 <tcp_output+0xa4>
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d111      	bne.n	800e55c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d002      	beq.n	800e544 <tcp_output+0xb0>
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	3304      	adds	r3, #4
 800e542:	e000      	b.n	800e546 <tcp_output+0xb2>
 800e544:	2300      	movs	r3, #0
 800e546:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d102      	bne.n	800e554 <tcp_output+0xc0>
      return ERR_RTE;
 800e54e:	f06f 0303 	mvn.w	r3, #3
 800e552:	e18e      	b.n	800e872 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55e:	68db      	ldr	r3, [r3, #12]
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	4618      	mov	r0, r3
 800e564:	f7f9 ff39 	bl	80083da <lwip_htonl>
 800e568:	4602      	mov	r2, r0
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e56e:	1ad3      	subs	r3, r2, r3
 800e570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e572:	8912      	ldrh	r2, [r2, #8]
 800e574:	4413      	add	r3, r2
 800e576:	69ba      	ldr	r2, [r7, #24]
 800e578:	429a      	cmp	r2, r3
 800e57a:	d227      	bcs.n	800e5cc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e582:	461a      	mov	r2, r3
 800e584:	69bb      	ldr	r3, [r7, #24]
 800e586:	4293      	cmp	r3, r2
 800e588:	d114      	bne.n	800e5b4 <tcp_output+0x120>
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d110      	bne.n	800e5b4 <tcp_output+0x120>
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d10b      	bne.n	800e5b4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	8b5b      	ldrh	r3, [r3, #26]
 800e5b8:	f003 0302 	and.w	r3, r3, #2
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	f000 814d 	beq.w	800e85c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f000 fd6c 	bl	800f0a0 <tcp_send_empty_ack>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	e152      	b.n	800e872 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5d8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e5da:	6a3b      	ldr	r3, [r7, #32]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	f000 811c 	beq.w	800e81a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e5e2:	e002      	b.n	800e5ea <tcp_output+0x156>
 800e5e4:	6a3b      	ldr	r3, [r7, #32]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	623b      	str	r3, [r7, #32]
 800e5ea:	6a3b      	ldr	r3, [r7, #32]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d1f8      	bne.n	800e5e4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e5f2:	e112      	b.n	800e81a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f6:	68db      	ldr	r3, [r3, #12]
 800e5f8:	899b      	ldrh	r3, [r3, #12]
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f7f9 fed7 	bl	80083b0 <lwip_htons>
 800e602:	4603      	mov	r3, r0
 800e604:	b2db      	uxtb	r3, r3
 800e606:	f003 0304 	and.w	r3, r3, #4
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d006      	beq.n	800e61c <tcp_output+0x188>
 800e60e:	4b2f      	ldr	r3, [pc, #188]	; (800e6cc <tcp_output+0x238>)
 800e610:	f240 5236 	movw	r2, #1334	; 0x536
 800e614:	4932      	ldr	r1, [pc, #200]	; (800e6e0 <tcp_output+0x24c>)
 800e616:	482f      	ldr	r0, [pc, #188]	; (800e6d4 <tcp_output+0x240>)
 800e618:	f003 fe9e 	bl	8012358 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e620:	2b00      	cmp	r3, #0
 800e622:	d01f      	beq.n	800e664 <tcp_output+0x1d0>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	8b5b      	ldrh	r3, [r3, #26]
 800e628:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d119      	bne.n	800e664 <tcp_output+0x1d0>
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e634:	2b00      	cmp	r3, #0
 800e636:	d00b      	beq.n	800e650 <tcp_output+0x1bc>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d110      	bne.n	800e664 <tcp_output+0x1d0>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e646:	891a      	ldrh	r2, [r3, #8]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e64c:	429a      	cmp	r2, r3
 800e64e:	d209      	bcs.n	800e664 <tcp_output+0x1d0>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e656:	2b00      	cmp	r3, #0
 800e658:	d004      	beq.n	800e664 <tcp_output+0x1d0>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e660:	2b08      	cmp	r3, #8
 800e662:	d901      	bls.n	800e668 <tcp_output+0x1d4>
 800e664:	2301      	movs	r3, #1
 800e666:	e000      	b.n	800e66a <tcp_output+0x1d6>
 800e668:	2300      	movs	r3, #0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d106      	bne.n	800e67c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	8b5b      	ldrh	r3, [r3, #26]
 800e672:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e676:	2b00      	cmp	r3, #0
 800e678:	f000 80e4 	beq.w	800e844 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	7d1b      	ldrb	r3, [r3, #20]
 800e680:	2b02      	cmp	r3, #2
 800e682:	d00d      	beq.n	800e6a0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e686:	68db      	ldr	r3, [r3, #12]
 800e688:	899b      	ldrh	r3, [r3, #12]
 800e68a:	b29c      	uxth	r4, r3
 800e68c:	2010      	movs	r0, #16
 800e68e:	f7f9 fe8f 	bl	80083b0 <lwip_htons>
 800e692:	4603      	mov	r3, r0
 800e694:	461a      	mov	r2, r3
 800e696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	4322      	orrs	r2, r4
 800e69c:	b292      	uxth	r2, r2
 800e69e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e6a0:	697a      	ldr	r2, [r7, #20]
 800e6a2:	6879      	ldr	r1, [r7, #4]
 800e6a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e6a6:	f000 f909 	bl	800e8bc <tcp_output_segment>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e6ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d016      	beq.n	800e6e4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	8b5b      	ldrh	r3, [r3, #26]
 800e6ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6be:	b29a      	uxth	r2, r3
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	835a      	strh	r2, [r3, #26]
      return err;
 800e6c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6c8:	e0d3      	b.n	800e872 <tcp_output+0x3de>
 800e6ca:	bf00      	nop
 800e6cc:	08014a24 	.word	0x08014a24
 800e6d0:	08014f68 	.word	0x08014f68
 800e6d4:	08014a78 	.word	0x08014a78
 800e6d8:	08014f80 	.word	0x08014f80
 800e6dc:	2000f0a0 	.word	0x2000f0a0
 800e6e0:	08014fa8 	.word	0x08014fa8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e6:	681a      	ldr	r2, [r3, #0]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	7d1b      	ldrb	r3, [r3, #20]
 800e6f0:	2b02      	cmp	r3, #2
 800e6f2:	d006      	beq.n	800e702 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	8b5b      	ldrh	r3, [r3, #26]
 800e6f8:	f023 0303 	bic.w	r3, r3, #3
 800e6fc:	b29a      	uxth	r2, r3
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e704:	68db      	ldr	r3, [r3, #12]
 800e706:	685b      	ldr	r3, [r3, #4]
 800e708:	4618      	mov	r0, r3
 800e70a:	f7f9 fe66 	bl	80083da <lwip_htonl>
 800e70e:	4604      	mov	r4, r0
 800e710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e712:	891b      	ldrh	r3, [r3, #8]
 800e714:	461d      	mov	r5, r3
 800e716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e718:	68db      	ldr	r3, [r3, #12]
 800e71a:	899b      	ldrh	r3, [r3, #12]
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	4618      	mov	r0, r3
 800e720:	f7f9 fe46 	bl	80083b0 <lwip_htons>
 800e724:	4603      	mov	r3, r0
 800e726:	b2db      	uxtb	r3, r3
 800e728:	f003 0303 	and.w	r3, r3, #3
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d001      	beq.n	800e734 <tcp_output+0x2a0>
 800e730:	2301      	movs	r3, #1
 800e732:	e000      	b.n	800e736 <tcp_output+0x2a2>
 800e734:	2300      	movs	r3, #0
 800e736:	442b      	add	r3, r5
 800e738:	4423      	add	r3, r4
 800e73a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	1ad3      	subs	r3, r2, r3
 800e744:	2b00      	cmp	r3, #0
 800e746:	da02      	bge.n	800e74e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	68ba      	ldr	r2, [r7, #8]
 800e74c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e750:	891b      	ldrh	r3, [r3, #8]
 800e752:	461c      	mov	r4, r3
 800e754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e756:	68db      	ldr	r3, [r3, #12]
 800e758:	899b      	ldrh	r3, [r3, #12]
 800e75a:	b29b      	uxth	r3, r3
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7f9 fe27 	bl	80083b0 <lwip_htons>
 800e762:	4603      	mov	r3, r0
 800e764:	b2db      	uxtb	r3, r3
 800e766:	f003 0303 	and.w	r3, r3, #3
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d001      	beq.n	800e772 <tcp_output+0x2de>
 800e76e:	2301      	movs	r3, #1
 800e770:	e000      	b.n	800e774 <tcp_output+0x2e0>
 800e772:	2300      	movs	r3, #0
 800e774:	4423      	add	r3, r4
 800e776:	2b00      	cmp	r3, #0
 800e778:	d049      	beq.n	800e80e <tcp_output+0x37a>
      seg->next = NULL;
 800e77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77c:	2200      	movs	r2, #0
 800e77e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e784:	2b00      	cmp	r3, #0
 800e786:	d105      	bne.n	800e794 <tcp_output+0x300>
        pcb->unacked = seg;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e78c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800e78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e790:	623b      	str	r3, [r7, #32]
 800e792:	e03f      	b.n	800e814 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e796:	68db      	ldr	r3, [r3, #12]
 800e798:	685b      	ldr	r3, [r3, #4]
 800e79a:	4618      	mov	r0, r3
 800e79c:	f7f9 fe1d 	bl	80083da <lwip_htonl>
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	6a3b      	ldr	r3, [r7, #32]
 800e7a4:	68db      	ldr	r3, [r3, #12]
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7f9 fe16 	bl	80083da <lwip_htonl>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	1ae3      	subs	r3, r4, r3
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	da24      	bge.n	800e800 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	3370      	adds	r3, #112	; 0x70
 800e7ba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e7bc:	e002      	b.n	800e7c4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e7c4:	69fb      	ldr	r3, [r7, #28]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d011      	beq.n	800e7f0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	68db      	ldr	r3, [r3, #12]
 800e7d2:	685b      	ldr	r3, [r3, #4]
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7f9 fe00 	bl	80083da <lwip_htonl>
 800e7da:	4604      	mov	r4, r0
 800e7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7de:	68db      	ldr	r3, [r3, #12]
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7f9 fdf9 	bl	80083da <lwip_htonl>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	dbe6      	blt.n	800e7be <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e7f8:	69fb      	ldr	r3, [r7, #28]
 800e7fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7fc:	601a      	str	r2, [r3, #0]
 800e7fe:	e009      	b.n	800e814 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e800:	6a3b      	ldr	r3, [r7, #32]
 800e802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e804:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e806:	6a3b      	ldr	r3, [r7, #32]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	623b      	str	r3, [r7, #32]
 800e80c:	e002      	b.n	800e814 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e80e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e810:	f7fc fc3f 	bl	800b092 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e818:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d012      	beq.n	800e846 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e822:	68db      	ldr	r3, [r3, #12]
 800e824:	685b      	ldr	r3, [r3, #4]
 800e826:	4618      	mov	r0, r3
 800e828:	f7f9 fdd7 	bl	80083da <lwip_htonl>
 800e82c:	4602      	mov	r2, r0
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e832:	1ad3      	subs	r3, r2, r3
 800e834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e836:	8912      	ldrh	r2, [r2, #8]
 800e838:	4413      	add	r3, r2
  while (seg != NULL &&
 800e83a:	69ba      	ldr	r2, [r7, #24]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	f4bf aed9 	bcs.w	800e5f4 <tcp_output+0x160>
 800e842:	e000      	b.n	800e846 <tcp_output+0x3b2>
      break;
 800e844:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d108      	bne.n	800e860 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2200      	movs	r2, #0
 800e852:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e856:	e004      	b.n	800e862 <tcp_output+0x3ce>
    goto output_done;
 800e858:	bf00      	nop
 800e85a:	e002      	b.n	800e862 <tcp_output+0x3ce>
    goto output_done;
 800e85c:	bf00      	nop
 800e85e:	e000      	b.n	800e862 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e860:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	8b5b      	ldrh	r3, [r3, #26]
 800e866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e86a:	b29a      	uxth	r2, r3
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e870:	2300      	movs	r3, #0
}
 800e872:	4618      	mov	r0, r3
 800e874:	3728      	adds	r7, #40	; 0x28
 800e876:	46bd      	mov	sp, r7
 800e878:	bdb0      	pop	{r4, r5, r7, pc}
 800e87a:	bf00      	nop

0800e87c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b082      	sub	sp, #8
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d106      	bne.n	800e898 <tcp_output_segment_busy+0x1c>
 800e88a:	4b09      	ldr	r3, [pc, #36]	; (800e8b0 <tcp_output_segment_busy+0x34>)
 800e88c:	f240 529a 	movw	r2, #1434	; 0x59a
 800e890:	4908      	ldr	r1, [pc, #32]	; (800e8b4 <tcp_output_segment_busy+0x38>)
 800e892:	4809      	ldr	r0, [pc, #36]	; (800e8b8 <tcp_output_segment_busy+0x3c>)
 800e894:	f003 fd60 	bl	8012358 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	685b      	ldr	r3, [r3, #4]
 800e89c:	7b9b      	ldrb	r3, [r3, #14]
 800e89e:	2b01      	cmp	r3, #1
 800e8a0:	d001      	beq.n	800e8a6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	e000      	b.n	800e8a8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e8a6:	2300      	movs	r3, #0
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3708      	adds	r7, #8
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}
 800e8b0:	08014a24 	.word	0x08014a24
 800e8b4:	08014fc0 	.word	0x08014fc0
 800e8b8:	08014a78 	.word	0x08014a78

0800e8bc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e8bc:	b5b0      	push	{r4, r5, r7, lr}
 800e8be:	b08c      	sub	sp, #48	; 0x30
 800e8c0:	af04      	add	r7, sp, #16
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	60b9      	str	r1, [r7, #8]
 800e8c6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d106      	bne.n	800e8dc <tcp_output_segment+0x20>
 800e8ce:	4b64      	ldr	r3, [pc, #400]	; (800ea60 <tcp_output_segment+0x1a4>)
 800e8d0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e8d4:	4963      	ldr	r1, [pc, #396]	; (800ea64 <tcp_output_segment+0x1a8>)
 800e8d6:	4864      	ldr	r0, [pc, #400]	; (800ea68 <tcp_output_segment+0x1ac>)
 800e8d8:	f003 fd3e 	bl	8012358 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d106      	bne.n	800e8f0 <tcp_output_segment+0x34>
 800e8e2:	4b5f      	ldr	r3, [pc, #380]	; (800ea60 <tcp_output_segment+0x1a4>)
 800e8e4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e8e8:	4960      	ldr	r1, [pc, #384]	; (800ea6c <tcp_output_segment+0x1b0>)
 800e8ea:	485f      	ldr	r0, [pc, #380]	; (800ea68 <tcp_output_segment+0x1ac>)
 800e8ec:	f003 fd34 	bl	8012358 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d106      	bne.n	800e904 <tcp_output_segment+0x48>
 800e8f6:	4b5a      	ldr	r3, [pc, #360]	; (800ea60 <tcp_output_segment+0x1a4>)
 800e8f8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e8fc:	495c      	ldr	r1, [pc, #368]	; (800ea70 <tcp_output_segment+0x1b4>)
 800e8fe:	485a      	ldr	r0, [pc, #360]	; (800ea68 <tcp_output_segment+0x1ac>)
 800e900:	f003 fd2a 	bl	8012358 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e904:	68f8      	ldr	r0, [r7, #12]
 800e906:	f7ff ffb9 	bl	800e87c <tcp_output_segment_busy>
 800e90a:	4603      	mov	r3, r0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d001      	beq.n	800e914 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e910:	2300      	movs	r3, #0
 800e912:	e0a1      	b.n	800ea58 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	68dc      	ldr	r4, [r3, #12]
 800e91c:	4610      	mov	r0, r2
 800e91e:	f7f9 fd5c 	bl	80083da <lwip_htonl>
 800e922:	4603      	mov	r3, r0
 800e924:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	68dc      	ldr	r4, [r3, #12]
 800e92e:	4610      	mov	r0, r2
 800e930:	f7f9 fd3e 	bl	80083b0 <lwip_htons>
 800e934:	4603      	mov	r3, r0
 800e936:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e93c:	68ba      	ldr	r2, [r7, #8]
 800e93e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e940:	441a      	add	r2, r3
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	3314      	adds	r3, #20
 800e94c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	7a9b      	ldrb	r3, [r3, #10]
 800e952:	f003 0301 	and.w	r3, r3, #1
 800e956:	2b00      	cmp	r3, #0
 800e958:	d015      	beq.n	800e986 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	3304      	adds	r3, #4
 800e95e:	461a      	mov	r2, r3
 800e960:	6879      	ldr	r1, [r7, #4]
 800e962:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e966:	f7fc fe8b 	bl	800b680 <tcp_eff_send_mss_netif>
 800e96a:	4603      	mov	r3, r0
 800e96c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e96e:	8b7b      	ldrh	r3, [r7, #26]
 800e970:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e974:	4618      	mov	r0, r3
 800e976:	f7f9 fd30 	bl	80083da <lwip_htonl>
 800e97a:	4602      	mov	r2, r0
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e980:	69fb      	ldr	r3, [r7, #28]
 800e982:	3304      	adds	r3, #4
 800e984:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	da02      	bge.n	800e996 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	2200      	movs	r2, #0
 800e994:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d10c      	bne.n	800e9b8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e99e:	4b35      	ldr	r3, [pc, #212]	; (800ea74 <tcp_output_segment+0x1b8>)
 800e9a0:	681a      	ldr	r2, [r3, #0]
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	68db      	ldr	r3, [r3, #12]
 800e9aa:	685b      	ldr	r3, [r3, #4]
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f7f9 fd14 	bl	80083da <lwip_htonl>
 800e9b2:	4602      	mov	r2, r0
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	68da      	ldr	r2, [r3, #12]
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	685b      	ldr	r3, [r3, #4]
 800e9c2:	1ad3      	subs	r3, r2, r3
 800e9c4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	8959      	ldrh	r1, [r3, #10]
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	685b      	ldr	r3, [r3, #4]
 800e9d0:	8b3a      	ldrh	r2, [r7, #24]
 800e9d2:	1a8a      	subs	r2, r1, r2
 800e9d4:	b292      	uxth	r2, r2
 800e9d6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	8919      	ldrh	r1, [r3, #8]
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	685b      	ldr	r3, [r3, #4]
 800e9e2:	8b3a      	ldrh	r2, [r7, #24]
 800e9e4:	1a8a      	subs	r2, r1, r2
 800e9e6:	b292      	uxth	r2, r2
 800e9e8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	685b      	ldr	r3, [r3, #4]
 800e9ee:	68fa      	ldr	r2, [r7, #12]
 800e9f0:	68d2      	ldr	r2, [r2, #12]
 800e9f2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	741a      	strb	r2, [r3, #16]
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	68da      	ldr	r2, [r3, #12]
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	7a9b      	ldrb	r3, [r3, #10]
 800ea08:	f003 0301 	and.w	r3, r3, #1
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d001      	beq.n	800ea14 <tcp_output_segment+0x158>
 800ea10:	2318      	movs	r3, #24
 800ea12:	e000      	b.n	800ea16 <tcp_output_segment+0x15a>
 800ea14:	2314      	movs	r3, #20
 800ea16:	4413      	add	r3, r2
 800ea18:	69fa      	ldr	r2, [r7, #28]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d006      	beq.n	800ea2c <tcp_output_segment+0x170>
 800ea1e:	4b10      	ldr	r3, [pc, #64]	; (800ea60 <tcp_output_segment+0x1a4>)
 800ea20:	f240 621c 	movw	r2, #1564	; 0x61c
 800ea24:	4914      	ldr	r1, [pc, #80]	; (800ea78 <tcp_output_segment+0x1bc>)
 800ea26:	4810      	ldr	r0, [pc, #64]	; (800ea68 <tcp_output_segment+0x1ac>)
 800ea28:	f003 fc96 	bl	8012358 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	6858      	ldr	r0, [r3, #4]
 800ea30:	68b9      	ldr	r1, [r7, #8]
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	1d1c      	adds	r4, r3, #4
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	7add      	ldrb	r5, [r3, #11]
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	7a9b      	ldrb	r3, [r3, #10]
 800ea3e:	687a      	ldr	r2, [r7, #4]
 800ea40:	9202      	str	r2, [sp, #8]
 800ea42:	2206      	movs	r2, #6
 800ea44:	9201      	str	r2, [sp, #4]
 800ea46:	9300      	str	r3, [sp, #0]
 800ea48:	462b      	mov	r3, r5
 800ea4a:	4622      	mov	r2, r4
 800ea4c:	f002 fa64 	bl	8010f18 <ip4_output_if>
 800ea50:	4603      	mov	r3, r0
 800ea52:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ea54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3720      	adds	r7, #32
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bdb0      	pop	{r4, r5, r7, pc}
 800ea60:	08014a24 	.word	0x08014a24
 800ea64:	08014fe8 	.word	0x08014fe8
 800ea68:	08014a78 	.word	0x08014a78
 800ea6c:	08015008 	.word	0x08015008
 800ea70:	08015028 	.word	0x08015028
 800ea74:	2000f054 	.word	0x2000f054
 800ea78:	0801504c 	.word	0x0801504c

0800ea7c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ea7c:	b5b0      	push	{r4, r5, r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d106      	bne.n	800ea98 <tcp_rexmit_rto_prepare+0x1c>
 800ea8a:	4b31      	ldr	r3, [pc, #196]	; (800eb50 <tcp_rexmit_rto_prepare+0xd4>)
 800ea8c:	f240 6263 	movw	r2, #1635	; 0x663
 800ea90:	4930      	ldr	r1, [pc, #192]	; (800eb54 <tcp_rexmit_rto_prepare+0xd8>)
 800ea92:	4831      	ldr	r0, [pc, #196]	; (800eb58 <tcp_rexmit_rto_prepare+0xdc>)
 800ea94:	f003 fc60 	bl	8012358 <iprintf>

  if (pcb->unacked == NULL) {
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d102      	bne.n	800eaa6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800eaa0:	f06f 0305 	mvn.w	r3, #5
 800eaa4:	e050      	b.n	800eb48 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaaa:	60fb      	str	r3, [r7, #12]
 800eaac:	e00b      	b.n	800eac6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800eaae:	68f8      	ldr	r0, [r7, #12]
 800eab0:	f7ff fee4 	bl	800e87c <tcp_output_segment_busy>
 800eab4:	4603      	mov	r3, r0
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d002      	beq.n	800eac0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800eaba:	f06f 0305 	mvn.w	r3, #5
 800eabe:	e043      	b.n	800eb48 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	60fb      	str	r3, [r7, #12]
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d1ef      	bne.n	800eaae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	f7ff fed4 	bl	800e87c <tcp_output_segment_busy>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d002      	beq.n	800eae0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800eada:	f06f 0305 	mvn.w	r3, #5
 800eade:	e033      	b.n	800eb48 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	8b5b      	ldrh	r3, [r3, #26]
 800eafa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800eafe:	b29a      	uxth	r2, r3
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	68db      	ldr	r3, [r3, #12]
 800eb08:	685b      	ldr	r3, [r3, #4]
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7f9 fc65 	bl	80083da <lwip_htonl>
 800eb10:	4604      	mov	r4, r0
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	891b      	ldrh	r3, [r3, #8]
 800eb16:	461d      	mov	r5, r3
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	68db      	ldr	r3, [r3, #12]
 800eb1c:	899b      	ldrh	r3, [r3, #12]
 800eb1e:	b29b      	uxth	r3, r3
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7f9 fc45 	bl	80083b0 <lwip_htons>
 800eb26:	4603      	mov	r3, r0
 800eb28:	b2db      	uxtb	r3, r3
 800eb2a:	f003 0303 	and.w	r3, r3, #3
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d001      	beq.n	800eb36 <tcp_rexmit_rto_prepare+0xba>
 800eb32:	2301      	movs	r3, #1
 800eb34:	e000      	b.n	800eb38 <tcp_rexmit_rto_prepare+0xbc>
 800eb36:	2300      	movs	r3, #0
 800eb38:	442b      	add	r3, r5
 800eb3a:	18e2      	adds	r2, r4, r3
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2200      	movs	r2, #0
 800eb44:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800eb46:	2300      	movs	r3, #0
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3710      	adds	r7, #16
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bdb0      	pop	{r4, r5, r7, pc}
 800eb50:	08014a24 	.word	0x08014a24
 800eb54:	08015060 	.word	0x08015060
 800eb58:	08014a78 	.word	0x08014a78

0800eb5c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b082      	sub	sp, #8
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d106      	bne.n	800eb78 <tcp_rexmit_rto_commit+0x1c>
 800eb6a:	4b0d      	ldr	r3, [pc, #52]	; (800eba0 <tcp_rexmit_rto_commit+0x44>)
 800eb6c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800eb70:	490c      	ldr	r1, [pc, #48]	; (800eba4 <tcp_rexmit_rto_commit+0x48>)
 800eb72:	480d      	ldr	r0, [pc, #52]	; (800eba8 <tcp_rexmit_rto_commit+0x4c>)
 800eb74:	f003 fbf0 	bl	8012358 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eb7e:	2bff      	cmp	r3, #255	; 0xff
 800eb80:	d007      	beq.n	800eb92 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eb88:	3301      	adds	r3, #1
 800eb8a:	b2da      	uxtb	r2, r3
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f7ff fc7e 	bl	800e494 <tcp_output>
}
 800eb98:	bf00      	nop
 800eb9a:	3708      	adds	r7, #8
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}
 800eba0:	08014a24 	.word	0x08014a24
 800eba4:	08015084 	.word	0x08015084
 800eba8:	08014a78 	.word	0x08014a78

0800ebac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d106      	bne.n	800ebc8 <tcp_rexmit_rto+0x1c>
 800ebba:	4b0a      	ldr	r3, [pc, #40]	; (800ebe4 <tcp_rexmit_rto+0x38>)
 800ebbc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ebc0:	4909      	ldr	r1, [pc, #36]	; (800ebe8 <tcp_rexmit_rto+0x3c>)
 800ebc2:	480a      	ldr	r0, [pc, #40]	; (800ebec <tcp_rexmit_rto+0x40>)
 800ebc4:	f003 fbc8 	bl	8012358 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f7ff ff57 	bl	800ea7c <tcp_rexmit_rto_prepare>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d102      	bne.n	800ebda <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f7ff ffc1 	bl	800eb5c <tcp_rexmit_rto_commit>
  }
}
 800ebda:	bf00      	nop
 800ebdc:	3708      	adds	r7, #8
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	08014a24 	.word	0x08014a24
 800ebe8:	080150a8 	.word	0x080150a8
 800ebec:	08014a78 	.word	0x08014a78

0800ebf0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ebf0:	b590      	push	{r4, r7, lr}
 800ebf2:	b085      	sub	sp, #20
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d106      	bne.n	800ec0c <tcp_rexmit+0x1c>
 800ebfe:	4b2f      	ldr	r3, [pc, #188]	; (800ecbc <tcp_rexmit+0xcc>)
 800ec00:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ec04:	492e      	ldr	r1, [pc, #184]	; (800ecc0 <tcp_rexmit+0xd0>)
 800ec06:	482f      	ldr	r0, [pc, #188]	; (800ecc4 <tcp_rexmit+0xd4>)
 800ec08:	f003 fba6 	bl	8012358 <iprintf>

  if (pcb->unacked == NULL) {
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d102      	bne.n	800ec1a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ec14:	f06f 0305 	mvn.w	r3, #5
 800ec18:	e04c      	b.n	800ecb4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec1e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ec20:	68b8      	ldr	r0, [r7, #8]
 800ec22:	f7ff fe2b 	bl	800e87c <tcp_output_segment_busy>
 800ec26:	4603      	mov	r3, r0
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d002      	beq.n	800ec32 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ec2c:	f06f 0305 	mvn.w	r3, #5
 800ec30:	e040      	b.n	800ecb4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	681a      	ldr	r2, [r3, #0]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	336c      	adds	r3, #108	; 0x6c
 800ec3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ec40:	e002      	b.n	800ec48 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d011      	beq.n	800ec74 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	68db      	ldr	r3, [r3, #12]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f7f9 fbbe 	bl	80083da <lwip_htonl>
 800ec5e:	4604      	mov	r4, r0
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	68db      	ldr	r3, [r3, #12]
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7f9 fbb7 	bl	80083da <lwip_htonl>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	dbe6      	blt.n	800ec42 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	681a      	ldr	r2, [r3, #0]
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	68ba      	ldr	r2, [r7, #8]
 800ec80:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d103      	bne.n	800ec92 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec98:	2bff      	cmp	r3, #255	; 0xff
 800ec9a:	d007      	beq.n	800ecac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eca2:	3301      	adds	r3, #1
 800eca4:	b2da      	uxtb	r2, r3
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ecb2:	2300      	movs	r3, #0
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3714      	adds	r7, #20
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd90      	pop	{r4, r7, pc}
 800ecbc:	08014a24 	.word	0x08014a24
 800ecc0:	080150c4 	.word	0x080150c4
 800ecc4:	08014a78 	.word	0x08014a78

0800ecc8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d106      	bne.n	800ece4 <tcp_rexmit_fast+0x1c>
 800ecd6:	4b2a      	ldr	r3, [pc, #168]	; (800ed80 <tcp_rexmit_fast+0xb8>)
 800ecd8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ecdc:	4929      	ldr	r1, [pc, #164]	; (800ed84 <tcp_rexmit_fast+0xbc>)
 800ecde:	482a      	ldr	r0, [pc, #168]	; (800ed88 <tcp_rexmit_fast+0xc0>)
 800ece0:	f003 fb3a 	bl	8012358 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d044      	beq.n	800ed76 <tcp_rexmit_fast+0xae>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	8b5b      	ldrh	r3, [r3, #26]
 800ecf0:	f003 0304 	and.w	r3, r3, #4
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d13e      	bne.n	800ed76 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f7ff ff79 	bl	800ebf0 <tcp_rexmit>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d138      	bne.n	800ed76 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ed10:	4293      	cmp	r3, r2
 800ed12:	bf28      	it	cs
 800ed14:	4613      	movcs	r3, r2
 800ed16:	b29b      	uxth	r3, r3
 800ed18:	0fda      	lsrs	r2, r3, #31
 800ed1a:	4413      	add	r3, r2
 800ed1c:	105b      	asrs	r3, r3, #1
 800ed1e:	b29a      	uxth	r2, r3
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed32:	005b      	lsls	r3, r3, #1
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d206      	bcs.n	800ed46 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed3c:	005b      	lsls	r3, r3, #1
 800ed3e:	b29a      	uxth	r2, r3
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed50:	4619      	mov	r1, r3
 800ed52:	0049      	lsls	r1, r1, #1
 800ed54:	440b      	add	r3, r1
 800ed56:	b29b      	uxth	r3, r3
 800ed58:	4413      	add	r3, r2
 800ed5a:	b29a      	uxth	r2, r3
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	8b5b      	ldrh	r3, [r3, #26]
 800ed66:	f043 0304 	orr.w	r3, r3, #4
 800ed6a:	b29a      	uxth	r2, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2200      	movs	r2, #0
 800ed74:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800ed76:	bf00      	nop
 800ed78:	3708      	adds	r7, #8
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	08014a24 	.word	0x08014a24
 800ed84:	080150dc 	.word	0x080150dc
 800ed88:	08014a78 	.word	0x08014a78

0800ed8c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b086      	sub	sp, #24
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	60f8      	str	r0, [r7, #12]
 800ed94:	607b      	str	r3, [r7, #4]
 800ed96:	460b      	mov	r3, r1
 800ed98:	817b      	strh	r3, [r7, #10]
 800ed9a:	4613      	mov	r3, r2
 800ed9c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ed9e:	897a      	ldrh	r2, [r7, #10]
 800eda0:	893b      	ldrh	r3, [r7, #8]
 800eda2:	4413      	add	r3, r2
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	3314      	adds	r3, #20
 800eda8:	b29b      	uxth	r3, r3
 800edaa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800edae:	4619      	mov	r1, r3
 800edb0:	2022      	movs	r0, #34	; 0x22
 800edb2:	f7fa fc0b 	bl	80095cc <pbuf_alloc>
 800edb6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d04d      	beq.n	800ee5a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800edbe:	897b      	ldrh	r3, [r7, #10]
 800edc0:	3313      	adds	r3, #19
 800edc2:	697a      	ldr	r2, [r7, #20]
 800edc4:	8952      	ldrh	r2, [r2, #10]
 800edc6:	4293      	cmp	r3, r2
 800edc8:	db06      	blt.n	800edd8 <tcp_output_alloc_header_common+0x4c>
 800edca:	4b26      	ldr	r3, [pc, #152]	; (800ee64 <tcp_output_alloc_header_common+0xd8>)
 800edcc:	f240 7223 	movw	r2, #1827	; 0x723
 800edd0:	4925      	ldr	r1, [pc, #148]	; (800ee68 <tcp_output_alloc_header_common+0xdc>)
 800edd2:	4826      	ldr	r0, [pc, #152]	; (800ee6c <tcp_output_alloc_header_common+0xe0>)
 800edd4:	f003 fac0 	bl	8012358 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800edde:	8c3b      	ldrh	r3, [r7, #32]
 800ede0:	4618      	mov	r0, r3
 800ede2:	f7f9 fae5 	bl	80083b0 <lwip_htons>
 800ede6:	4603      	mov	r3, r0
 800ede8:	461a      	mov	r2, r3
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800edee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7f9 fadd 	bl	80083b0 <lwip_htons>
 800edf6:	4603      	mov	r3, r0
 800edf8:	461a      	mov	r2, r3
 800edfa:	693b      	ldr	r3, [r7, #16]
 800edfc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	687a      	ldr	r2, [r7, #4]
 800ee02:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ee04:	68f8      	ldr	r0, [r7, #12]
 800ee06:	f7f9 fae8 	bl	80083da <lwip_htonl>
 800ee0a:	4602      	mov	r2, r0
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ee10:	897b      	ldrh	r3, [r7, #10]
 800ee12:	089b      	lsrs	r3, r3, #2
 800ee14:	b29b      	uxth	r3, r3
 800ee16:	3305      	adds	r3, #5
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	031b      	lsls	r3, r3, #12
 800ee1c:	b29a      	uxth	r2, r3
 800ee1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ee22:	b29b      	uxth	r3, r3
 800ee24:	4313      	orrs	r3, r2
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f7f9 fac1 	bl	80083b0 <lwip_htons>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	461a      	mov	r2, r3
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ee36:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f7f9 fab9 	bl	80083b0 <lwip_htons>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	461a      	mov	r2, r3
 800ee42:	693b      	ldr	r3, [r7, #16]
 800ee44:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	741a      	strb	r2, [r3, #16]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	2200      	movs	r2, #0
 800ee54:	749a      	strb	r2, [r3, #18]
 800ee56:	2200      	movs	r2, #0
 800ee58:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ee5a:	697b      	ldr	r3, [r7, #20]
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3718      	adds	r7, #24
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}
 800ee64:	08014a24 	.word	0x08014a24
 800ee68:	080150fc 	.word	0x080150fc
 800ee6c:	08014a78 	.word	0x08014a78

0800ee70 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ee70:	b5b0      	push	{r4, r5, r7, lr}
 800ee72:	b08a      	sub	sp, #40	; 0x28
 800ee74:	af04      	add	r7, sp, #16
 800ee76:	60f8      	str	r0, [r7, #12]
 800ee78:	607b      	str	r3, [r7, #4]
 800ee7a:	460b      	mov	r3, r1
 800ee7c:	817b      	strh	r3, [r7, #10]
 800ee7e:	4613      	mov	r3, r2
 800ee80:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d106      	bne.n	800ee96 <tcp_output_alloc_header+0x26>
 800ee88:	4b15      	ldr	r3, [pc, #84]	; (800eee0 <tcp_output_alloc_header+0x70>)
 800ee8a:	f240 7242 	movw	r2, #1858	; 0x742
 800ee8e:	4915      	ldr	r1, [pc, #84]	; (800eee4 <tcp_output_alloc_header+0x74>)
 800ee90:	4815      	ldr	r0, [pc, #84]	; (800eee8 <tcp_output_alloc_header+0x78>)
 800ee92:	f003 fa61 	bl	8012358 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	8adb      	ldrh	r3, [r3, #22]
 800ee9e:	68fa      	ldr	r2, [r7, #12]
 800eea0:	8b12      	ldrh	r2, [r2, #24]
 800eea2:	68f9      	ldr	r1, [r7, #12]
 800eea4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800eea6:	893d      	ldrh	r5, [r7, #8]
 800eea8:	897c      	ldrh	r4, [r7, #10]
 800eeaa:	9103      	str	r1, [sp, #12]
 800eeac:	2110      	movs	r1, #16
 800eeae:	9102      	str	r1, [sp, #8]
 800eeb0:	9201      	str	r2, [sp, #4]
 800eeb2:	9300      	str	r3, [sp, #0]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	462a      	mov	r2, r5
 800eeb8:	4621      	mov	r1, r4
 800eeba:	f7ff ff67 	bl	800ed8c <tcp_output_alloc_header_common>
 800eebe:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d006      	beq.n	800eed4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeca:	68fa      	ldr	r2, [r7, #12]
 800eecc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800eece:	441a      	add	r2, r3
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800eed4:	697b      	ldr	r3, [r7, #20]
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3718      	adds	r7, #24
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bdb0      	pop	{r4, r5, r7, pc}
 800eede:	bf00      	nop
 800eee0:	08014a24 	.word	0x08014a24
 800eee4:	0801512c 	.word	0x0801512c
 800eee8:	08014a78 	.word	0x08014a78

0800eeec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b088      	sub	sp, #32
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	60f8      	str	r0, [r7, #12]
 800eef4:	60b9      	str	r1, [r7, #8]
 800eef6:	4611      	mov	r1, r2
 800eef8:	461a      	mov	r2, r3
 800eefa:	460b      	mov	r3, r1
 800eefc:	71fb      	strb	r3, [r7, #7]
 800eefe:	4613      	mov	r3, r2
 800ef00:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ef02:	2300      	movs	r3, #0
 800ef04:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d106      	bne.n	800ef1a <tcp_output_fill_options+0x2e>
 800ef0c:	4b12      	ldr	r3, [pc, #72]	; (800ef58 <tcp_output_fill_options+0x6c>)
 800ef0e:	f240 7256 	movw	r2, #1878	; 0x756
 800ef12:	4912      	ldr	r1, [pc, #72]	; (800ef5c <tcp_output_fill_options+0x70>)
 800ef14:	4812      	ldr	r0, [pc, #72]	; (800ef60 <tcp_output_fill_options+0x74>)
 800ef16:	f003 fa1f 	bl	8012358 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ef20:	69bb      	ldr	r3, [r7, #24]
 800ef22:	3314      	adds	r3, #20
 800ef24:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ef26:	8bfb      	ldrh	r3, [r7, #30]
 800ef28:	009b      	lsls	r3, r3, #2
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	79fb      	ldrb	r3, [r7, #7]
 800ef2e:	009b      	lsls	r3, r3, #2
 800ef30:	f003 0304 	and.w	r3, r3, #4
 800ef34:	4413      	add	r3, r2
 800ef36:	3314      	adds	r3, #20
 800ef38:	69ba      	ldr	r2, [r7, #24]
 800ef3a:	4413      	add	r3, r2
 800ef3c:	697a      	ldr	r2, [r7, #20]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d006      	beq.n	800ef50 <tcp_output_fill_options+0x64>
 800ef42:	4b05      	ldr	r3, [pc, #20]	; (800ef58 <tcp_output_fill_options+0x6c>)
 800ef44:	f240 7275 	movw	r2, #1909	; 0x775
 800ef48:	4906      	ldr	r1, [pc, #24]	; (800ef64 <tcp_output_fill_options+0x78>)
 800ef4a:	4805      	ldr	r0, [pc, #20]	; (800ef60 <tcp_output_fill_options+0x74>)
 800ef4c:	f003 fa04 	bl	8012358 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ef50:	bf00      	nop
 800ef52:	3720      	adds	r7, #32
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}
 800ef58:	08014a24 	.word	0x08014a24
 800ef5c:	08015154 	.word	0x08015154
 800ef60:	08014a78 	.word	0x08014a78
 800ef64:	0801504c 	.word	0x0801504c

0800ef68 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b08a      	sub	sp, #40	; 0x28
 800ef6c:	af04      	add	r7, sp, #16
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	607a      	str	r2, [r7, #4]
 800ef74:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d106      	bne.n	800ef8a <tcp_output_control_segment+0x22>
 800ef7c:	4b1c      	ldr	r3, [pc, #112]	; (800eff0 <tcp_output_control_segment+0x88>)
 800ef7e:	f240 7287 	movw	r2, #1927	; 0x787
 800ef82:	491c      	ldr	r1, [pc, #112]	; (800eff4 <tcp_output_control_segment+0x8c>)
 800ef84:	481c      	ldr	r0, [pc, #112]	; (800eff8 <tcp_output_control_segment+0x90>)
 800ef86:	f003 f9e7 	bl	8012358 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ef8a:	683a      	ldr	r2, [r7, #0]
 800ef8c:	6879      	ldr	r1, [r7, #4]
 800ef8e:	68f8      	ldr	r0, [r7, #12]
 800ef90:	f7fe ff40 	bl	800de14 <tcp_route>
 800ef94:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d102      	bne.n	800efa2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ef9c:	23fc      	movs	r3, #252	; 0xfc
 800ef9e:	75fb      	strb	r3, [r7, #23]
 800efa0:	e01c      	b.n	800efdc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d006      	beq.n	800efb6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	7adb      	ldrb	r3, [r3, #11]
 800efac:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	7a9b      	ldrb	r3, [r3, #10]
 800efb2:	757b      	strb	r3, [r7, #21]
 800efb4:	e003      	b.n	800efbe <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800efb6:	23ff      	movs	r3, #255	; 0xff
 800efb8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800efba:	2300      	movs	r3, #0
 800efbc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800efbe:	7dba      	ldrb	r2, [r7, #22]
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	9302      	str	r3, [sp, #8]
 800efc4:	2306      	movs	r3, #6
 800efc6:	9301      	str	r3, [sp, #4]
 800efc8:	7d7b      	ldrb	r3, [r7, #21]
 800efca:	9300      	str	r3, [sp, #0]
 800efcc:	4613      	mov	r3, r2
 800efce:	683a      	ldr	r2, [r7, #0]
 800efd0:	6879      	ldr	r1, [r7, #4]
 800efd2:	68b8      	ldr	r0, [r7, #8]
 800efd4:	f001 ffa0 	bl	8010f18 <ip4_output_if>
 800efd8:	4603      	mov	r3, r0
 800efda:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800efdc:	68b8      	ldr	r0, [r7, #8]
 800efde:	f7fa fdd9 	bl	8009b94 <pbuf_free>
  return err;
 800efe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3718      	adds	r7, #24
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	08014a24 	.word	0x08014a24
 800eff4:	0801517c 	.word	0x0801517c
 800eff8:	08014a78 	.word	0x08014a78

0800effc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800effc:	b590      	push	{r4, r7, lr}
 800effe:	b08b      	sub	sp, #44	; 0x2c
 800f000:	af04      	add	r7, sp, #16
 800f002:	60f8      	str	r0, [r7, #12]
 800f004:	60b9      	str	r1, [r7, #8]
 800f006:	607a      	str	r2, [r7, #4]
 800f008:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d106      	bne.n	800f01e <tcp_rst+0x22>
 800f010:	4b1f      	ldr	r3, [pc, #124]	; (800f090 <tcp_rst+0x94>)
 800f012:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800f016:	491f      	ldr	r1, [pc, #124]	; (800f094 <tcp_rst+0x98>)
 800f018:	481f      	ldr	r0, [pc, #124]	; (800f098 <tcp_rst+0x9c>)
 800f01a:	f003 f99d 	bl	8012358 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f020:	2b00      	cmp	r3, #0
 800f022:	d106      	bne.n	800f032 <tcp_rst+0x36>
 800f024:	4b1a      	ldr	r3, [pc, #104]	; (800f090 <tcp_rst+0x94>)
 800f026:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800f02a:	491c      	ldr	r1, [pc, #112]	; (800f09c <tcp_rst+0xa0>)
 800f02c:	481a      	ldr	r0, [pc, #104]	; (800f098 <tcp_rst+0x9c>)
 800f02e:	f003 f993 	bl	8012358 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f032:	2300      	movs	r3, #0
 800f034:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f036:	f246 0308 	movw	r3, #24584	; 0x6008
 800f03a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f03c:	7dfb      	ldrb	r3, [r7, #23]
 800f03e:	b29c      	uxth	r4, r3
 800f040:	68b8      	ldr	r0, [r7, #8]
 800f042:	f7f9 f9ca 	bl	80083da <lwip_htonl>
 800f046:	4602      	mov	r2, r0
 800f048:	8abb      	ldrh	r3, [r7, #20]
 800f04a:	9303      	str	r3, [sp, #12]
 800f04c:	2314      	movs	r3, #20
 800f04e:	9302      	str	r3, [sp, #8]
 800f050:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f052:	9301      	str	r3, [sp, #4]
 800f054:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f056:	9300      	str	r3, [sp, #0]
 800f058:	4613      	mov	r3, r2
 800f05a:	2200      	movs	r2, #0
 800f05c:	4621      	mov	r1, r4
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f7ff fe94 	bl	800ed8c <tcp_output_alloc_header_common>
 800f064:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d00c      	beq.n	800f086 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f06c:	7dfb      	ldrb	r3, [r7, #23]
 800f06e:	2200      	movs	r2, #0
 800f070:	6939      	ldr	r1, [r7, #16]
 800f072:	68f8      	ldr	r0, [r7, #12]
 800f074:	f7ff ff3a 	bl	800eeec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f07a:	683a      	ldr	r2, [r7, #0]
 800f07c:	6939      	ldr	r1, [r7, #16]
 800f07e:	68f8      	ldr	r0, [r7, #12]
 800f080:	f7ff ff72 	bl	800ef68 <tcp_output_control_segment>
 800f084:	e000      	b.n	800f088 <tcp_rst+0x8c>
    return;
 800f086:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f088:	371c      	adds	r7, #28
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd90      	pop	{r4, r7, pc}
 800f08e:	bf00      	nop
 800f090:	08014a24 	.word	0x08014a24
 800f094:	080151a8 	.word	0x080151a8
 800f098:	08014a78 	.word	0x08014a78
 800f09c:	080151c4 	.word	0x080151c4

0800f0a0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f0a0:	b590      	push	{r4, r7, lr}
 800f0a2:	b087      	sub	sp, #28
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d106      	bne.n	800f0c4 <tcp_send_empty_ack+0x24>
 800f0b6:	4b28      	ldr	r3, [pc, #160]	; (800f158 <tcp_send_empty_ack+0xb8>)
 800f0b8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800f0bc:	4927      	ldr	r1, [pc, #156]	; (800f15c <tcp_send_empty_ack+0xbc>)
 800f0be:	4828      	ldr	r0, [pc, #160]	; (800f160 <tcp_send_empty_ack+0xc0>)
 800f0c0:	f003 f94a 	bl	8012358 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f0c4:	7dfb      	ldrb	r3, [r7, #23]
 800f0c6:	009b      	lsls	r3, r3, #2
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	f003 0304 	and.w	r3, r3, #4
 800f0ce:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f0d0:	7d7b      	ldrb	r3, [r7, #21]
 800f0d2:	b29c      	uxth	r4, r3
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7f9 f97e 	bl	80083da <lwip_htonl>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	4621      	mov	r1, r4
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7ff fec3 	bl	800ee70 <tcp_output_alloc_header>
 800f0ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d109      	bne.n	800f106 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	8b5b      	ldrh	r3, [r3, #26]
 800f0f6:	f043 0303 	orr.w	r3, r3, #3
 800f0fa:	b29a      	uxth	r2, r3
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f100:	f06f 0301 	mvn.w	r3, #1
 800f104:	e023      	b.n	800f14e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f106:	7dbb      	ldrb	r3, [r7, #22]
 800f108:	7dfa      	ldrb	r2, [r7, #23]
 800f10a:	6939      	ldr	r1, [r7, #16]
 800f10c:	6878      	ldr	r0, [r7, #4]
 800f10e:	f7ff feed 	bl	800eeec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f112:	687a      	ldr	r2, [r7, #4]
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	3304      	adds	r3, #4
 800f118:	6939      	ldr	r1, [r7, #16]
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f7ff ff24 	bl	800ef68 <tcp_output_control_segment>
 800f120:	4603      	mov	r3, r0
 800f122:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d007      	beq.n	800f13c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	8b5b      	ldrh	r3, [r3, #26]
 800f130:	f043 0303 	orr.w	r3, r3, #3
 800f134:	b29a      	uxth	r2, r3
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	835a      	strh	r2, [r3, #26]
 800f13a:	e006      	b.n	800f14a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	8b5b      	ldrh	r3, [r3, #26]
 800f140:	f023 0303 	bic.w	r3, r3, #3
 800f144:	b29a      	uxth	r2, r3
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f14a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f14e:	4618      	mov	r0, r3
 800f150:	371c      	adds	r7, #28
 800f152:	46bd      	mov	sp, r7
 800f154:	bd90      	pop	{r4, r7, pc}
 800f156:	bf00      	nop
 800f158:	08014a24 	.word	0x08014a24
 800f15c:	080151e0 	.word	0x080151e0
 800f160:	08014a78 	.word	0x08014a78

0800f164 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f164:	b590      	push	{r4, r7, lr}
 800f166:	b087      	sub	sp, #28
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f16c:	2300      	movs	r3, #0
 800f16e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d106      	bne.n	800f184 <tcp_keepalive+0x20>
 800f176:	4b18      	ldr	r3, [pc, #96]	; (800f1d8 <tcp_keepalive+0x74>)
 800f178:	f640 0224 	movw	r2, #2084	; 0x824
 800f17c:	4917      	ldr	r1, [pc, #92]	; (800f1dc <tcp_keepalive+0x78>)
 800f17e:	4818      	ldr	r0, [pc, #96]	; (800f1e0 <tcp_keepalive+0x7c>)
 800f180:	f003 f8ea 	bl	8012358 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f184:	7dfb      	ldrb	r3, [r7, #23]
 800f186:	b29c      	uxth	r4, r3
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f18c:	3b01      	subs	r3, #1
 800f18e:	4618      	mov	r0, r3
 800f190:	f7f9 f923 	bl	80083da <lwip_htonl>
 800f194:	4603      	mov	r3, r0
 800f196:	2200      	movs	r2, #0
 800f198:	4621      	mov	r1, r4
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f7ff fe68 	bl	800ee70 <tcp_output_alloc_header>
 800f1a0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d102      	bne.n	800f1ae <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f1a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ac:	e010      	b.n	800f1d0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f1ae:	7dfb      	ldrb	r3, [r7, #23]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	6939      	ldr	r1, [r7, #16]
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f7ff fe99 	bl	800eeec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f1ba:	687a      	ldr	r2, [r7, #4]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	3304      	adds	r3, #4
 800f1c0:	6939      	ldr	r1, [r7, #16]
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f7ff fed0 	bl	800ef68 <tcp_output_control_segment>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f1cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	371c      	adds	r7, #28
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd90      	pop	{r4, r7, pc}
 800f1d8:	08014a24 	.word	0x08014a24
 800f1dc:	08015200 	.word	0x08015200
 800f1e0:	08014a78 	.word	0x08014a78

0800f1e4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f1e4:	b590      	push	{r4, r7, lr}
 800f1e6:	b08b      	sub	sp, #44	; 0x2c
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d106      	bne.n	800f206 <tcp_zero_window_probe+0x22>
 800f1f8:	4b4c      	ldr	r3, [pc, #304]	; (800f32c <tcp_zero_window_probe+0x148>)
 800f1fa:	f640 024f 	movw	r2, #2127	; 0x84f
 800f1fe:	494c      	ldr	r1, [pc, #304]	; (800f330 <tcp_zero_window_probe+0x14c>)
 800f200:	484c      	ldr	r0, [pc, #304]	; (800f334 <tcp_zero_window_probe+0x150>)
 800f202:	f003 f8a9 	bl	8012358 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f20a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f20c:	6a3b      	ldr	r3, [r7, #32]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d101      	bne.n	800f216 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f212:	2300      	movs	r3, #0
 800f214:	e086      	b.n	800f324 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f21c:	2bff      	cmp	r3, #255	; 0xff
 800f21e:	d007      	beq.n	800f230 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f226:	3301      	adds	r3, #1
 800f228:	b2da      	uxtb	r2, r3
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f230:	6a3b      	ldr	r3, [r7, #32]
 800f232:	68db      	ldr	r3, [r3, #12]
 800f234:	899b      	ldrh	r3, [r3, #12]
 800f236:	b29b      	uxth	r3, r3
 800f238:	4618      	mov	r0, r3
 800f23a:	f7f9 f8b9 	bl	80083b0 <lwip_htons>
 800f23e:	4603      	mov	r3, r0
 800f240:	b2db      	uxtb	r3, r3
 800f242:	f003 0301 	and.w	r3, r3, #1
 800f246:	2b00      	cmp	r3, #0
 800f248:	d005      	beq.n	800f256 <tcp_zero_window_probe+0x72>
 800f24a:	6a3b      	ldr	r3, [r7, #32]
 800f24c:	891b      	ldrh	r3, [r3, #8]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d101      	bne.n	800f256 <tcp_zero_window_probe+0x72>
 800f252:	2301      	movs	r3, #1
 800f254:	e000      	b.n	800f258 <tcp_zero_window_probe+0x74>
 800f256:	2300      	movs	r3, #0
 800f258:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f25a:	7ffb      	ldrb	r3, [r7, #31]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	bf0c      	ite	eq
 800f260:	2301      	moveq	r3, #1
 800f262:	2300      	movne	r3, #0
 800f264:	b2db      	uxtb	r3, r3
 800f266:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f26c:	b299      	uxth	r1, r3
 800f26e:	6a3b      	ldr	r3, [r7, #32]
 800f270:	68db      	ldr	r3, [r3, #12]
 800f272:	685b      	ldr	r3, [r3, #4]
 800f274:	8bba      	ldrh	r2, [r7, #28]
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f7ff fdfa 	bl	800ee70 <tcp_output_alloc_header>
 800f27c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f27e:	69bb      	ldr	r3, [r7, #24]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d102      	bne.n	800f28a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f284:	f04f 33ff 	mov.w	r3, #4294967295
 800f288:	e04c      	b.n	800f324 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f28a:	69bb      	ldr	r3, [r7, #24]
 800f28c:	685b      	ldr	r3, [r3, #4]
 800f28e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f290:	7ffb      	ldrb	r3, [r7, #31]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d011      	beq.n	800f2ba <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	899b      	ldrh	r3, [r3, #12]
 800f29a:	b29b      	uxth	r3, r3
 800f29c:	b21b      	sxth	r3, r3
 800f29e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f2a2:	b21c      	sxth	r4, r3
 800f2a4:	2011      	movs	r0, #17
 800f2a6:	f7f9 f883 	bl	80083b0 <lwip_htons>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	b21b      	sxth	r3, r3
 800f2ae:	4323      	orrs	r3, r4
 800f2b0:	b21b      	sxth	r3, r3
 800f2b2:	b29a      	uxth	r2, r3
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	819a      	strh	r2, [r3, #12]
 800f2b8:	e010      	b.n	800f2dc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	3314      	adds	r3, #20
 800f2c0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f2c2:	6a3b      	ldr	r3, [r7, #32]
 800f2c4:	6858      	ldr	r0, [r3, #4]
 800f2c6:	6a3b      	ldr	r3, [r7, #32]
 800f2c8:	685b      	ldr	r3, [r3, #4]
 800f2ca:	891a      	ldrh	r2, [r3, #8]
 800f2cc:	6a3b      	ldr	r3, [r7, #32]
 800f2ce:	891b      	ldrh	r3, [r3, #8]
 800f2d0:	1ad3      	subs	r3, r2, r3
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	6939      	ldr	r1, [r7, #16]
 800f2d8:	f7fa fe52 	bl	8009f80 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f2dc:	6a3b      	ldr	r3, [r7, #32]
 800f2de:	68db      	ldr	r3, [r3, #12]
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7f9 f879 	bl	80083da <lwip_htonl>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	3301      	adds	r3, #1
 800f2ec:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	1ad3      	subs	r3, r2, r3
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	da02      	bge.n	800f300 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	68fa      	ldr	r2, [r7, #12]
 800f2fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f304:	2200      	movs	r2, #0
 800f306:	69b9      	ldr	r1, [r7, #24]
 800f308:	6878      	ldr	r0, [r7, #4]
 800f30a:	f7ff fdef 	bl	800eeec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f30e:	687a      	ldr	r2, [r7, #4]
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	3304      	adds	r3, #4
 800f314:	69b9      	ldr	r1, [r7, #24]
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f7ff fe26 	bl	800ef68 <tcp_output_control_segment>
 800f31c:	4603      	mov	r3, r0
 800f31e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f320:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f324:	4618      	mov	r0, r3
 800f326:	372c      	adds	r7, #44	; 0x2c
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd90      	pop	{r4, r7, pc}
 800f32c:	08014a24 	.word	0x08014a24
 800f330:	0801521c 	.word	0x0801521c
 800f334:	08014a78 	.word	0x08014a78

0800f338 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f340:	f7fa ff0c 	bl	800a15c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f344:	4b0a      	ldr	r3, [pc, #40]	; (800f370 <tcpip_tcp_timer+0x38>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d103      	bne.n	800f354 <tcpip_tcp_timer+0x1c>
 800f34c:	4b09      	ldr	r3, [pc, #36]	; (800f374 <tcpip_tcp_timer+0x3c>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d005      	beq.n	800f360 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f354:	2200      	movs	r2, #0
 800f356:	4908      	ldr	r1, [pc, #32]	; (800f378 <tcpip_tcp_timer+0x40>)
 800f358:	20fa      	movs	r0, #250	; 0xfa
 800f35a:	f000 f8f3 	bl	800f544 <sys_timeout>
 800f35e:	e003      	b.n	800f368 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f360:	4b06      	ldr	r3, [pc, #24]	; (800f37c <tcpip_tcp_timer+0x44>)
 800f362:	2200      	movs	r2, #0
 800f364:	601a      	str	r2, [r3, #0]
  }
}
 800f366:	bf00      	nop
 800f368:	bf00      	nop
 800f36a:	3708      	adds	r7, #8
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}
 800f370:	2000f060 	.word	0x2000f060
 800f374:	2000f064 	.word	0x2000f064
 800f378:	0800f339 	.word	0x0800f339
 800f37c:	2000f0ac 	.word	0x2000f0ac

0800f380 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f384:	4b0a      	ldr	r3, [pc, #40]	; (800f3b0 <tcp_timer_needed+0x30>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d10f      	bne.n	800f3ac <tcp_timer_needed+0x2c>
 800f38c:	4b09      	ldr	r3, [pc, #36]	; (800f3b4 <tcp_timer_needed+0x34>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d103      	bne.n	800f39c <tcp_timer_needed+0x1c>
 800f394:	4b08      	ldr	r3, [pc, #32]	; (800f3b8 <tcp_timer_needed+0x38>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d007      	beq.n	800f3ac <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f39c:	4b04      	ldr	r3, [pc, #16]	; (800f3b0 <tcp_timer_needed+0x30>)
 800f39e:	2201      	movs	r2, #1
 800f3a0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	4905      	ldr	r1, [pc, #20]	; (800f3bc <tcp_timer_needed+0x3c>)
 800f3a6:	20fa      	movs	r0, #250	; 0xfa
 800f3a8:	f000 f8cc 	bl	800f544 <sys_timeout>
  }
}
 800f3ac:	bf00      	nop
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	2000f0ac 	.word	0x2000f0ac
 800f3b4:	2000f060 	.word	0x2000f060
 800f3b8:	2000f064 	.word	0x2000f064
 800f3bc:	0800f339 	.word	0x0800f339

0800f3c0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b086      	sub	sp, #24
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	60b9      	str	r1, [r7, #8]
 800f3ca:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f3cc:	200a      	movs	r0, #10
 800f3ce:	f7f9 fcc7 	bl	8008d60 <memp_malloc>
 800f3d2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d109      	bne.n	800f3ee <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d151      	bne.n	800f484 <sys_timeout_abs+0xc4>
 800f3e0:	4b2a      	ldr	r3, [pc, #168]	; (800f48c <sys_timeout_abs+0xcc>)
 800f3e2:	22be      	movs	r2, #190	; 0xbe
 800f3e4:	492a      	ldr	r1, [pc, #168]	; (800f490 <sys_timeout_abs+0xd0>)
 800f3e6:	482b      	ldr	r0, [pc, #172]	; (800f494 <sys_timeout_abs+0xd4>)
 800f3e8:	f002 ffb6 	bl	8012358 <iprintf>
    return;
 800f3ec:	e04a      	b.n	800f484 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f3ee:	693b      	ldr	r3, [r7, #16]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f3f4:	693b      	ldr	r3, [r7, #16]
 800f3f6:	68ba      	ldr	r2, [r7, #8]
 800f3f8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f3fa:	693b      	ldr	r3, [r7, #16]
 800f3fc:	687a      	ldr	r2, [r7, #4]
 800f3fe:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f400:	693b      	ldr	r3, [r7, #16]
 800f402:	68fa      	ldr	r2, [r7, #12]
 800f404:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f406:	4b24      	ldr	r3, [pc, #144]	; (800f498 <sys_timeout_abs+0xd8>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d103      	bne.n	800f416 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f40e:	4a22      	ldr	r2, [pc, #136]	; (800f498 <sys_timeout_abs+0xd8>)
 800f410:	693b      	ldr	r3, [r7, #16]
 800f412:	6013      	str	r3, [r2, #0]
    return;
 800f414:	e037      	b.n	800f486 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f416:	693b      	ldr	r3, [r7, #16]
 800f418:	685a      	ldr	r2, [r3, #4]
 800f41a:	4b1f      	ldr	r3, [pc, #124]	; (800f498 <sys_timeout_abs+0xd8>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	685b      	ldr	r3, [r3, #4]
 800f420:	1ad3      	subs	r3, r2, r3
 800f422:	0fdb      	lsrs	r3, r3, #31
 800f424:	f003 0301 	and.w	r3, r3, #1
 800f428:	b2db      	uxtb	r3, r3
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d007      	beq.n	800f43e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f42e:	4b1a      	ldr	r3, [pc, #104]	; (800f498 <sys_timeout_abs+0xd8>)
 800f430:	681a      	ldr	r2, [r3, #0]
 800f432:	693b      	ldr	r3, [r7, #16]
 800f434:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f436:	4a18      	ldr	r2, [pc, #96]	; (800f498 <sys_timeout_abs+0xd8>)
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	6013      	str	r3, [r2, #0]
 800f43c:	e023      	b.n	800f486 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f43e:	4b16      	ldr	r3, [pc, #88]	; (800f498 <sys_timeout_abs+0xd8>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	617b      	str	r3, [r7, #20]
 800f444:	e01a      	b.n	800f47c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d00b      	beq.n	800f466 <sys_timeout_abs+0xa6>
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	685a      	ldr	r2, [r3, #4]
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	1ad3      	subs	r3, r2, r3
 800f45a:	0fdb      	lsrs	r3, r3, #31
 800f45c:	f003 0301 	and.w	r3, r3, #1
 800f460:	b2db      	uxtb	r3, r3
 800f462:	2b00      	cmp	r3, #0
 800f464:	d007      	beq.n	800f476 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	681a      	ldr	r2, [r3, #0]
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	693a      	ldr	r2, [r7, #16]
 800f472:	601a      	str	r2, [r3, #0]
        break;
 800f474:	e007      	b.n	800f486 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	617b      	str	r3, [r7, #20]
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d1e1      	bne.n	800f446 <sys_timeout_abs+0x86>
 800f482:	e000      	b.n	800f486 <sys_timeout_abs+0xc6>
    return;
 800f484:	bf00      	nop
      }
    }
  }
}
 800f486:	3718      	adds	r7, #24
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}
 800f48c:	08015240 	.word	0x08015240
 800f490:	08015274 	.word	0x08015274
 800f494:	080152b4 	.word	0x080152b4
 800f498:	2000f0a4 	.word	0x2000f0a4

0800f49c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b086      	sub	sp, #24
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	685b      	ldr	r3, [r3, #4]
 800f4ac:	4798      	blx	r3

  now = sys_now();
 800f4ae:	f7f4 fd85 	bl	8003fbc <sys_now>
 800f4b2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	681a      	ldr	r2, [r3, #0]
 800f4b8:	4b0f      	ldr	r3, [pc, #60]	; (800f4f8 <lwip_cyclic_timer+0x5c>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	4413      	add	r3, r2
 800f4be:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f4c0:	68fa      	ldr	r2, [r7, #12]
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	1ad3      	subs	r3, r2, r3
 800f4c6:	0fdb      	lsrs	r3, r3, #31
 800f4c8:	f003 0301 	and.w	r3, r3, #1
 800f4cc:	b2db      	uxtb	r3, r3
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d009      	beq.n	800f4e6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	681a      	ldr	r2, [r3, #0]
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	4413      	add	r3, r2
 800f4da:	687a      	ldr	r2, [r7, #4]
 800f4dc:	4907      	ldr	r1, [pc, #28]	; (800f4fc <lwip_cyclic_timer+0x60>)
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7ff ff6e 	bl	800f3c0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f4e4:	e004      	b.n	800f4f0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f4e6:	687a      	ldr	r2, [r7, #4]
 800f4e8:	4904      	ldr	r1, [pc, #16]	; (800f4fc <lwip_cyclic_timer+0x60>)
 800f4ea:	68f8      	ldr	r0, [r7, #12]
 800f4ec:	f7ff ff68 	bl	800f3c0 <sys_timeout_abs>
}
 800f4f0:	bf00      	nop
 800f4f2:	3718      	adds	r7, #24
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	2000f0a8 	.word	0x2000f0a8
 800f4fc:	0800f49d 	.word	0x0800f49d

0800f500 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f506:	2301      	movs	r3, #1
 800f508:	607b      	str	r3, [r7, #4]
 800f50a:	e00e      	b.n	800f52a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f50c:	4a0b      	ldr	r2, [pc, #44]	; (800f53c <sys_timeouts_init+0x3c>)
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	00db      	lsls	r3, r3, #3
 800f518:	4a08      	ldr	r2, [pc, #32]	; (800f53c <sys_timeouts_init+0x3c>)
 800f51a:	4413      	add	r3, r2
 800f51c:	461a      	mov	r2, r3
 800f51e:	4908      	ldr	r1, [pc, #32]	; (800f540 <sys_timeouts_init+0x40>)
 800f520:	f000 f810 	bl	800f544 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	3301      	adds	r3, #1
 800f528:	607b      	str	r3, [r7, #4]
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2b02      	cmp	r3, #2
 800f52e:	d9ed      	bls.n	800f50c <sys_timeouts_init+0xc>
  }
}
 800f530:	bf00      	nop
 800f532:	bf00      	nop
 800f534:	3708      	adds	r7, #8
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}
 800f53a:	bf00      	nop
 800f53c:	08015e90 	.word	0x08015e90
 800f540:	0800f49d 	.word	0x0800f49d

0800f544 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b086      	sub	sp, #24
 800f548:	af00      	add	r7, sp, #0
 800f54a:	60f8      	str	r0, [r7, #12]
 800f54c:	60b9      	str	r1, [r7, #8]
 800f54e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f556:	d306      	bcc.n	800f566 <sys_timeout+0x22>
 800f558:	4b0a      	ldr	r3, [pc, #40]	; (800f584 <sys_timeout+0x40>)
 800f55a:	f240 1229 	movw	r2, #297	; 0x129
 800f55e:	490a      	ldr	r1, [pc, #40]	; (800f588 <sys_timeout+0x44>)
 800f560:	480a      	ldr	r0, [pc, #40]	; (800f58c <sys_timeout+0x48>)
 800f562:	f002 fef9 	bl	8012358 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f566:	f7f4 fd29 	bl	8003fbc <sys_now>
 800f56a:	4602      	mov	r2, r0
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	4413      	add	r3, r2
 800f570:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	68b9      	ldr	r1, [r7, #8]
 800f576:	6978      	ldr	r0, [r7, #20]
 800f578:	f7ff ff22 	bl	800f3c0 <sys_timeout_abs>
#endif
}
 800f57c:	bf00      	nop
 800f57e:	3718      	adds	r7, #24
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}
 800f584:	08015240 	.word	0x08015240
 800f588:	080152dc 	.word	0x080152dc
 800f58c:	080152b4 	.word	0x080152b4

0800f590 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b084      	sub	sp, #16
 800f594:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f596:	f7f4 fd11 	bl	8003fbc <sys_now>
 800f59a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800f59c:	4b17      	ldr	r3, [pc, #92]	; (800f5fc <sys_check_timeouts+0x6c>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d022      	beq.n	800f5ee <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	685b      	ldr	r3, [r3, #4]
 800f5ac:	68fa      	ldr	r2, [r7, #12]
 800f5ae:	1ad3      	subs	r3, r2, r3
 800f5b0:	0fdb      	lsrs	r3, r3, #31
 800f5b2:	f003 0301 	and.w	r3, r3, #1
 800f5b6:	b2db      	uxtb	r3, r3
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d11a      	bne.n	800f5f2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	4a0e      	ldr	r2, [pc, #56]	; (800f5fc <sys_check_timeouts+0x6c>)
 800f5c2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	689b      	ldr	r3, [r3, #8]
 800f5c8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	68db      	ldr	r3, [r3, #12]
 800f5ce:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	685b      	ldr	r3, [r3, #4]
 800f5d4:	4a0a      	ldr	r2, [pc, #40]	; (800f600 <sys_check_timeouts+0x70>)
 800f5d6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f5d8:	68b9      	ldr	r1, [r7, #8]
 800f5da:	200a      	movs	r0, #10
 800f5dc:	f7f9 fc36 	bl	8008e4c <memp_free>
    if (handler != NULL) {
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d0da      	beq.n	800f59c <sys_check_timeouts+0xc>
      handler(arg);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6838      	ldr	r0, [r7, #0]
 800f5ea:	4798      	blx	r3
  do {
 800f5ec:	e7d6      	b.n	800f59c <sys_check_timeouts+0xc>
      return;
 800f5ee:	bf00      	nop
 800f5f0:	e000      	b.n	800f5f4 <sys_check_timeouts+0x64>
      return;
 800f5f2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f5f4:	3710      	adds	r7, #16
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
 800f5fa:	bf00      	nop
 800f5fc:	2000f0a4 	.word	0x2000f0a4
 800f600:	2000f0a8 	.word	0x2000f0a8

0800f604 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b082      	sub	sp, #8
 800f608:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800f60a:	4b16      	ldr	r3, [pc, #88]	; (800f664 <sys_timeouts_sleeptime+0x60>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d102      	bne.n	800f618 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800f612:	f04f 33ff 	mov.w	r3, #4294967295
 800f616:	e020      	b.n	800f65a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800f618:	f7f4 fcd0 	bl	8003fbc <sys_now>
 800f61c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800f61e:	4b11      	ldr	r3, [pc, #68]	; (800f664 <sys_timeouts_sleeptime+0x60>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	685a      	ldr	r2, [r3, #4]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	1ad3      	subs	r3, r2, r3
 800f628:	0fdb      	lsrs	r3, r3, #31
 800f62a:	f003 0301 	and.w	r3, r3, #1
 800f62e:	b2db      	uxtb	r3, r3
 800f630:	2b00      	cmp	r3, #0
 800f632:	d001      	beq.n	800f638 <sys_timeouts_sleeptime+0x34>
    return 0;
 800f634:	2300      	movs	r3, #0
 800f636:	e010      	b.n	800f65a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800f638:	4b0a      	ldr	r3, [pc, #40]	; (800f664 <sys_timeouts_sleeptime+0x60>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	685a      	ldr	r2, [r3, #4]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	1ad3      	subs	r3, r2, r3
 800f642:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	2b00      	cmp	r3, #0
 800f648:	da06      	bge.n	800f658 <sys_timeouts_sleeptime+0x54>
 800f64a:	4b07      	ldr	r3, [pc, #28]	; (800f668 <sys_timeouts_sleeptime+0x64>)
 800f64c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800f650:	4906      	ldr	r1, [pc, #24]	; (800f66c <sys_timeouts_sleeptime+0x68>)
 800f652:	4807      	ldr	r0, [pc, #28]	; (800f670 <sys_timeouts_sleeptime+0x6c>)
 800f654:	f002 fe80 	bl	8012358 <iprintf>
    return ret;
 800f658:	683b      	ldr	r3, [r7, #0]
  }
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3708      	adds	r7, #8
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
 800f662:	bf00      	nop
 800f664:	2000f0a4 	.word	0x2000f0a4
 800f668:	08015240 	.word	0x08015240
 800f66c:	08015314 	.word	0x08015314
 800f670:	080152b4 	.word	0x080152b4

0800f674 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f678:	f002 fd6e 	bl	8012158 <rand>
 800f67c:	4603      	mov	r3, r0
 800f67e:	b29b      	uxth	r3, r3
 800f680:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f684:	b29b      	uxth	r3, r3
 800f686:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f68a:	b29a      	uxth	r2, r3
 800f68c:	4b01      	ldr	r3, [pc, #4]	; (800f694 <udp_init+0x20>)
 800f68e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f690:	bf00      	nop
 800f692:	bd80      	pop	{r7, pc}
 800f694:	2000002c 	.word	0x2000002c

0800f698 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b084      	sub	sp, #16
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	60f8      	str	r0, [r7, #12]
 800f6a0:	60b9      	str	r1, [r7, #8]
 800f6a2:	4613      	mov	r3, r2
 800f6a4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d105      	bne.n	800f6b8 <udp_input_local_match+0x20>
 800f6ac:	4b27      	ldr	r3, [pc, #156]	; (800f74c <udp_input_local_match+0xb4>)
 800f6ae:	2287      	movs	r2, #135	; 0x87
 800f6b0:	4927      	ldr	r1, [pc, #156]	; (800f750 <udp_input_local_match+0xb8>)
 800f6b2:	4828      	ldr	r0, [pc, #160]	; (800f754 <udp_input_local_match+0xbc>)
 800f6b4:	f002 fe50 	bl	8012358 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d105      	bne.n	800f6ca <udp_input_local_match+0x32>
 800f6be:	4b23      	ldr	r3, [pc, #140]	; (800f74c <udp_input_local_match+0xb4>)
 800f6c0:	2288      	movs	r2, #136	; 0x88
 800f6c2:	4925      	ldr	r1, [pc, #148]	; (800f758 <udp_input_local_match+0xc0>)
 800f6c4:	4823      	ldr	r0, [pc, #140]	; (800f754 <udp_input_local_match+0xbc>)
 800f6c6:	f002 fe47 	bl	8012358 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	7a1b      	ldrb	r3, [r3, #8]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d00b      	beq.n	800f6ea <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	7a1a      	ldrb	r2, [r3, #8]
 800f6d6:	4b21      	ldr	r3, [pc, #132]	; (800f75c <udp_input_local_match+0xc4>)
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f6de:	3301      	adds	r3, #1
 800f6e0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	d001      	beq.n	800f6ea <udp_input_local_match+0x52>
    return 0;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	e02b      	b.n	800f742 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f6ea:	79fb      	ldrb	r3, [r7, #7]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d018      	beq.n	800f722 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d013      	beq.n	800f71e <udp_input_local_match+0x86>
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d00f      	beq.n	800f71e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f6fe:	4b17      	ldr	r3, [pc, #92]	; (800f75c <udp_input_local_match+0xc4>)
 800f700:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f706:	d00a      	beq.n	800f71e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	681a      	ldr	r2, [r3, #0]
 800f70c:	4b13      	ldr	r3, [pc, #76]	; (800f75c <udp_input_local_match+0xc4>)
 800f70e:	695b      	ldr	r3, [r3, #20]
 800f710:	405a      	eors	r2, r3
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	3308      	adds	r3, #8
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d110      	bne.n	800f740 <udp_input_local_match+0xa8>
          return 1;
 800f71e:	2301      	movs	r3, #1
 800f720:	e00f      	b.n	800f742 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d009      	beq.n	800f73c <udp_input_local_match+0xa4>
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d005      	beq.n	800f73c <udp_input_local_match+0xa4>
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	681a      	ldr	r2, [r3, #0]
 800f734:	4b09      	ldr	r3, [pc, #36]	; (800f75c <udp_input_local_match+0xc4>)
 800f736:	695b      	ldr	r3, [r3, #20]
 800f738:	429a      	cmp	r2, r3
 800f73a:	d101      	bne.n	800f740 <udp_input_local_match+0xa8>
        return 1;
 800f73c:	2301      	movs	r3, #1
 800f73e:	e000      	b.n	800f742 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f740:	2300      	movs	r3, #0
}
 800f742:	4618      	mov	r0, r3
 800f744:	3710      	adds	r7, #16
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
 800f74a:	bf00      	nop
 800f74c:	08015328 	.word	0x08015328
 800f750:	08015358 	.word	0x08015358
 800f754:	0801537c 	.word	0x0801537c
 800f758:	080153a4 	.word	0x080153a4
 800f75c:	20009740 	.word	0x20009740

0800f760 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f760:	b590      	push	{r4, r7, lr}
 800f762:	b08d      	sub	sp, #52	; 0x34
 800f764:	af02      	add	r7, sp, #8
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f76a:	2300      	movs	r3, #0
 800f76c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d105      	bne.n	800f780 <udp_input+0x20>
 800f774:	4b7c      	ldr	r3, [pc, #496]	; (800f968 <udp_input+0x208>)
 800f776:	22cf      	movs	r2, #207	; 0xcf
 800f778:	497c      	ldr	r1, [pc, #496]	; (800f96c <udp_input+0x20c>)
 800f77a:	487d      	ldr	r0, [pc, #500]	; (800f970 <udp_input+0x210>)
 800f77c:	f002 fdec 	bl	8012358 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d105      	bne.n	800f792 <udp_input+0x32>
 800f786:	4b78      	ldr	r3, [pc, #480]	; (800f968 <udp_input+0x208>)
 800f788:	22d0      	movs	r2, #208	; 0xd0
 800f78a:	497a      	ldr	r1, [pc, #488]	; (800f974 <udp_input+0x214>)
 800f78c:	4878      	ldr	r0, [pc, #480]	; (800f970 <udp_input+0x210>)
 800f78e:	f002 fde3 	bl	8012358 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	895b      	ldrh	r3, [r3, #10]
 800f796:	2b07      	cmp	r3, #7
 800f798:	d803      	bhi.n	800f7a2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f7fa f9fa 	bl	8009b94 <pbuf_free>
    goto end;
 800f7a0:	e0de      	b.n	800f960 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	685b      	ldr	r3, [r3, #4]
 800f7a6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f7a8:	4b73      	ldr	r3, [pc, #460]	; (800f978 <udp_input+0x218>)
 800f7aa:	695b      	ldr	r3, [r3, #20]
 800f7ac:	4a72      	ldr	r2, [pc, #456]	; (800f978 <udp_input+0x218>)
 800f7ae:	6812      	ldr	r2, [r2, #0]
 800f7b0:	4611      	mov	r1, r2
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f001 fc88 	bl	80110c8 <ip4_addr_isbroadcast_u32>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	881b      	ldrh	r3, [r3, #0]
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7f8 fdf4 	bl	80083b0 <lwip_htons>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	885b      	ldrh	r3, [r3, #2]
 800f7d0:	b29b      	uxth	r3, r3
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7f8 fdec 	bl	80083b0 <lwip_htons>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f7dc:	2300      	movs	r3, #0
 800f7de:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7e8:	4b64      	ldr	r3, [pc, #400]	; (800f97c <udp_input+0x21c>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	627b      	str	r3, [r7, #36]	; 0x24
 800f7ee:	e054      	b.n	800f89a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f2:	8a5b      	ldrh	r3, [r3, #18]
 800f7f4:	89fa      	ldrh	r2, [r7, #14]
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d14a      	bne.n	800f890 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f7fa:	7cfb      	ldrb	r3, [r7, #19]
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	6839      	ldr	r1, [r7, #0]
 800f800:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f802:	f7ff ff49 	bl	800f698 <udp_input_local_match>
 800f806:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d041      	beq.n	800f890 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f80e:	7c1b      	ldrb	r3, [r3, #16]
 800f810:	f003 0304 	and.w	r3, r3, #4
 800f814:	2b00      	cmp	r3, #0
 800f816:	d11d      	bne.n	800f854 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f818:	69fb      	ldr	r3, [r7, #28]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d102      	bne.n	800f824 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f820:	61fb      	str	r3, [r7, #28]
 800f822:	e017      	b.n	800f854 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f824:	7cfb      	ldrb	r3, [r7, #19]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d014      	beq.n	800f854 <udp_input+0xf4>
 800f82a:	4b53      	ldr	r3, [pc, #332]	; (800f978 <udp_input+0x218>)
 800f82c:	695b      	ldr	r3, [r3, #20]
 800f82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f832:	d10f      	bne.n	800f854 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f834:	69fb      	ldr	r3, [r7, #28]
 800f836:	681a      	ldr	r2, [r3, #0]
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	3304      	adds	r3, #4
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	429a      	cmp	r2, r3
 800f840:	d008      	beq.n	800f854 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f844:	681a      	ldr	r2, [r3, #0]
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	3304      	adds	r3, #4
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d101      	bne.n	800f854 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f852:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f856:	8a9b      	ldrh	r3, [r3, #20]
 800f858:	8a3a      	ldrh	r2, [r7, #16]
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d118      	bne.n	800f890 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f860:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f862:	2b00      	cmp	r3, #0
 800f864:	d005      	beq.n	800f872 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f868:	685a      	ldr	r2, [r3, #4]
 800f86a:	4b43      	ldr	r3, [pc, #268]	; (800f978 <udp_input+0x218>)
 800f86c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f86e:	429a      	cmp	r2, r3
 800f870:	d10e      	bne.n	800f890 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f872:	6a3b      	ldr	r3, [r7, #32]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d014      	beq.n	800f8a2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f87a:	68da      	ldr	r2, [r3, #12]
 800f87c:	6a3b      	ldr	r3, [r7, #32]
 800f87e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f880:	4b3e      	ldr	r3, [pc, #248]	; (800f97c <udp_input+0x21c>)
 800f882:	681a      	ldr	r2, [r3, #0]
 800f884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f886:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f888:	4a3c      	ldr	r2, [pc, #240]	; (800f97c <udp_input+0x21c>)
 800f88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f88e:	e008      	b.n	800f8a2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800f890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f892:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f896:	68db      	ldr	r3, [r3, #12]
 800f898:	627b      	str	r3, [r7, #36]	; 0x24
 800f89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d1a7      	bne.n	800f7f0 <udp_input+0x90>
 800f8a0:	e000      	b.n	800f8a4 <udp_input+0x144>
        break;
 800f8a2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d101      	bne.n	800f8ae <udp_input+0x14e>
    pcb = uncon_pcb;
 800f8aa:	69fb      	ldr	r3, [r7, #28]
 800f8ac:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d002      	beq.n	800f8ba <udp_input+0x15a>
    for_us = 1;
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	76fb      	strb	r3, [r7, #27]
 800f8b8:	e00a      	b.n	800f8d0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	3304      	adds	r3, #4
 800f8be:	681a      	ldr	r2, [r3, #0]
 800f8c0:	4b2d      	ldr	r3, [pc, #180]	; (800f978 <udp_input+0x218>)
 800f8c2:	695b      	ldr	r3, [r3, #20]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	bf0c      	ite	eq
 800f8c8:	2301      	moveq	r3, #1
 800f8ca:	2300      	movne	r3, #0
 800f8cc:	b2db      	uxtb	r3, r3
 800f8ce:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f8d0:	7efb      	ldrb	r3, [r7, #27]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d041      	beq.n	800f95a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f8d6:	2108      	movs	r1, #8
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f7fa f8d5 	bl	8009a88 <pbuf_remove_header>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d00a      	beq.n	800f8fa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f8e4:	4b20      	ldr	r3, [pc, #128]	; (800f968 <udp_input+0x208>)
 800f8e6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f8ea:	4925      	ldr	r1, [pc, #148]	; (800f980 <udp_input+0x220>)
 800f8ec:	4820      	ldr	r0, [pc, #128]	; (800f970 <udp_input+0x210>)
 800f8ee:	f002 fd33 	bl	8012358 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f7fa f94e 	bl	8009b94 <pbuf_free>
      goto end;
 800f8f8:	e032      	b.n	800f960 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d012      	beq.n	800f926 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f902:	699b      	ldr	r3, [r3, #24]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d00a      	beq.n	800f91e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f90a:	699c      	ldr	r4, [r3, #24]
 800f90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f90e:	69d8      	ldr	r0, [r3, #28]
 800f910:	8a3b      	ldrh	r3, [r7, #16]
 800f912:	9300      	str	r3, [sp, #0]
 800f914:	4b1b      	ldr	r3, [pc, #108]	; (800f984 <udp_input+0x224>)
 800f916:	687a      	ldr	r2, [r7, #4]
 800f918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f91a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f91c:	e021      	b.n	800f962 <udp_input+0x202>
        pbuf_free(p);
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f7fa f938 	bl	8009b94 <pbuf_free>
        goto end;
 800f924:	e01c      	b.n	800f960 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f926:	7cfb      	ldrb	r3, [r7, #19]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d112      	bne.n	800f952 <udp_input+0x1f2>
 800f92c:	4b12      	ldr	r3, [pc, #72]	; (800f978 <udp_input+0x218>)
 800f92e:	695b      	ldr	r3, [r3, #20]
 800f930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f934:	2be0      	cmp	r3, #224	; 0xe0
 800f936:	d00c      	beq.n	800f952 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f938:	4b0f      	ldr	r3, [pc, #60]	; (800f978 <udp_input+0x218>)
 800f93a:	899b      	ldrh	r3, [r3, #12]
 800f93c:	3308      	adds	r3, #8
 800f93e:	b29b      	uxth	r3, r3
 800f940:	b21b      	sxth	r3, r3
 800f942:	4619      	mov	r1, r3
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f7fa f912 	bl	8009b6e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f94a:	2103      	movs	r1, #3
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f001 f89b 	bl	8010a88 <icmp_dest_unreach>
      pbuf_free(p);
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f7fa f91e 	bl	8009b94 <pbuf_free>
  return;
 800f958:	e003      	b.n	800f962 <udp_input+0x202>
    pbuf_free(p);
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f7fa f91a 	bl	8009b94 <pbuf_free>
  return;
 800f960:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f962:	372c      	adds	r7, #44	; 0x2c
 800f964:	46bd      	mov	sp, r7
 800f966:	bd90      	pop	{r4, r7, pc}
 800f968:	08015328 	.word	0x08015328
 800f96c:	080153cc 	.word	0x080153cc
 800f970:	0801537c 	.word	0x0801537c
 800f974:	080153e4 	.word	0x080153e4
 800f978:	20009740 	.word	0x20009740
 800f97c:	2000f0b0 	.word	0x2000f0b0
 800f980:	08015400 	.word	0x08015400
 800f984:	20009750 	.word	0x20009750

0800f988 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f988:	b480      	push	{r7}
 800f98a:	b085      	sub	sp, #20
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d01e      	beq.n	800f9d6 <udp_netif_ip_addr_changed+0x4e>
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d01a      	beq.n	800f9d6 <udp_netif_ip_addr_changed+0x4e>
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d017      	beq.n	800f9d6 <udp_netif_ip_addr_changed+0x4e>
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d013      	beq.n	800f9d6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f9ae:	4b0d      	ldr	r3, [pc, #52]	; (800f9e4 <udp_netif_ip_addr_changed+0x5c>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	60fb      	str	r3, [r7, #12]
 800f9b4:	e00c      	b.n	800f9d0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	681a      	ldr	r2, [r3, #0]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d103      	bne.n	800f9ca <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	681a      	ldr	r2, [r3, #0]
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	68db      	ldr	r3, [r3, #12]
 800f9ce:	60fb      	str	r3, [r7, #12]
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d1ef      	bne.n	800f9b6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f9d6:	bf00      	nop
 800f9d8:	3714      	adds	r7, #20
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e0:	4770      	bx	lr
 800f9e2:	bf00      	nop
 800f9e4:	2000f0b0 	.word	0x2000f0b0

0800f9e8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f9f0:	4915      	ldr	r1, [pc, #84]	; (800fa48 <etharp_free_entry+0x60>)
 800f9f2:	687a      	ldr	r2, [r7, #4]
 800f9f4:	4613      	mov	r3, r2
 800f9f6:	005b      	lsls	r3, r3, #1
 800f9f8:	4413      	add	r3, r2
 800f9fa:	00db      	lsls	r3, r3, #3
 800f9fc:	440b      	add	r3, r1
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d013      	beq.n	800fa2c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800fa04:	4910      	ldr	r1, [pc, #64]	; (800fa48 <etharp_free_entry+0x60>)
 800fa06:	687a      	ldr	r2, [r7, #4]
 800fa08:	4613      	mov	r3, r2
 800fa0a:	005b      	lsls	r3, r3, #1
 800fa0c:	4413      	add	r3, r2
 800fa0e:	00db      	lsls	r3, r3, #3
 800fa10:	440b      	add	r3, r1
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7fa f8bd 	bl	8009b94 <pbuf_free>
    arp_table[i].q = NULL;
 800fa1a:	490b      	ldr	r1, [pc, #44]	; (800fa48 <etharp_free_entry+0x60>)
 800fa1c:	687a      	ldr	r2, [r7, #4]
 800fa1e:	4613      	mov	r3, r2
 800fa20:	005b      	lsls	r3, r3, #1
 800fa22:	4413      	add	r3, r2
 800fa24:	00db      	lsls	r3, r3, #3
 800fa26:	440b      	add	r3, r1
 800fa28:	2200      	movs	r2, #0
 800fa2a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800fa2c:	4906      	ldr	r1, [pc, #24]	; (800fa48 <etharp_free_entry+0x60>)
 800fa2e:	687a      	ldr	r2, [r7, #4]
 800fa30:	4613      	mov	r3, r2
 800fa32:	005b      	lsls	r3, r3, #1
 800fa34:	4413      	add	r3, r2
 800fa36:	00db      	lsls	r3, r3, #3
 800fa38:	440b      	add	r3, r1
 800fa3a:	3314      	adds	r3, #20
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800fa40:	bf00      	nop
 800fa42:	3708      	adds	r7, #8
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	2000f0b4 	.word	0x2000f0b4

0800fa4c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b082      	sub	sp, #8
 800fa50:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fa52:	2300      	movs	r3, #0
 800fa54:	607b      	str	r3, [r7, #4]
 800fa56:	e096      	b.n	800fb86 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800fa58:	494f      	ldr	r1, [pc, #316]	; (800fb98 <etharp_tmr+0x14c>)
 800fa5a:	687a      	ldr	r2, [r7, #4]
 800fa5c:	4613      	mov	r3, r2
 800fa5e:	005b      	lsls	r3, r3, #1
 800fa60:	4413      	add	r3, r2
 800fa62:	00db      	lsls	r3, r3, #3
 800fa64:	440b      	add	r3, r1
 800fa66:	3314      	adds	r3, #20
 800fa68:	781b      	ldrb	r3, [r3, #0]
 800fa6a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800fa6c:	78fb      	ldrb	r3, [r7, #3]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	f000 8086 	beq.w	800fb80 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800fa74:	4948      	ldr	r1, [pc, #288]	; (800fb98 <etharp_tmr+0x14c>)
 800fa76:	687a      	ldr	r2, [r7, #4]
 800fa78:	4613      	mov	r3, r2
 800fa7a:	005b      	lsls	r3, r3, #1
 800fa7c:	4413      	add	r3, r2
 800fa7e:	00db      	lsls	r3, r3, #3
 800fa80:	440b      	add	r3, r1
 800fa82:	3312      	adds	r3, #18
 800fa84:	881b      	ldrh	r3, [r3, #0]
 800fa86:	3301      	adds	r3, #1
 800fa88:	b298      	uxth	r0, r3
 800fa8a:	4943      	ldr	r1, [pc, #268]	; (800fb98 <etharp_tmr+0x14c>)
 800fa8c:	687a      	ldr	r2, [r7, #4]
 800fa8e:	4613      	mov	r3, r2
 800fa90:	005b      	lsls	r3, r3, #1
 800fa92:	4413      	add	r3, r2
 800fa94:	00db      	lsls	r3, r3, #3
 800fa96:	440b      	add	r3, r1
 800fa98:	3312      	adds	r3, #18
 800fa9a:	4602      	mov	r2, r0
 800fa9c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fa9e:	493e      	ldr	r1, [pc, #248]	; (800fb98 <etharp_tmr+0x14c>)
 800faa0:	687a      	ldr	r2, [r7, #4]
 800faa2:	4613      	mov	r3, r2
 800faa4:	005b      	lsls	r3, r3, #1
 800faa6:	4413      	add	r3, r2
 800faa8:	00db      	lsls	r3, r3, #3
 800faaa:	440b      	add	r3, r1
 800faac:	3312      	adds	r3, #18
 800faae:	881b      	ldrh	r3, [r3, #0]
 800fab0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800fab4:	d215      	bcs.n	800fae2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fab6:	4938      	ldr	r1, [pc, #224]	; (800fb98 <etharp_tmr+0x14c>)
 800fab8:	687a      	ldr	r2, [r7, #4]
 800faba:	4613      	mov	r3, r2
 800fabc:	005b      	lsls	r3, r3, #1
 800fabe:	4413      	add	r3, r2
 800fac0:	00db      	lsls	r3, r3, #3
 800fac2:	440b      	add	r3, r1
 800fac4:	3314      	adds	r3, #20
 800fac6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fac8:	2b01      	cmp	r3, #1
 800faca:	d10e      	bne.n	800faea <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800facc:	4932      	ldr	r1, [pc, #200]	; (800fb98 <etharp_tmr+0x14c>)
 800face:	687a      	ldr	r2, [r7, #4]
 800fad0:	4613      	mov	r3, r2
 800fad2:	005b      	lsls	r3, r3, #1
 800fad4:	4413      	add	r3, r2
 800fad6:	00db      	lsls	r3, r3, #3
 800fad8:	440b      	add	r3, r1
 800fada:	3312      	adds	r3, #18
 800fadc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fade:	2b04      	cmp	r3, #4
 800fae0:	d903      	bls.n	800faea <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f7ff ff80 	bl	800f9e8 <etharp_free_entry>
 800fae8:	e04a      	b.n	800fb80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800faea:	492b      	ldr	r1, [pc, #172]	; (800fb98 <etharp_tmr+0x14c>)
 800faec:	687a      	ldr	r2, [r7, #4]
 800faee:	4613      	mov	r3, r2
 800faf0:	005b      	lsls	r3, r3, #1
 800faf2:	4413      	add	r3, r2
 800faf4:	00db      	lsls	r3, r3, #3
 800faf6:	440b      	add	r3, r1
 800faf8:	3314      	adds	r3, #20
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	2b03      	cmp	r3, #3
 800fafe:	d10a      	bne.n	800fb16 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800fb00:	4925      	ldr	r1, [pc, #148]	; (800fb98 <etharp_tmr+0x14c>)
 800fb02:	687a      	ldr	r2, [r7, #4]
 800fb04:	4613      	mov	r3, r2
 800fb06:	005b      	lsls	r3, r3, #1
 800fb08:	4413      	add	r3, r2
 800fb0a:	00db      	lsls	r3, r3, #3
 800fb0c:	440b      	add	r3, r1
 800fb0e:	3314      	adds	r3, #20
 800fb10:	2204      	movs	r2, #4
 800fb12:	701a      	strb	r2, [r3, #0]
 800fb14:	e034      	b.n	800fb80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800fb16:	4920      	ldr	r1, [pc, #128]	; (800fb98 <etharp_tmr+0x14c>)
 800fb18:	687a      	ldr	r2, [r7, #4]
 800fb1a:	4613      	mov	r3, r2
 800fb1c:	005b      	lsls	r3, r3, #1
 800fb1e:	4413      	add	r3, r2
 800fb20:	00db      	lsls	r3, r3, #3
 800fb22:	440b      	add	r3, r1
 800fb24:	3314      	adds	r3, #20
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	2b04      	cmp	r3, #4
 800fb2a:	d10a      	bne.n	800fb42 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800fb2c:	491a      	ldr	r1, [pc, #104]	; (800fb98 <etharp_tmr+0x14c>)
 800fb2e:	687a      	ldr	r2, [r7, #4]
 800fb30:	4613      	mov	r3, r2
 800fb32:	005b      	lsls	r3, r3, #1
 800fb34:	4413      	add	r3, r2
 800fb36:	00db      	lsls	r3, r3, #3
 800fb38:	440b      	add	r3, r1
 800fb3a:	3314      	adds	r3, #20
 800fb3c:	2202      	movs	r2, #2
 800fb3e:	701a      	strb	r2, [r3, #0]
 800fb40:	e01e      	b.n	800fb80 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fb42:	4915      	ldr	r1, [pc, #84]	; (800fb98 <etharp_tmr+0x14c>)
 800fb44:	687a      	ldr	r2, [r7, #4]
 800fb46:	4613      	mov	r3, r2
 800fb48:	005b      	lsls	r3, r3, #1
 800fb4a:	4413      	add	r3, r2
 800fb4c:	00db      	lsls	r3, r3, #3
 800fb4e:	440b      	add	r3, r1
 800fb50:	3314      	adds	r3, #20
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	2b01      	cmp	r3, #1
 800fb56:	d113      	bne.n	800fb80 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800fb58:	490f      	ldr	r1, [pc, #60]	; (800fb98 <etharp_tmr+0x14c>)
 800fb5a:	687a      	ldr	r2, [r7, #4]
 800fb5c:	4613      	mov	r3, r2
 800fb5e:	005b      	lsls	r3, r3, #1
 800fb60:	4413      	add	r3, r2
 800fb62:	00db      	lsls	r3, r3, #3
 800fb64:	440b      	add	r3, r1
 800fb66:	3308      	adds	r3, #8
 800fb68:	6818      	ldr	r0, [r3, #0]
 800fb6a:	687a      	ldr	r2, [r7, #4]
 800fb6c:	4613      	mov	r3, r2
 800fb6e:	005b      	lsls	r3, r3, #1
 800fb70:	4413      	add	r3, r2
 800fb72:	00db      	lsls	r3, r3, #3
 800fb74:	4a08      	ldr	r2, [pc, #32]	; (800fb98 <etharp_tmr+0x14c>)
 800fb76:	4413      	add	r3, r2
 800fb78:	3304      	adds	r3, #4
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	f000 fe6e 	bl	801085c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	3301      	adds	r3, #1
 800fb84:	607b      	str	r3, [r7, #4]
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2b09      	cmp	r3, #9
 800fb8a:	f77f af65 	ble.w	800fa58 <etharp_tmr+0xc>
      }
    }
  }
}
 800fb8e:	bf00      	nop
 800fb90:	bf00      	nop
 800fb92:	3708      	adds	r7, #8
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}
 800fb98:	2000f0b4 	.word	0x2000f0b4

0800fb9c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b08a      	sub	sp, #40	; 0x28
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	60f8      	str	r0, [r7, #12]
 800fba4:	460b      	mov	r3, r1
 800fba6:	607a      	str	r2, [r7, #4]
 800fba8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800fbaa:	230a      	movs	r3, #10
 800fbac:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fbae:	230a      	movs	r3, #10
 800fbb0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800fbb2:	230a      	movs	r3, #10
 800fbb4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800fbba:	230a      	movs	r3, #10
 800fbbc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	83bb      	strh	r3, [r7, #28]
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	837b      	strh	r3, [r7, #26]
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fbca:	2300      	movs	r3, #0
 800fbcc:	843b      	strh	r3, [r7, #32]
 800fbce:	e0ae      	b.n	800fd2e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800fbd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fbd4:	49a6      	ldr	r1, [pc, #664]	; (800fe70 <etharp_find_entry+0x2d4>)
 800fbd6:	4613      	mov	r3, r2
 800fbd8:	005b      	lsls	r3, r3, #1
 800fbda:	4413      	add	r3, r2
 800fbdc:	00db      	lsls	r3, r3, #3
 800fbde:	440b      	add	r3, r1
 800fbe0:	3314      	adds	r3, #20
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800fbe6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fbea:	2b0a      	cmp	r3, #10
 800fbec:	d105      	bne.n	800fbfa <etharp_find_entry+0x5e>
 800fbee:	7dfb      	ldrb	r3, [r7, #23]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d102      	bne.n	800fbfa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800fbf4:	8c3b      	ldrh	r3, [r7, #32]
 800fbf6:	847b      	strh	r3, [r7, #34]	; 0x22
 800fbf8:	e095      	b.n	800fd26 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800fbfa:	7dfb      	ldrb	r3, [r7, #23]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	f000 8092 	beq.w	800fd26 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800fc02:	7dfb      	ldrb	r3, [r7, #23]
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	d009      	beq.n	800fc1c <etharp_find_entry+0x80>
 800fc08:	7dfb      	ldrb	r3, [r7, #23]
 800fc0a:	2b01      	cmp	r3, #1
 800fc0c:	d806      	bhi.n	800fc1c <etharp_find_entry+0x80>
 800fc0e:	4b99      	ldr	r3, [pc, #612]	; (800fe74 <etharp_find_entry+0x2d8>)
 800fc10:	f240 1223 	movw	r2, #291	; 0x123
 800fc14:	4998      	ldr	r1, [pc, #608]	; (800fe78 <etharp_find_entry+0x2dc>)
 800fc16:	4899      	ldr	r0, [pc, #612]	; (800fe7c <etharp_find_entry+0x2e0>)
 800fc18:	f002 fb9e 	bl	8012358 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d020      	beq.n	800fc64 <etharp_find_entry+0xc8>
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	6819      	ldr	r1, [r3, #0]
 800fc26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc2a:	4891      	ldr	r0, [pc, #580]	; (800fe70 <etharp_find_entry+0x2d4>)
 800fc2c:	4613      	mov	r3, r2
 800fc2e:	005b      	lsls	r3, r3, #1
 800fc30:	4413      	add	r3, r2
 800fc32:	00db      	lsls	r3, r3, #3
 800fc34:	4403      	add	r3, r0
 800fc36:	3304      	adds	r3, #4
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	4299      	cmp	r1, r3
 800fc3c:	d112      	bne.n	800fc64 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d00c      	beq.n	800fc5e <etharp_find_entry+0xc2>
 800fc44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc48:	4989      	ldr	r1, [pc, #548]	; (800fe70 <etharp_find_entry+0x2d4>)
 800fc4a:	4613      	mov	r3, r2
 800fc4c:	005b      	lsls	r3, r3, #1
 800fc4e:	4413      	add	r3, r2
 800fc50:	00db      	lsls	r3, r3, #3
 800fc52:	440b      	add	r3, r1
 800fc54:	3308      	adds	r3, #8
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	687a      	ldr	r2, [r7, #4]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d102      	bne.n	800fc64 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800fc5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fc62:	e100      	b.n	800fe66 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800fc64:	7dfb      	ldrb	r3, [r7, #23]
 800fc66:	2b01      	cmp	r3, #1
 800fc68:	d140      	bne.n	800fcec <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800fc6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc6e:	4980      	ldr	r1, [pc, #512]	; (800fe70 <etharp_find_entry+0x2d4>)
 800fc70:	4613      	mov	r3, r2
 800fc72:	005b      	lsls	r3, r3, #1
 800fc74:	4413      	add	r3, r2
 800fc76:	00db      	lsls	r3, r3, #3
 800fc78:	440b      	add	r3, r1
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d01a      	beq.n	800fcb6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800fc80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc84:	497a      	ldr	r1, [pc, #488]	; (800fe70 <etharp_find_entry+0x2d4>)
 800fc86:	4613      	mov	r3, r2
 800fc88:	005b      	lsls	r3, r3, #1
 800fc8a:	4413      	add	r3, r2
 800fc8c:	00db      	lsls	r3, r3, #3
 800fc8e:	440b      	add	r3, r1
 800fc90:	3312      	adds	r3, #18
 800fc92:	881b      	ldrh	r3, [r3, #0]
 800fc94:	8bba      	ldrh	r2, [r7, #28]
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d845      	bhi.n	800fd26 <etharp_find_entry+0x18a>
            old_queue = i;
 800fc9a:	8c3b      	ldrh	r3, [r7, #32]
 800fc9c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800fc9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fca2:	4973      	ldr	r1, [pc, #460]	; (800fe70 <etharp_find_entry+0x2d4>)
 800fca4:	4613      	mov	r3, r2
 800fca6:	005b      	lsls	r3, r3, #1
 800fca8:	4413      	add	r3, r2
 800fcaa:	00db      	lsls	r3, r3, #3
 800fcac:	440b      	add	r3, r1
 800fcae:	3312      	adds	r3, #18
 800fcb0:	881b      	ldrh	r3, [r3, #0]
 800fcb2:	83bb      	strh	r3, [r7, #28]
 800fcb4:	e037      	b.n	800fd26 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800fcb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fcba:	496d      	ldr	r1, [pc, #436]	; (800fe70 <etharp_find_entry+0x2d4>)
 800fcbc:	4613      	mov	r3, r2
 800fcbe:	005b      	lsls	r3, r3, #1
 800fcc0:	4413      	add	r3, r2
 800fcc2:	00db      	lsls	r3, r3, #3
 800fcc4:	440b      	add	r3, r1
 800fcc6:	3312      	adds	r3, #18
 800fcc8:	881b      	ldrh	r3, [r3, #0]
 800fcca:	8b7a      	ldrh	r2, [r7, #26]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d82a      	bhi.n	800fd26 <etharp_find_entry+0x18a>
            old_pending = i;
 800fcd0:	8c3b      	ldrh	r3, [r7, #32]
 800fcd2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800fcd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fcd8:	4965      	ldr	r1, [pc, #404]	; (800fe70 <etharp_find_entry+0x2d4>)
 800fcda:	4613      	mov	r3, r2
 800fcdc:	005b      	lsls	r3, r3, #1
 800fcde:	4413      	add	r3, r2
 800fce0:	00db      	lsls	r3, r3, #3
 800fce2:	440b      	add	r3, r1
 800fce4:	3312      	adds	r3, #18
 800fce6:	881b      	ldrh	r3, [r3, #0]
 800fce8:	837b      	strh	r3, [r7, #26]
 800fcea:	e01c      	b.n	800fd26 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800fcec:	7dfb      	ldrb	r3, [r7, #23]
 800fcee:	2b01      	cmp	r3, #1
 800fcf0:	d919      	bls.n	800fd26 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800fcf2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fcf6:	495e      	ldr	r1, [pc, #376]	; (800fe70 <etharp_find_entry+0x2d4>)
 800fcf8:	4613      	mov	r3, r2
 800fcfa:	005b      	lsls	r3, r3, #1
 800fcfc:	4413      	add	r3, r2
 800fcfe:	00db      	lsls	r3, r3, #3
 800fd00:	440b      	add	r3, r1
 800fd02:	3312      	adds	r3, #18
 800fd04:	881b      	ldrh	r3, [r3, #0]
 800fd06:	8b3a      	ldrh	r2, [r7, #24]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d80c      	bhi.n	800fd26 <etharp_find_entry+0x18a>
            old_stable = i;
 800fd0c:	8c3b      	ldrh	r3, [r7, #32]
 800fd0e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800fd10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd14:	4956      	ldr	r1, [pc, #344]	; (800fe70 <etharp_find_entry+0x2d4>)
 800fd16:	4613      	mov	r3, r2
 800fd18:	005b      	lsls	r3, r3, #1
 800fd1a:	4413      	add	r3, r2
 800fd1c:	00db      	lsls	r3, r3, #3
 800fd1e:	440b      	add	r3, r1
 800fd20:	3312      	adds	r3, #18
 800fd22:	881b      	ldrh	r3, [r3, #0]
 800fd24:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fd26:	8c3b      	ldrh	r3, [r7, #32]
 800fd28:	3301      	adds	r3, #1
 800fd2a:	b29b      	uxth	r3, r3
 800fd2c:	843b      	strh	r3, [r7, #32]
 800fd2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fd32:	2b09      	cmp	r3, #9
 800fd34:	f77f af4c 	ble.w	800fbd0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800fd38:	7afb      	ldrb	r3, [r7, #11]
 800fd3a:	f003 0302 	and.w	r3, r3, #2
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d108      	bne.n	800fd54 <etharp_find_entry+0x1b8>
 800fd42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fd46:	2b0a      	cmp	r3, #10
 800fd48:	d107      	bne.n	800fd5a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800fd4a:	7afb      	ldrb	r3, [r7, #11]
 800fd4c:	f003 0301 	and.w	r3, r3, #1
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d102      	bne.n	800fd5a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800fd54:	f04f 33ff 	mov.w	r3, #4294967295
 800fd58:	e085      	b.n	800fe66 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800fd5a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fd5e:	2b09      	cmp	r3, #9
 800fd60:	dc02      	bgt.n	800fd68 <etharp_find_entry+0x1cc>
    i = empty;
 800fd62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd64:	843b      	strh	r3, [r7, #32]
 800fd66:	e039      	b.n	800fddc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800fd68:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fd6c:	2b09      	cmp	r3, #9
 800fd6e:	dc14      	bgt.n	800fd9a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800fd70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd72:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800fd74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd78:	493d      	ldr	r1, [pc, #244]	; (800fe70 <etharp_find_entry+0x2d4>)
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	005b      	lsls	r3, r3, #1
 800fd7e:	4413      	add	r3, r2
 800fd80:	00db      	lsls	r3, r3, #3
 800fd82:	440b      	add	r3, r1
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d018      	beq.n	800fdbc <etharp_find_entry+0x220>
 800fd8a:	4b3a      	ldr	r3, [pc, #232]	; (800fe74 <etharp_find_entry+0x2d8>)
 800fd8c:	f240 126d 	movw	r2, #365	; 0x16d
 800fd90:	493b      	ldr	r1, [pc, #236]	; (800fe80 <etharp_find_entry+0x2e4>)
 800fd92:	483a      	ldr	r0, [pc, #232]	; (800fe7c <etharp_find_entry+0x2e0>)
 800fd94:	f002 fae0 	bl	8012358 <iprintf>
 800fd98:	e010      	b.n	800fdbc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800fd9a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fd9e:	2b09      	cmp	r3, #9
 800fda0:	dc02      	bgt.n	800fda8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800fda2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fda4:	843b      	strh	r3, [r7, #32]
 800fda6:	e009      	b.n	800fdbc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800fda8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800fdac:	2b09      	cmp	r3, #9
 800fdae:	dc02      	bgt.n	800fdb6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800fdb0:	8bfb      	ldrh	r3, [r7, #30]
 800fdb2:	843b      	strh	r3, [r7, #32]
 800fdb4:	e002      	b.n	800fdbc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800fdb6:	f04f 33ff 	mov.w	r3, #4294967295
 800fdba:	e054      	b.n	800fe66 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fdbc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fdc0:	2b09      	cmp	r3, #9
 800fdc2:	dd06      	ble.n	800fdd2 <etharp_find_entry+0x236>
 800fdc4:	4b2b      	ldr	r3, [pc, #172]	; (800fe74 <etharp_find_entry+0x2d8>)
 800fdc6:	f240 127f 	movw	r2, #383	; 0x17f
 800fdca:	492e      	ldr	r1, [pc, #184]	; (800fe84 <etharp_find_entry+0x2e8>)
 800fdcc:	482b      	ldr	r0, [pc, #172]	; (800fe7c <etharp_find_entry+0x2e0>)
 800fdce:	f002 fac3 	bl	8012358 <iprintf>
    etharp_free_entry(i);
 800fdd2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7ff fe06 	bl	800f9e8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fddc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fde0:	2b09      	cmp	r3, #9
 800fde2:	dd06      	ble.n	800fdf2 <etharp_find_entry+0x256>
 800fde4:	4b23      	ldr	r3, [pc, #140]	; (800fe74 <etharp_find_entry+0x2d8>)
 800fde6:	f240 1283 	movw	r2, #387	; 0x183
 800fdea:	4926      	ldr	r1, [pc, #152]	; (800fe84 <etharp_find_entry+0x2e8>)
 800fdec:	4823      	ldr	r0, [pc, #140]	; (800fe7c <etharp_find_entry+0x2e0>)
 800fdee:	f002 fab3 	bl	8012358 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800fdf2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fdf6:	491e      	ldr	r1, [pc, #120]	; (800fe70 <etharp_find_entry+0x2d4>)
 800fdf8:	4613      	mov	r3, r2
 800fdfa:	005b      	lsls	r3, r3, #1
 800fdfc:	4413      	add	r3, r2
 800fdfe:	00db      	lsls	r3, r3, #3
 800fe00:	440b      	add	r3, r1
 800fe02:	3314      	adds	r3, #20
 800fe04:	781b      	ldrb	r3, [r3, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d006      	beq.n	800fe18 <etharp_find_entry+0x27c>
 800fe0a:	4b1a      	ldr	r3, [pc, #104]	; (800fe74 <etharp_find_entry+0x2d8>)
 800fe0c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800fe10:	491d      	ldr	r1, [pc, #116]	; (800fe88 <etharp_find_entry+0x2ec>)
 800fe12:	481a      	ldr	r0, [pc, #104]	; (800fe7c <etharp_find_entry+0x2e0>)
 800fe14:	f002 faa0 	bl	8012358 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d00b      	beq.n	800fe36 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800fe1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	6819      	ldr	r1, [r3, #0]
 800fe26:	4812      	ldr	r0, [pc, #72]	; (800fe70 <etharp_find_entry+0x2d4>)
 800fe28:	4613      	mov	r3, r2
 800fe2a:	005b      	lsls	r3, r3, #1
 800fe2c:	4413      	add	r3, r2
 800fe2e:	00db      	lsls	r3, r3, #3
 800fe30:	4403      	add	r3, r0
 800fe32:	3304      	adds	r3, #4
 800fe34:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800fe36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fe3a:	490d      	ldr	r1, [pc, #52]	; (800fe70 <etharp_find_entry+0x2d4>)
 800fe3c:	4613      	mov	r3, r2
 800fe3e:	005b      	lsls	r3, r3, #1
 800fe40:	4413      	add	r3, r2
 800fe42:	00db      	lsls	r3, r3, #3
 800fe44:	440b      	add	r3, r1
 800fe46:	3312      	adds	r3, #18
 800fe48:	2200      	movs	r2, #0
 800fe4a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800fe4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fe50:	4907      	ldr	r1, [pc, #28]	; (800fe70 <etharp_find_entry+0x2d4>)
 800fe52:	4613      	mov	r3, r2
 800fe54:	005b      	lsls	r3, r3, #1
 800fe56:	4413      	add	r3, r2
 800fe58:	00db      	lsls	r3, r3, #3
 800fe5a:	440b      	add	r3, r1
 800fe5c:	3308      	adds	r3, #8
 800fe5e:	687a      	ldr	r2, [r7, #4]
 800fe60:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800fe62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3728      	adds	r7, #40	; 0x28
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	2000f0b4 	.word	0x2000f0b4
 800fe74:	0801568c 	.word	0x0801568c
 800fe78:	080156c4 	.word	0x080156c4
 800fe7c:	08015704 	.word	0x08015704
 800fe80:	0801572c 	.word	0x0801572c
 800fe84:	08015744 	.word	0x08015744
 800fe88:	08015758 	.word	0x08015758

0800fe8c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b088      	sub	sp, #32
 800fe90:	af02      	add	r7, sp, #8
 800fe92:	60f8      	str	r0, [r7, #12]
 800fe94:	60b9      	str	r1, [r7, #8]
 800fe96:	607a      	str	r2, [r7, #4]
 800fe98:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fea0:	2b06      	cmp	r3, #6
 800fea2:	d006      	beq.n	800feb2 <etharp_update_arp_entry+0x26>
 800fea4:	4b48      	ldr	r3, [pc, #288]	; (800ffc8 <etharp_update_arp_entry+0x13c>)
 800fea6:	f240 12a9 	movw	r2, #425	; 0x1a9
 800feaa:	4948      	ldr	r1, [pc, #288]	; (800ffcc <etharp_update_arp_entry+0x140>)
 800feac:	4848      	ldr	r0, [pc, #288]	; (800ffd0 <etharp_update_arp_entry+0x144>)
 800feae:	f002 fa53 	bl	8012358 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d012      	beq.n	800fede <etharp_update_arp_entry+0x52>
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d00e      	beq.n	800fede <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	68f9      	ldr	r1, [r7, #12]
 800fec6:	4618      	mov	r0, r3
 800fec8:	f001 f8fe 	bl	80110c8 <ip4_addr_isbroadcast_u32>
 800fecc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d105      	bne.n	800fede <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800feda:	2be0      	cmp	r3, #224	; 0xe0
 800fedc:	d102      	bne.n	800fee4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fede:	f06f 030f 	mvn.w	r3, #15
 800fee2:	e06c      	b.n	800ffbe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800fee4:	78fb      	ldrb	r3, [r7, #3]
 800fee6:	68fa      	ldr	r2, [r7, #12]
 800fee8:	4619      	mov	r1, r3
 800feea:	68b8      	ldr	r0, [r7, #8]
 800feec:	f7ff fe56 	bl	800fb9c <etharp_find_entry>
 800fef0:	4603      	mov	r3, r0
 800fef2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800fef4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	da02      	bge.n	800ff02 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800fefc:	8afb      	ldrh	r3, [r7, #22]
 800fefe:	b25b      	sxtb	r3, r3
 800ff00:	e05d      	b.n	800ffbe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ff02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ff06:	4933      	ldr	r1, [pc, #204]	; (800ffd4 <etharp_update_arp_entry+0x148>)
 800ff08:	4613      	mov	r3, r2
 800ff0a:	005b      	lsls	r3, r3, #1
 800ff0c:	4413      	add	r3, r2
 800ff0e:	00db      	lsls	r3, r3, #3
 800ff10:	440b      	add	r3, r1
 800ff12:	3314      	adds	r3, #20
 800ff14:	2202      	movs	r2, #2
 800ff16:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ff18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ff1c:	492d      	ldr	r1, [pc, #180]	; (800ffd4 <etharp_update_arp_entry+0x148>)
 800ff1e:	4613      	mov	r3, r2
 800ff20:	005b      	lsls	r3, r3, #1
 800ff22:	4413      	add	r3, r2
 800ff24:	00db      	lsls	r3, r3, #3
 800ff26:	440b      	add	r3, r1
 800ff28:	3308      	adds	r3, #8
 800ff2a:	68fa      	ldr	r2, [r7, #12]
 800ff2c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ff2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ff32:	4613      	mov	r3, r2
 800ff34:	005b      	lsls	r3, r3, #1
 800ff36:	4413      	add	r3, r2
 800ff38:	00db      	lsls	r3, r3, #3
 800ff3a:	3308      	adds	r3, #8
 800ff3c:	4a25      	ldr	r2, [pc, #148]	; (800ffd4 <etharp_update_arp_entry+0x148>)
 800ff3e:	4413      	add	r3, r2
 800ff40:	3304      	adds	r3, #4
 800ff42:	2206      	movs	r2, #6
 800ff44:	6879      	ldr	r1, [r7, #4]
 800ff46:	4618      	mov	r0, r3
 800ff48:	f002 fb37 	bl	80125ba <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ff4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ff50:	4920      	ldr	r1, [pc, #128]	; (800ffd4 <etharp_update_arp_entry+0x148>)
 800ff52:	4613      	mov	r3, r2
 800ff54:	005b      	lsls	r3, r3, #1
 800ff56:	4413      	add	r3, r2
 800ff58:	00db      	lsls	r3, r3, #3
 800ff5a:	440b      	add	r3, r1
 800ff5c:	3312      	adds	r3, #18
 800ff5e:	2200      	movs	r2, #0
 800ff60:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ff62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ff66:	491b      	ldr	r1, [pc, #108]	; (800ffd4 <etharp_update_arp_entry+0x148>)
 800ff68:	4613      	mov	r3, r2
 800ff6a:	005b      	lsls	r3, r3, #1
 800ff6c:	4413      	add	r3, r2
 800ff6e:	00db      	lsls	r3, r3, #3
 800ff70:	440b      	add	r3, r1
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d021      	beq.n	800ffbc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ff78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ff7c:	4915      	ldr	r1, [pc, #84]	; (800ffd4 <etharp_update_arp_entry+0x148>)
 800ff7e:	4613      	mov	r3, r2
 800ff80:	005b      	lsls	r3, r3, #1
 800ff82:	4413      	add	r3, r2
 800ff84:	00db      	lsls	r3, r3, #3
 800ff86:	440b      	add	r3, r1
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ff8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ff90:	4910      	ldr	r1, [pc, #64]	; (800ffd4 <etharp_update_arp_entry+0x148>)
 800ff92:	4613      	mov	r3, r2
 800ff94:	005b      	lsls	r3, r3, #1
 800ff96:	4413      	add	r3, r2
 800ff98:	00db      	lsls	r3, r3, #3
 800ff9a:	440b      	add	r3, r1
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ffa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ffaa:	9300      	str	r3, [sp, #0]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6939      	ldr	r1, [r7, #16]
 800ffb0:	68f8      	ldr	r0, [r7, #12]
 800ffb2:	f001 ff97 	bl	8011ee4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ffb6:	6938      	ldr	r0, [r7, #16]
 800ffb8:	f7f9 fdec 	bl	8009b94 <pbuf_free>
  }
  return ERR_OK;
 800ffbc:	2300      	movs	r3, #0
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3718      	adds	r7, #24
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	0801568c 	.word	0x0801568c
 800ffcc:	08015784 	.word	0x08015784
 800ffd0:	08015704 	.word	0x08015704
 800ffd4:	2000f0b4 	.word	0x2000f0b4

0800ffd8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b084      	sub	sp, #16
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	60fb      	str	r3, [r7, #12]
 800ffe4:	e01e      	b.n	8010024 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800ffe6:	4913      	ldr	r1, [pc, #76]	; (8010034 <etharp_cleanup_netif+0x5c>)
 800ffe8:	68fa      	ldr	r2, [r7, #12]
 800ffea:	4613      	mov	r3, r2
 800ffec:	005b      	lsls	r3, r3, #1
 800ffee:	4413      	add	r3, r2
 800fff0:	00db      	lsls	r3, r3, #3
 800fff2:	440b      	add	r3, r1
 800fff4:	3314      	adds	r3, #20
 800fff6:	781b      	ldrb	r3, [r3, #0]
 800fff8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800fffa:	7afb      	ldrb	r3, [r7, #11]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d00e      	beq.n	801001e <etharp_cleanup_netif+0x46>
 8010000:	490c      	ldr	r1, [pc, #48]	; (8010034 <etharp_cleanup_netif+0x5c>)
 8010002:	68fa      	ldr	r2, [r7, #12]
 8010004:	4613      	mov	r3, r2
 8010006:	005b      	lsls	r3, r3, #1
 8010008:	4413      	add	r3, r2
 801000a:	00db      	lsls	r3, r3, #3
 801000c:	440b      	add	r3, r1
 801000e:	3308      	adds	r3, #8
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	687a      	ldr	r2, [r7, #4]
 8010014:	429a      	cmp	r2, r3
 8010016:	d102      	bne.n	801001e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010018:	68f8      	ldr	r0, [r7, #12]
 801001a:	f7ff fce5 	bl	800f9e8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	3301      	adds	r3, #1
 8010022:	60fb      	str	r3, [r7, #12]
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	2b09      	cmp	r3, #9
 8010028:	dddd      	ble.n	800ffe6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801002a:	bf00      	nop
 801002c:	bf00      	nop
 801002e:	3710      	adds	r7, #16
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}
 8010034:	2000f0b4 	.word	0x2000f0b4

08010038 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010038:	b5b0      	push	{r4, r5, r7, lr}
 801003a:	b08a      	sub	sp, #40	; 0x28
 801003c:	af04      	add	r7, sp, #16
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d107      	bne.n	8010058 <etharp_input+0x20>
 8010048:	4b3d      	ldr	r3, [pc, #244]	; (8010140 <etharp_input+0x108>)
 801004a:	f240 228a 	movw	r2, #650	; 0x28a
 801004e:	493d      	ldr	r1, [pc, #244]	; (8010144 <etharp_input+0x10c>)
 8010050:	483d      	ldr	r0, [pc, #244]	; (8010148 <etharp_input+0x110>)
 8010052:	f002 f981 	bl	8012358 <iprintf>
 8010056:	e06f      	b.n	8010138 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	685b      	ldr	r3, [r3, #4]
 801005c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	881b      	ldrh	r3, [r3, #0]
 8010062:	b29b      	uxth	r3, r3
 8010064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010068:	d10c      	bne.n	8010084 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801006a:	693b      	ldr	r3, [r7, #16]
 801006c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801006e:	2b06      	cmp	r3, #6
 8010070:	d108      	bne.n	8010084 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010076:	2b04      	cmp	r3, #4
 8010078:	d104      	bne.n	8010084 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801007a:	693b      	ldr	r3, [r7, #16]
 801007c:	885b      	ldrh	r3, [r3, #2]
 801007e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010080:	2b08      	cmp	r3, #8
 8010082:	d003      	beq.n	801008c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f7f9 fd85 	bl	8009b94 <pbuf_free>
    return;
 801008a:	e055      	b.n	8010138 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801008c:	693b      	ldr	r3, [r7, #16]
 801008e:	330e      	adds	r3, #14
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	3318      	adds	r3, #24
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	3304      	adds	r3, #4
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d102      	bne.n	80100ac <etharp_input+0x74>
    for_us = 0;
 80100a6:	2300      	movs	r3, #0
 80100a8:	75fb      	strb	r3, [r7, #23]
 80100aa:	e009      	b.n	80100c0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80100ac:	68ba      	ldr	r2, [r7, #8]
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	3304      	adds	r3, #4
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	bf0c      	ite	eq
 80100b8:	2301      	moveq	r3, #1
 80100ba:	2300      	movne	r3, #0
 80100bc:	b2db      	uxtb	r3, r3
 80100be:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	f103 0208 	add.w	r2, r3, #8
 80100c6:	7dfb      	ldrb	r3, [r7, #23]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d001      	beq.n	80100d0 <etharp_input+0x98>
 80100cc:	2301      	movs	r3, #1
 80100ce:	e000      	b.n	80100d2 <etharp_input+0x9a>
 80100d0:	2302      	movs	r3, #2
 80100d2:	f107 010c 	add.w	r1, r7, #12
 80100d6:	6838      	ldr	r0, [r7, #0]
 80100d8:	f7ff fed8 	bl	800fe8c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	88db      	ldrh	r3, [r3, #6]
 80100e0:	b29b      	uxth	r3, r3
 80100e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80100e6:	d003      	beq.n	80100f0 <etharp_input+0xb8>
 80100e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100ec:	d01e      	beq.n	801012c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80100ee:	e020      	b.n	8010132 <etharp_input+0xfa>
      if (for_us) {
 80100f0:	7dfb      	ldrb	r3, [r7, #23]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d01c      	beq.n	8010130 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801010c:	693a      	ldr	r2, [r7, #16]
 801010e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010110:	2102      	movs	r1, #2
 8010112:	9103      	str	r1, [sp, #12]
 8010114:	f107 010c 	add.w	r1, r7, #12
 8010118:	9102      	str	r1, [sp, #8]
 801011a:	9201      	str	r2, [sp, #4]
 801011c:	9300      	str	r3, [sp, #0]
 801011e:	462b      	mov	r3, r5
 8010120:	4622      	mov	r2, r4
 8010122:	4601      	mov	r1, r0
 8010124:	6838      	ldr	r0, [r7, #0]
 8010126:	f000 faeb 	bl	8010700 <etharp_raw>
      break;
 801012a:	e001      	b.n	8010130 <etharp_input+0xf8>
      break;
 801012c:	bf00      	nop
 801012e:	e000      	b.n	8010132 <etharp_input+0xfa>
      break;
 8010130:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f7f9 fd2e 	bl	8009b94 <pbuf_free>
}
 8010138:	3718      	adds	r7, #24
 801013a:	46bd      	mov	sp, r7
 801013c:	bdb0      	pop	{r4, r5, r7, pc}
 801013e:	bf00      	nop
 8010140:	0801568c 	.word	0x0801568c
 8010144:	080157dc 	.word	0x080157dc
 8010148:	08015704 	.word	0x08015704

0801014c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b086      	sub	sp, #24
 8010150:	af02      	add	r7, sp, #8
 8010152:	60f8      	str	r0, [r7, #12]
 8010154:	60b9      	str	r1, [r7, #8]
 8010156:	4613      	mov	r3, r2
 8010158:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801015a:	79fa      	ldrb	r2, [r7, #7]
 801015c:	4944      	ldr	r1, [pc, #272]	; (8010270 <etharp_output_to_arp_index+0x124>)
 801015e:	4613      	mov	r3, r2
 8010160:	005b      	lsls	r3, r3, #1
 8010162:	4413      	add	r3, r2
 8010164:	00db      	lsls	r3, r3, #3
 8010166:	440b      	add	r3, r1
 8010168:	3314      	adds	r3, #20
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	2b01      	cmp	r3, #1
 801016e:	d806      	bhi.n	801017e <etharp_output_to_arp_index+0x32>
 8010170:	4b40      	ldr	r3, [pc, #256]	; (8010274 <etharp_output_to_arp_index+0x128>)
 8010172:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010176:	4940      	ldr	r1, [pc, #256]	; (8010278 <etharp_output_to_arp_index+0x12c>)
 8010178:	4840      	ldr	r0, [pc, #256]	; (801027c <etharp_output_to_arp_index+0x130>)
 801017a:	f002 f8ed 	bl	8012358 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801017e:	79fa      	ldrb	r2, [r7, #7]
 8010180:	493b      	ldr	r1, [pc, #236]	; (8010270 <etharp_output_to_arp_index+0x124>)
 8010182:	4613      	mov	r3, r2
 8010184:	005b      	lsls	r3, r3, #1
 8010186:	4413      	add	r3, r2
 8010188:	00db      	lsls	r3, r3, #3
 801018a:	440b      	add	r3, r1
 801018c:	3314      	adds	r3, #20
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	2b02      	cmp	r3, #2
 8010192:	d153      	bne.n	801023c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010194:	79fa      	ldrb	r2, [r7, #7]
 8010196:	4936      	ldr	r1, [pc, #216]	; (8010270 <etharp_output_to_arp_index+0x124>)
 8010198:	4613      	mov	r3, r2
 801019a:	005b      	lsls	r3, r3, #1
 801019c:	4413      	add	r3, r2
 801019e:	00db      	lsls	r3, r3, #3
 80101a0:	440b      	add	r3, r1
 80101a2:	3312      	adds	r3, #18
 80101a4:	881b      	ldrh	r3, [r3, #0]
 80101a6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80101aa:	d919      	bls.n	80101e0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80101ac:	79fa      	ldrb	r2, [r7, #7]
 80101ae:	4613      	mov	r3, r2
 80101b0:	005b      	lsls	r3, r3, #1
 80101b2:	4413      	add	r3, r2
 80101b4:	00db      	lsls	r3, r3, #3
 80101b6:	4a2e      	ldr	r2, [pc, #184]	; (8010270 <etharp_output_to_arp_index+0x124>)
 80101b8:	4413      	add	r3, r2
 80101ba:	3304      	adds	r3, #4
 80101bc:	4619      	mov	r1, r3
 80101be:	68f8      	ldr	r0, [r7, #12]
 80101c0:	f000 fb4c 	bl	801085c <etharp_request>
 80101c4:	4603      	mov	r3, r0
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d138      	bne.n	801023c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80101ca:	79fa      	ldrb	r2, [r7, #7]
 80101cc:	4928      	ldr	r1, [pc, #160]	; (8010270 <etharp_output_to_arp_index+0x124>)
 80101ce:	4613      	mov	r3, r2
 80101d0:	005b      	lsls	r3, r3, #1
 80101d2:	4413      	add	r3, r2
 80101d4:	00db      	lsls	r3, r3, #3
 80101d6:	440b      	add	r3, r1
 80101d8:	3314      	adds	r3, #20
 80101da:	2203      	movs	r2, #3
 80101dc:	701a      	strb	r2, [r3, #0]
 80101de:	e02d      	b.n	801023c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80101e0:	79fa      	ldrb	r2, [r7, #7]
 80101e2:	4923      	ldr	r1, [pc, #140]	; (8010270 <etharp_output_to_arp_index+0x124>)
 80101e4:	4613      	mov	r3, r2
 80101e6:	005b      	lsls	r3, r3, #1
 80101e8:	4413      	add	r3, r2
 80101ea:	00db      	lsls	r3, r3, #3
 80101ec:	440b      	add	r3, r1
 80101ee:	3312      	adds	r3, #18
 80101f0:	881b      	ldrh	r3, [r3, #0]
 80101f2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80101f6:	d321      	bcc.n	801023c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80101f8:	79fa      	ldrb	r2, [r7, #7]
 80101fa:	4613      	mov	r3, r2
 80101fc:	005b      	lsls	r3, r3, #1
 80101fe:	4413      	add	r3, r2
 8010200:	00db      	lsls	r3, r3, #3
 8010202:	4a1b      	ldr	r2, [pc, #108]	; (8010270 <etharp_output_to_arp_index+0x124>)
 8010204:	4413      	add	r3, r2
 8010206:	1d19      	adds	r1, r3, #4
 8010208:	79fa      	ldrb	r2, [r7, #7]
 801020a:	4613      	mov	r3, r2
 801020c:	005b      	lsls	r3, r3, #1
 801020e:	4413      	add	r3, r2
 8010210:	00db      	lsls	r3, r3, #3
 8010212:	3308      	adds	r3, #8
 8010214:	4a16      	ldr	r2, [pc, #88]	; (8010270 <etharp_output_to_arp_index+0x124>)
 8010216:	4413      	add	r3, r2
 8010218:	3304      	adds	r3, #4
 801021a:	461a      	mov	r2, r3
 801021c:	68f8      	ldr	r0, [r7, #12]
 801021e:	f000 fafb 	bl	8010818 <etharp_request_dst>
 8010222:	4603      	mov	r3, r0
 8010224:	2b00      	cmp	r3, #0
 8010226:	d109      	bne.n	801023c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010228:	79fa      	ldrb	r2, [r7, #7]
 801022a:	4911      	ldr	r1, [pc, #68]	; (8010270 <etharp_output_to_arp_index+0x124>)
 801022c:	4613      	mov	r3, r2
 801022e:	005b      	lsls	r3, r3, #1
 8010230:	4413      	add	r3, r2
 8010232:	00db      	lsls	r3, r3, #3
 8010234:	440b      	add	r3, r1
 8010236:	3314      	adds	r3, #20
 8010238:	2203      	movs	r2, #3
 801023a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8010242:	79fa      	ldrb	r2, [r7, #7]
 8010244:	4613      	mov	r3, r2
 8010246:	005b      	lsls	r3, r3, #1
 8010248:	4413      	add	r3, r2
 801024a:	00db      	lsls	r3, r3, #3
 801024c:	3308      	adds	r3, #8
 801024e:	4a08      	ldr	r2, [pc, #32]	; (8010270 <etharp_output_to_arp_index+0x124>)
 8010250:	4413      	add	r3, r2
 8010252:	3304      	adds	r3, #4
 8010254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010258:	9200      	str	r2, [sp, #0]
 801025a:	460a      	mov	r2, r1
 801025c:	68b9      	ldr	r1, [r7, #8]
 801025e:	68f8      	ldr	r0, [r7, #12]
 8010260:	f001 fe40 	bl	8011ee4 <ethernet_output>
 8010264:	4603      	mov	r3, r0
}
 8010266:	4618      	mov	r0, r3
 8010268:	3710      	adds	r7, #16
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}
 801026e:	bf00      	nop
 8010270:	2000f0b4 	.word	0x2000f0b4
 8010274:	0801568c 	.word	0x0801568c
 8010278:	080157fc 	.word	0x080157fc
 801027c:	08015704 	.word	0x08015704

08010280 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b08a      	sub	sp, #40	; 0x28
 8010284:	af02      	add	r7, sp, #8
 8010286:	60f8      	str	r0, [r7, #12]
 8010288:	60b9      	str	r1, [r7, #8]
 801028a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d106      	bne.n	80102a4 <etharp_output+0x24>
 8010296:	4b73      	ldr	r3, [pc, #460]	; (8010464 <etharp_output+0x1e4>)
 8010298:	f240 321e 	movw	r2, #798	; 0x31e
 801029c:	4972      	ldr	r1, [pc, #456]	; (8010468 <etharp_output+0x1e8>)
 801029e:	4873      	ldr	r0, [pc, #460]	; (801046c <etharp_output+0x1ec>)
 80102a0:	f002 f85a 	bl	8012358 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d106      	bne.n	80102b8 <etharp_output+0x38>
 80102aa:	4b6e      	ldr	r3, [pc, #440]	; (8010464 <etharp_output+0x1e4>)
 80102ac:	f240 321f 	movw	r2, #799	; 0x31f
 80102b0:	496f      	ldr	r1, [pc, #444]	; (8010470 <etharp_output+0x1f0>)
 80102b2:	486e      	ldr	r0, [pc, #440]	; (801046c <etharp_output+0x1ec>)
 80102b4:	f002 f850 	bl	8012358 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d106      	bne.n	80102cc <etharp_output+0x4c>
 80102be:	4b69      	ldr	r3, [pc, #420]	; (8010464 <etharp_output+0x1e4>)
 80102c0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80102c4:	496b      	ldr	r1, [pc, #428]	; (8010474 <etharp_output+0x1f4>)
 80102c6:	4869      	ldr	r0, [pc, #420]	; (801046c <etharp_output+0x1ec>)
 80102c8:	f002 f846 	bl	8012358 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	68f9      	ldr	r1, [r7, #12]
 80102d2:	4618      	mov	r0, r3
 80102d4:	f000 fef8 	bl	80110c8 <ip4_addr_isbroadcast_u32>
 80102d8:	4603      	mov	r3, r0
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d002      	beq.n	80102e4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80102de:	4b66      	ldr	r3, [pc, #408]	; (8010478 <etharp_output+0x1f8>)
 80102e0:	61fb      	str	r3, [r7, #28]
 80102e2:	e0af      	b.n	8010444 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80102ec:	2be0      	cmp	r3, #224	; 0xe0
 80102ee:	d118      	bne.n	8010322 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80102f0:	2301      	movs	r3, #1
 80102f2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80102f4:	2300      	movs	r3, #0
 80102f6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80102f8:	235e      	movs	r3, #94	; 0x5e
 80102fa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	3301      	adds	r3, #1
 8010300:	781b      	ldrb	r3, [r3, #0]
 8010302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010306:	b2db      	uxtb	r3, r3
 8010308:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	3302      	adds	r3, #2
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	3303      	adds	r3, #3
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801031a:	f107 0310 	add.w	r3, r7, #16
 801031e:	61fb      	str	r3, [r7, #28]
 8010320:	e090      	b.n	8010444 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681a      	ldr	r2, [r3, #0]
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	3304      	adds	r3, #4
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	405a      	eors	r2, r3
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	3308      	adds	r3, #8
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	4013      	ands	r3, r2
 8010336:	2b00      	cmp	r3, #0
 8010338:	d012      	beq.n	8010360 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010340:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010344:	4293      	cmp	r3, r2
 8010346:	d00b      	beq.n	8010360 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	330c      	adds	r3, #12
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d003      	beq.n	801035a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	330c      	adds	r3, #12
 8010356:	61bb      	str	r3, [r7, #24]
 8010358:	e002      	b.n	8010360 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801035a:	f06f 0303 	mvn.w	r3, #3
 801035e:	e07d      	b.n	801045c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010360:	4b46      	ldr	r3, [pc, #280]	; (801047c <etharp_output+0x1fc>)
 8010362:	781b      	ldrb	r3, [r3, #0]
 8010364:	4619      	mov	r1, r3
 8010366:	4a46      	ldr	r2, [pc, #280]	; (8010480 <etharp_output+0x200>)
 8010368:	460b      	mov	r3, r1
 801036a:	005b      	lsls	r3, r3, #1
 801036c:	440b      	add	r3, r1
 801036e:	00db      	lsls	r3, r3, #3
 8010370:	4413      	add	r3, r2
 8010372:	3314      	adds	r3, #20
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	2b01      	cmp	r3, #1
 8010378:	d925      	bls.n	80103c6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801037a:	4b40      	ldr	r3, [pc, #256]	; (801047c <etharp_output+0x1fc>)
 801037c:	781b      	ldrb	r3, [r3, #0]
 801037e:	4619      	mov	r1, r3
 8010380:	4a3f      	ldr	r2, [pc, #252]	; (8010480 <etharp_output+0x200>)
 8010382:	460b      	mov	r3, r1
 8010384:	005b      	lsls	r3, r3, #1
 8010386:	440b      	add	r3, r1
 8010388:	00db      	lsls	r3, r3, #3
 801038a:	4413      	add	r3, r2
 801038c:	3308      	adds	r3, #8
 801038e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010390:	68fa      	ldr	r2, [r7, #12]
 8010392:	429a      	cmp	r2, r3
 8010394:	d117      	bne.n	80103c6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010396:	69bb      	ldr	r3, [r7, #24]
 8010398:	681a      	ldr	r2, [r3, #0]
 801039a:	4b38      	ldr	r3, [pc, #224]	; (801047c <etharp_output+0x1fc>)
 801039c:	781b      	ldrb	r3, [r3, #0]
 801039e:	4618      	mov	r0, r3
 80103a0:	4937      	ldr	r1, [pc, #220]	; (8010480 <etharp_output+0x200>)
 80103a2:	4603      	mov	r3, r0
 80103a4:	005b      	lsls	r3, r3, #1
 80103a6:	4403      	add	r3, r0
 80103a8:	00db      	lsls	r3, r3, #3
 80103aa:	440b      	add	r3, r1
 80103ac:	3304      	adds	r3, #4
 80103ae:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80103b0:	429a      	cmp	r2, r3
 80103b2:	d108      	bne.n	80103c6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80103b4:	4b31      	ldr	r3, [pc, #196]	; (801047c <etharp_output+0x1fc>)
 80103b6:	781b      	ldrb	r3, [r3, #0]
 80103b8:	461a      	mov	r2, r3
 80103ba:	68b9      	ldr	r1, [r7, #8]
 80103bc:	68f8      	ldr	r0, [r7, #12]
 80103be:	f7ff fec5 	bl	801014c <etharp_output_to_arp_index>
 80103c2:	4603      	mov	r3, r0
 80103c4:	e04a      	b.n	801045c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80103c6:	2300      	movs	r3, #0
 80103c8:	75fb      	strb	r3, [r7, #23]
 80103ca:	e031      	b.n	8010430 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80103cc:	7dfa      	ldrb	r2, [r7, #23]
 80103ce:	492c      	ldr	r1, [pc, #176]	; (8010480 <etharp_output+0x200>)
 80103d0:	4613      	mov	r3, r2
 80103d2:	005b      	lsls	r3, r3, #1
 80103d4:	4413      	add	r3, r2
 80103d6:	00db      	lsls	r3, r3, #3
 80103d8:	440b      	add	r3, r1
 80103da:	3314      	adds	r3, #20
 80103dc:	781b      	ldrb	r3, [r3, #0]
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d923      	bls.n	801042a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80103e2:	7dfa      	ldrb	r2, [r7, #23]
 80103e4:	4926      	ldr	r1, [pc, #152]	; (8010480 <etharp_output+0x200>)
 80103e6:	4613      	mov	r3, r2
 80103e8:	005b      	lsls	r3, r3, #1
 80103ea:	4413      	add	r3, r2
 80103ec:	00db      	lsls	r3, r3, #3
 80103ee:	440b      	add	r3, r1
 80103f0:	3308      	adds	r3, #8
 80103f2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80103f4:	68fa      	ldr	r2, [r7, #12]
 80103f6:	429a      	cmp	r2, r3
 80103f8:	d117      	bne.n	801042a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80103fa:	69bb      	ldr	r3, [r7, #24]
 80103fc:	6819      	ldr	r1, [r3, #0]
 80103fe:	7dfa      	ldrb	r2, [r7, #23]
 8010400:	481f      	ldr	r0, [pc, #124]	; (8010480 <etharp_output+0x200>)
 8010402:	4613      	mov	r3, r2
 8010404:	005b      	lsls	r3, r3, #1
 8010406:	4413      	add	r3, r2
 8010408:	00db      	lsls	r3, r3, #3
 801040a:	4403      	add	r3, r0
 801040c:	3304      	adds	r3, #4
 801040e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010410:	4299      	cmp	r1, r3
 8010412:	d10a      	bne.n	801042a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010414:	4a19      	ldr	r2, [pc, #100]	; (801047c <etharp_output+0x1fc>)
 8010416:	7dfb      	ldrb	r3, [r7, #23]
 8010418:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801041a:	7dfb      	ldrb	r3, [r7, #23]
 801041c:	461a      	mov	r2, r3
 801041e:	68b9      	ldr	r1, [r7, #8]
 8010420:	68f8      	ldr	r0, [r7, #12]
 8010422:	f7ff fe93 	bl	801014c <etharp_output_to_arp_index>
 8010426:	4603      	mov	r3, r0
 8010428:	e018      	b.n	801045c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801042a:	7dfb      	ldrb	r3, [r7, #23]
 801042c:	3301      	adds	r3, #1
 801042e:	75fb      	strb	r3, [r7, #23]
 8010430:	7dfb      	ldrb	r3, [r7, #23]
 8010432:	2b09      	cmp	r3, #9
 8010434:	d9ca      	bls.n	80103cc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010436:	68ba      	ldr	r2, [r7, #8]
 8010438:	69b9      	ldr	r1, [r7, #24]
 801043a:	68f8      	ldr	r0, [r7, #12]
 801043c:	f000 f822 	bl	8010484 <etharp_query>
 8010440:	4603      	mov	r3, r0
 8010442:	e00b      	b.n	801045c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801044a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801044e:	9300      	str	r3, [sp, #0]
 8010450:	69fb      	ldr	r3, [r7, #28]
 8010452:	68b9      	ldr	r1, [r7, #8]
 8010454:	68f8      	ldr	r0, [r7, #12]
 8010456:	f001 fd45 	bl	8011ee4 <ethernet_output>
 801045a:	4603      	mov	r3, r0
}
 801045c:	4618      	mov	r0, r3
 801045e:	3720      	adds	r7, #32
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}
 8010464:	0801568c 	.word	0x0801568c
 8010468:	080157dc 	.word	0x080157dc
 801046c:	08015704 	.word	0x08015704
 8010470:	0801582c 	.word	0x0801582c
 8010474:	080157cc 	.word	0x080157cc
 8010478:	08015eac 	.word	0x08015eac
 801047c:	2000f1a4 	.word	0x2000f1a4
 8010480:	2000f0b4 	.word	0x2000f0b4

08010484 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b08c      	sub	sp, #48	; 0x30
 8010488:	af02      	add	r7, sp, #8
 801048a:	60f8      	str	r0, [r7, #12]
 801048c:	60b9      	str	r1, [r7, #8]
 801048e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	3326      	adds	r3, #38	; 0x26
 8010494:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010496:	23ff      	movs	r3, #255	; 0xff
 8010498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801049c:	2300      	movs	r3, #0
 801049e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	68f9      	ldr	r1, [r7, #12]
 80104a6:	4618      	mov	r0, r3
 80104a8:	f000 fe0e 	bl	80110c8 <ip4_addr_isbroadcast_u32>
 80104ac:	4603      	mov	r3, r0
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d10c      	bne.n	80104cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80104ba:	2be0      	cmp	r3, #224	; 0xe0
 80104bc:	d006      	beq.n	80104cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d003      	beq.n	80104cc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d102      	bne.n	80104d2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80104cc:	f06f 030f 	mvn.w	r3, #15
 80104d0:	e101      	b.n	80106d6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80104d2:	68fa      	ldr	r2, [r7, #12]
 80104d4:	2101      	movs	r1, #1
 80104d6:	68b8      	ldr	r0, [r7, #8]
 80104d8:	f7ff fb60 	bl	800fb9c <etharp_find_entry>
 80104dc:	4603      	mov	r3, r0
 80104de:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80104e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	da02      	bge.n	80104ee <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80104e8:	8a7b      	ldrh	r3, [r7, #18]
 80104ea:	b25b      	sxtb	r3, r3
 80104ec:	e0f3      	b.n	80106d6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80104ee:	8a7b      	ldrh	r3, [r7, #18]
 80104f0:	2b7e      	cmp	r3, #126	; 0x7e
 80104f2:	d906      	bls.n	8010502 <etharp_query+0x7e>
 80104f4:	4b7a      	ldr	r3, [pc, #488]	; (80106e0 <etharp_query+0x25c>)
 80104f6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80104fa:	497a      	ldr	r1, [pc, #488]	; (80106e4 <etharp_query+0x260>)
 80104fc:	487a      	ldr	r0, [pc, #488]	; (80106e8 <etharp_query+0x264>)
 80104fe:	f001 ff2b 	bl	8012358 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010502:	8a7b      	ldrh	r3, [r7, #18]
 8010504:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010506:	7c7a      	ldrb	r2, [r7, #17]
 8010508:	4978      	ldr	r1, [pc, #480]	; (80106ec <etharp_query+0x268>)
 801050a:	4613      	mov	r3, r2
 801050c:	005b      	lsls	r3, r3, #1
 801050e:	4413      	add	r3, r2
 8010510:	00db      	lsls	r3, r3, #3
 8010512:	440b      	add	r3, r1
 8010514:	3314      	adds	r3, #20
 8010516:	781b      	ldrb	r3, [r3, #0]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d115      	bne.n	8010548 <etharp_query+0xc4>
    is_new_entry = 1;
 801051c:	2301      	movs	r3, #1
 801051e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010520:	7c7a      	ldrb	r2, [r7, #17]
 8010522:	4972      	ldr	r1, [pc, #456]	; (80106ec <etharp_query+0x268>)
 8010524:	4613      	mov	r3, r2
 8010526:	005b      	lsls	r3, r3, #1
 8010528:	4413      	add	r3, r2
 801052a:	00db      	lsls	r3, r3, #3
 801052c:	440b      	add	r3, r1
 801052e:	3314      	adds	r3, #20
 8010530:	2201      	movs	r2, #1
 8010532:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010534:	7c7a      	ldrb	r2, [r7, #17]
 8010536:	496d      	ldr	r1, [pc, #436]	; (80106ec <etharp_query+0x268>)
 8010538:	4613      	mov	r3, r2
 801053a:	005b      	lsls	r3, r3, #1
 801053c:	4413      	add	r3, r2
 801053e:	00db      	lsls	r3, r3, #3
 8010540:	440b      	add	r3, r1
 8010542:	3308      	adds	r3, #8
 8010544:	68fa      	ldr	r2, [r7, #12]
 8010546:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010548:	7c7a      	ldrb	r2, [r7, #17]
 801054a:	4968      	ldr	r1, [pc, #416]	; (80106ec <etharp_query+0x268>)
 801054c:	4613      	mov	r3, r2
 801054e:	005b      	lsls	r3, r3, #1
 8010550:	4413      	add	r3, r2
 8010552:	00db      	lsls	r3, r3, #3
 8010554:	440b      	add	r3, r1
 8010556:	3314      	adds	r3, #20
 8010558:	781b      	ldrb	r3, [r3, #0]
 801055a:	2b01      	cmp	r3, #1
 801055c:	d011      	beq.n	8010582 <etharp_query+0xfe>
 801055e:	7c7a      	ldrb	r2, [r7, #17]
 8010560:	4962      	ldr	r1, [pc, #392]	; (80106ec <etharp_query+0x268>)
 8010562:	4613      	mov	r3, r2
 8010564:	005b      	lsls	r3, r3, #1
 8010566:	4413      	add	r3, r2
 8010568:	00db      	lsls	r3, r3, #3
 801056a:	440b      	add	r3, r1
 801056c:	3314      	adds	r3, #20
 801056e:	781b      	ldrb	r3, [r3, #0]
 8010570:	2b01      	cmp	r3, #1
 8010572:	d806      	bhi.n	8010582 <etharp_query+0xfe>
 8010574:	4b5a      	ldr	r3, [pc, #360]	; (80106e0 <etharp_query+0x25c>)
 8010576:	f240 32cd 	movw	r2, #973	; 0x3cd
 801057a:	495d      	ldr	r1, [pc, #372]	; (80106f0 <etharp_query+0x26c>)
 801057c:	485a      	ldr	r0, [pc, #360]	; (80106e8 <etharp_query+0x264>)
 801057e:	f001 feeb 	bl	8012358 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010582:	6a3b      	ldr	r3, [r7, #32]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d102      	bne.n	801058e <etharp_query+0x10a>
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d10c      	bne.n	80105a8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801058e:	68b9      	ldr	r1, [r7, #8]
 8010590:	68f8      	ldr	r0, [r7, #12]
 8010592:	f000 f963 	bl	801085c <etharp_request>
 8010596:	4603      	mov	r3, r0
 8010598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d102      	bne.n	80105a8 <etharp_query+0x124>
      return result;
 80105a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80105a6:	e096      	b.n	80106d6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d106      	bne.n	80105bc <etharp_query+0x138>
 80105ae:	4b4c      	ldr	r3, [pc, #304]	; (80106e0 <etharp_query+0x25c>)
 80105b0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80105b4:	494f      	ldr	r1, [pc, #316]	; (80106f4 <etharp_query+0x270>)
 80105b6:	484c      	ldr	r0, [pc, #304]	; (80106e8 <etharp_query+0x264>)
 80105b8:	f001 fece 	bl	8012358 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80105bc:	7c7a      	ldrb	r2, [r7, #17]
 80105be:	494b      	ldr	r1, [pc, #300]	; (80106ec <etharp_query+0x268>)
 80105c0:	4613      	mov	r3, r2
 80105c2:	005b      	lsls	r3, r3, #1
 80105c4:	4413      	add	r3, r2
 80105c6:	00db      	lsls	r3, r3, #3
 80105c8:	440b      	add	r3, r1
 80105ca:	3314      	adds	r3, #20
 80105cc:	781b      	ldrb	r3, [r3, #0]
 80105ce:	2b01      	cmp	r3, #1
 80105d0:	d917      	bls.n	8010602 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80105d2:	4a49      	ldr	r2, [pc, #292]	; (80106f8 <etharp_query+0x274>)
 80105d4:	7c7b      	ldrb	r3, [r7, #17]
 80105d6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80105d8:	7c7a      	ldrb	r2, [r7, #17]
 80105da:	4613      	mov	r3, r2
 80105dc:	005b      	lsls	r3, r3, #1
 80105de:	4413      	add	r3, r2
 80105e0:	00db      	lsls	r3, r3, #3
 80105e2:	3308      	adds	r3, #8
 80105e4:	4a41      	ldr	r2, [pc, #260]	; (80106ec <etharp_query+0x268>)
 80105e6:	4413      	add	r3, r2
 80105e8:	3304      	adds	r3, #4
 80105ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80105ee:	9200      	str	r2, [sp, #0]
 80105f0:	697a      	ldr	r2, [r7, #20]
 80105f2:	6879      	ldr	r1, [r7, #4]
 80105f4:	68f8      	ldr	r0, [r7, #12]
 80105f6:	f001 fc75 	bl	8011ee4 <ethernet_output>
 80105fa:	4603      	mov	r3, r0
 80105fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010600:	e067      	b.n	80106d2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010602:	7c7a      	ldrb	r2, [r7, #17]
 8010604:	4939      	ldr	r1, [pc, #228]	; (80106ec <etharp_query+0x268>)
 8010606:	4613      	mov	r3, r2
 8010608:	005b      	lsls	r3, r3, #1
 801060a:	4413      	add	r3, r2
 801060c:	00db      	lsls	r3, r3, #3
 801060e:	440b      	add	r3, r1
 8010610:	3314      	adds	r3, #20
 8010612:	781b      	ldrb	r3, [r3, #0]
 8010614:	2b01      	cmp	r3, #1
 8010616:	d15c      	bne.n	80106d2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010618:	2300      	movs	r3, #0
 801061a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010620:	e01c      	b.n	801065c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010622:	69fb      	ldr	r3, [r7, #28]
 8010624:	895a      	ldrh	r2, [r3, #10]
 8010626:	69fb      	ldr	r3, [r7, #28]
 8010628:	891b      	ldrh	r3, [r3, #8]
 801062a:	429a      	cmp	r2, r3
 801062c:	d10a      	bne.n	8010644 <etharp_query+0x1c0>
 801062e:	69fb      	ldr	r3, [r7, #28]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d006      	beq.n	8010644 <etharp_query+0x1c0>
 8010636:	4b2a      	ldr	r3, [pc, #168]	; (80106e0 <etharp_query+0x25c>)
 8010638:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801063c:	492f      	ldr	r1, [pc, #188]	; (80106fc <etharp_query+0x278>)
 801063e:	482a      	ldr	r0, [pc, #168]	; (80106e8 <etharp_query+0x264>)
 8010640:	f001 fe8a 	bl	8012358 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010644:	69fb      	ldr	r3, [r7, #28]
 8010646:	7b1b      	ldrb	r3, [r3, #12]
 8010648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801064c:	2b00      	cmp	r3, #0
 801064e:	d002      	beq.n	8010656 <etharp_query+0x1d2>
        copy_needed = 1;
 8010650:	2301      	movs	r3, #1
 8010652:	61bb      	str	r3, [r7, #24]
        break;
 8010654:	e005      	b.n	8010662 <etharp_query+0x1de>
      }
      p = p->next;
 8010656:	69fb      	ldr	r3, [r7, #28]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801065c:	69fb      	ldr	r3, [r7, #28]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d1df      	bne.n	8010622 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8010662:	69bb      	ldr	r3, [r7, #24]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d007      	beq.n	8010678 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010668:	687a      	ldr	r2, [r7, #4]
 801066a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801066e:	200e      	movs	r0, #14
 8010670:	f7f9 fcf8 	bl	800a064 <pbuf_clone>
 8010674:	61f8      	str	r0, [r7, #28]
 8010676:	e004      	b.n	8010682 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801067c:	69f8      	ldr	r0, [r7, #28]
 801067e:	f7f9 fb2f 	bl	8009ce0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010682:	69fb      	ldr	r3, [r7, #28]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d021      	beq.n	80106cc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010688:	7c7a      	ldrb	r2, [r7, #17]
 801068a:	4918      	ldr	r1, [pc, #96]	; (80106ec <etharp_query+0x268>)
 801068c:	4613      	mov	r3, r2
 801068e:	005b      	lsls	r3, r3, #1
 8010690:	4413      	add	r3, r2
 8010692:	00db      	lsls	r3, r3, #3
 8010694:	440b      	add	r3, r1
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d00a      	beq.n	80106b2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801069c:	7c7a      	ldrb	r2, [r7, #17]
 801069e:	4913      	ldr	r1, [pc, #76]	; (80106ec <etharp_query+0x268>)
 80106a0:	4613      	mov	r3, r2
 80106a2:	005b      	lsls	r3, r3, #1
 80106a4:	4413      	add	r3, r2
 80106a6:	00db      	lsls	r3, r3, #3
 80106a8:	440b      	add	r3, r1
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	4618      	mov	r0, r3
 80106ae:	f7f9 fa71 	bl	8009b94 <pbuf_free>
      }
      arp_table[i].q = p;
 80106b2:	7c7a      	ldrb	r2, [r7, #17]
 80106b4:	490d      	ldr	r1, [pc, #52]	; (80106ec <etharp_query+0x268>)
 80106b6:	4613      	mov	r3, r2
 80106b8:	005b      	lsls	r3, r3, #1
 80106ba:	4413      	add	r3, r2
 80106bc:	00db      	lsls	r3, r3, #3
 80106be:	440b      	add	r3, r1
 80106c0:	69fa      	ldr	r2, [r7, #28]
 80106c2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80106c4:	2300      	movs	r3, #0
 80106c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80106ca:	e002      	b.n	80106d2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80106cc:	23ff      	movs	r3, #255	; 0xff
 80106ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80106d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3728      	adds	r7, #40	; 0x28
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	0801568c 	.word	0x0801568c
 80106e4:	08015838 	.word	0x08015838
 80106e8:	08015704 	.word	0x08015704
 80106ec:	2000f0b4 	.word	0x2000f0b4
 80106f0:	08015848 	.word	0x08015848
 80106f4:	0801582c 	.word	0x0801582c
 80106f8:	2000f1a4 	.word	0x2000f1a4
 80106fc:	08015870 	.word	0x08015870

08010700 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b08a      	sub	sp, #40	; 0x28
 8010704:	af02      	add	r7, sp, #8
 8010706:	60f8      	str	r0, [r7, #12]
 8010708:	60b9      	str	r1, [r7, #8]
 801070a:	607a      	str	r2, [r7, #4]
 801070c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801070e:	2300      	movs	r3, #0
 8010710:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d106      	bne.n	8010726 <etharp_raw+0x26>
 8010718:	4b3a      	ldr	r3, [pc, #232]	; (8010804 <etharp_raw+0x104>)
 801071a:	f240 4257 	movw	r2, #1111	; 0x457
 801071e:	493a      	ldr	r1, [pc, #232]	; (8010808 <etharp_raw+0x108>)
 8010720:	483a      	ldr	r0, [pc, #232]	; (801080c <etharp_raw+0x10c>)
 8010722:	f001 fe19 	bl	8012358 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010726:	f44f 7220 	mov.w	r2, #640	; 0x280
 801072a:	211c      	movs	r1, #28
 801072c:	200e      	movs	r0, #14
 801072e:	f7f8 ff4d 	bl	80095cc <pbuf_alloc>
 8010732:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010734:	69bb      	ldr	r3, [r7, #24]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d102      	bne.n	8010740 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801073a:	f04f 33ff 	mov.w	r3, #4294967295
 801073e:	e05d      	b.n	80107fc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010740:	69bb      	ldr	r3, [r7, #24]
 8010742:	895b      	ldrh	r3, [r3, #10]
 8010744:	2b1b      	cmp	r3, #27
 8010746:	d806      	bhi.n	8010756 <etharp_raw+0x56>
 8010748:	4b2e      	ldr	r3, [pc, #184]	; (8010804 <etharp_raw+0x104>)
 801074a:	f240 4262 	movw	r2, #1122	; 0x462
 801074e:	4930      	ldr	r1, [pc, #192]	; (8010810 <etharp_raw+0x110>)
 8010750:	482e      	ldr	r0, [pc, #184]	; (801080c <etharp_raw+0x10c>)
 8010752:	f001 fe01 	bl	8012358 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010756:	69bb      	ldr	r3, [r7, #24]
 8010758:	685b      	ldr	r3, [r3, #4]
 801075a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801075c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801075e:	4618      	mov	r0, r3
 8010760:	f7f7 fe26 	bl	80083b0 <lwip_htons>
 8010764:	4603      	mov	r3, r0
 8010766:	461a      	mov	r2, r3
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010772:	2b06      	cmp	r3, #6
 8010774:	d006      	beq.n	8010784 <etharp_raw+0x84>
 8010776:	4b23      	ldr	r3, [pc, #140]	; (8010804 <etharp_raw+0x104>)
 8010778:	f240 4269 	movw	r2, #1129	; 0x469
 801077c:	4925      	ldr	r1, [pc, #148]	; (8010814 <etharp_raw+0x114>)
 801077e:	4823      	ldr	r0, [pc, #140]	; (801080c <etharp_raw+0x10c>)
 8010780:	f001 fdea 	bl	8012358 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	3308      	adds	r3, #8
 8010788:	2206      	movs	r2, #6
 801078a:	6839      	ldr	r1, [r7, #0]
 801078c:	4618      	mov	r0, r3
 801078e:	f001 ff14 	bl	80125ba <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	3312      	adds	r3, #18
 8010796:	2206      	movs	r2, #6
 8010798:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801079a:	4618      	mov	r0, r3
 801079c:	f001 ff0d 	bl	80125ba <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	330e      	adds	r3, #14
 80107a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107a6:	6812      	ldr	r2, [r2, #0]
 80107a8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	3318      	adds	r3, #24
 80107ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107b0:	6812      	ldr	r2, [r2, #0]
 80107b2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	2200      	movs	r2, #0
 80107b8:	701a      	strb	r2, [r3, #0]
 80107ba:	2200      	movs	r2, #0
 80107bc:	f042 0201 	orr.w	r2, r2, #1
 80107c0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80107c2:	697b      	ldr	r3, [r7, #20]
 80107c4:	2200      	movs	r2, #0
 80107c6:	f042 0208 	orr.w	r2, r2, #8
 80107ca:	709a      	strb	r2, [r3, #2]
 80107cc:	2200      	movs	r2, #0
 80107ce:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	2206      	movs	r2, #6
 80107d4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	2204      	movs	r2, #4
 80107da:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80107dc:	f640 0306 	movw	r3, #2054	; 0x806
 80107e0:	9300      	str	r3, [sp, #0]
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	68ba      	ldr	r2, [r7, #8]
 80107e6:	69b9      	ldr	r1, [r7, #24]
 80107e8:	68f8      	ldr	r0, [r7, #12]
 80107ea:	f001 fb7b 	bl	8011ee4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80107ee:	69b8      	ldr	r0, [r7, #24]
 80107f0:	f7f9 f9d0 	bl	8009b94 <pbuf_free>
  p = NULL;
 80107f4:	2300      	movs	r3, #0
 80107f6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80107f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80107fc:	4618      	mov	r0, r3
 80107fe:	3720      	adds	r7, #32
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}
 8010804:	0801568c 	.word	0x0801568c
 8010808:	080157dc 	.word	0x080157dc
 801080c:	08015704 	.word	0x08015704
 8010810:	0801588c 	.word	0x0801588c
 8010814:	080158c0 	.word	0x080158c0

08010818 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b088      	sub	sp, #32
 801081c:	af04      	add	r7, sp, #16
 801081e:	60f8      	str	r0, [r7, #12]
 8010820:	60b9      	str	r1, [r7, #8]
 8010822:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010834:	2201      	movs	r2, #1
 8010836:	9203      	str	r2, [sp, #12]
 8010838:	68ba      	ldr	r2, [r7, #8]
 801083a:	9202      	str	r2, [sp, #8]
 801083c:	4a06      	ldr	r2, [pc, #24]	; (8010858 <etharp_request_dst+0x40>)
 801083e:	9201      	str	r2, [sp, #4]
 8010840:	9300      	str	r3, [sp, #0]
 8010842:	4603      	mov	r3, r0
 8010844:	687a      	ldr	r2, [r7, #4]
 8010846:	68f8      	ldr	r0, [r7, #12]
 8010848:	f7ff ff5a 	bl	8010700 <etharp_raw>
 801084c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801084e:	4618      	mov	r0, r3
 8010850:	3710      	adds	r7, #16
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}
 8010856:	bf00      	nop
 8010858:	08015eb4 	.word	0x08015eb4

0801085c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010866:	4a05      	ldr	r2, [pc, #20]	; (801087c <etharp_request+0x20>)
 8010868:	6839      	ldr	r1, [r7, #0]
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f7ff ffd4 	bl	8010818 <etharp_request_dst>
 8010870:	4603      	mov	r3, r0
}
 8010872:	4618      	mov	r0, r3
 8010874:	3708      	adds	r7, #8
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}
 801087a:	bf00      	nop
 801087c:	08015eac 	.word	0x08015eac

08010880 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b08e      	sub	sp, #56	; 0x38
 8010884:	af04      	add	r7, sp, #16
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801088a:	4b79      	ldr	r3, [pc, #484]	; (8010a70 <icmp_input+0x1f0>)
 801088c:	689b      	ldr	r3, [r3, #8]
 801088e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010892:	781b      	ldrb	r3, [r3, #0]
 8010894:	f003 030f 	and.w	r3, r3, #15
 8010898:	b2db      	uxtb	r3, r3
 801089a:	009b      	lsls	r3, r3, #2
 801089c:	b2db      	uxtb	r3, r3
 801089e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80108a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80108a2:	2b13      	cmp	r3, #19
 80108a4:	f240 80cd 	bls.w	8010a42 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	895b      	ldrh	r3, [r3, #10]
 80108ac:	2b03      	cmp	r3, #3
 80108ae:	f240 80ca 	bls.w	8010a46 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	685b      	ldr	r3, [r3, #4]
 80108b6:	781b      	ldrb	r3, [r3, #0]
 80108b8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80108bc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	f000 80b7 	beq.w	8010a34 <icmp_input+0x1b4>
 80108c6:	2b08      	cmp	r3, #8
 80108c8:	f040 80b7 	bne.w	8010a3a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80108cc:	4b69      	ldr	r3, [pc, #420]	; (8010a74 <icmp_input+0x1f4>)
 80108ce:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80108d0:	4b67      	ldr	r3, [pc, #412]	; (8010a70 <icmp_input+0x1f0>)
 80108d2:	695b      	ldr	r3, [r3, #20]
 80108d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80108d8:	2be0      	cmp	r3, #224	; 0xe0
 80108da:	f000 80bb 	beq.w	8010a54 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80108de:	4b64      	ldr	r3, [pc, #400]	; (8010a70 <icmp_input+0x1f0>)
 80108e0:	695b      	ldr	r3, [r3, #20]
 80108e2:	4a63      	ldr	r2, [pc, #396]	; (8010a70 <icmp_input+0x1f0>)
 80108e4:	6812      	ldr	r2, [r2, #0]
 80108e6:	4611      	mov	r1, r2
 80108e8:	4618      	mov	r0, r3
 80108ea:	f000 fbed 	bl	80110c8 <ip4_addr_isbroadcast_u32>
 80108ee:	4603      	mov	r3, r0
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	f040 80b1 	bne.w	8010a58 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	891b      	ldrh	r3, [r3, #8]
 80108fa:	2b07      	cmp	r3, #7
 80108fc:	f240 80a5 	bls.w	8010a4a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010900:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010902:	330e      	adds	r3, #14
 8010904:	4619      	mov	r1, r3
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f7f9 f8ae 	bl	8009a68 <pbuf_add_header>
 801090c:	4603      	mov	r3, r0
 801090e:	2b00      	cmp	r3, #0
 8010910:	d04b      	beq.n	80109aa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	891a      	ldrh	r2, [r3, #8]
 8010916:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010918:	4413      	add	r3, r2
 801091a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	891b      	ldrh	r3, [r3, #8]
 8010920:	8b7a      	ldrh	r2, [r7, #26]
 8010922:	429a      	cmp	r2, r3
 8010924:	f0c0 809a 	bcc.w	8010a5c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010928:	8b7b      	ldrh	r3, [r7, #26]
 801092a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801092e:	4619      	mov	r1, r3
 8010930:	200e      	movs	r0, #14
 8010932:	f7f8 fe4b 	bl	80095cc <pbuf_alloc>
 8010936:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	2b00      	cmp	r3, #0
 801093c:	f000 8090 	beq.w	8010a60 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	895b      	ldrh	r3, [r3, #10]
 8010944:	461a      	mov	r2, r3
 8010946:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010948:	3308      	adds	r3, #8
 801094a:	429a      	cmp	r2, r3
 801094c:	d203      	bcs.n	8010956 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801094e:	6978      	ldr	r0, [r7, #20]
 8010950:	f7f9 f920 	bl	8009b94 <pbuf_free>
          goto icmperr;
 8010954:	e085      	b.n	8010a62 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	685b      	ldr	r3, [r3, #4]
 801095a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801095c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801095e:	4618      	mov	r0, r3
 8010960:	f001 fe2b 	bl	80125ba <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010964:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010966:	4619      	mov	r1, r3
 8010968:	6978      	ldr	r0, [r7, #20]
 801096a:	f7f9 f88d 	bl	8009a88 <pbuf_remove_header>
 801096e:	4603      	mov	r3, r0
 8010970:	2b00      	cmp	r3, #0
 8010972:	d009      	beq.n	8010988 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010974:	4b40      	ldr	r3, [pc, #256]	; (8010a78 <icmp_input+0x1f8>)
 8010976:	22b6      	movs	r2, #182	; 0xb6
 8010978:	4940      	ldr	r1, [pc, #256]	; (8010a7c <icmp_input+0x1fc>)
 801097a:	4841      	ldr	r0, [pc, #260]	; (8010a80 <icmp_input+0x200>)
 801097c:	f001 fcec 	bl	8012358 <iprintf>
          pbuf_free(r);
 8010980:	6978      	ldr	r0, [r7, #20]
 8010982:	f7f9 f907 	bl	8009b94 <pbuf_free>
          goto icmperr;
 8010986:	e06c      	b.n	8010a62 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010988:	6879      	ldr	r1, [r7, #4]
 801098a:	6978      	ldr	r0, [r7, #20]
 801098c:	f7f9 fa26 	bl	8009ddc <pbuf_copy>
 8010990:	4603      	mov	r3, r0
 8010992:	2b00      	cmp	r3, #0
 8010994:	d003      	beq.n	801099e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010996:	6978      	ldr	r0, [r7, #20]
 8010998:	f7f9 f8fc 	bl	8009b94 <pbuf_free>
          goto icmperr;
 801099c:	e061      	b.n	8010a62 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f7f9 f8f8 	bl	8009b94 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	607b      	str	r3, [r7, #4]
 80109a8:	e00f      	b.n	80109ca <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80109aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80109ac:	330e      	adds	r3, #14
 80109ae:	4619      	mov	r1, r3
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f7f9 f869 	bl	8009a88 <pbuf_remove_header>
 80109b6:	4603      	mov	r3, r0
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d006      	beq.n	80109ca <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80109bc:	4b2e      	ldr	r3, [pc, #184]	; (8010a78 <icmp_input+0x1f8>)
 80109be:	22c7      	movs	r2, #199	; 0xc7
 80109c0:	4930      	ldr	r1, [pc, #192]	; (8010a84 <icmp_input+0x204>)
 80109c2:	482f      	ldr	r0, [pc, #188]	; (8010a80 <icmp_input+0x200>)
 80109c4:	f001 fcc8 	bl	8012358 <iprintf>
          goto icmperr;
 80109c8:	e04b      	b.n	8010a62 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	685b      	ldr	r3, [r3, #4]
 80109ce:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80109d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80109d2:	4619      	mov	r1, r3
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f7f9 f847 	bl	8009a68 <pbuf_add_header>
 80109da:	4603      	mov	r3, r0
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d12b      	bne.n	8010a38 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	685b      	ldr	r3, [r3, #4]
 80109e4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80109e6:	69fb      	ldr	r3, [r7, #28]
 80109e8:	681a      	ldr	r2, [r3, #0]
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80109ee:	4b20      	ldr	r3, [pc, #128]	; (8010a70 <icmp_input+0x1f0>)
 80109f0:	691a      	ldr	r2, [r3, #16]
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	2200      	movs	r2, #0
 80109fa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80109fc:	693b      	ldr	r3, [r7, #16]
 80109fe:	2200      	movs	r2, #0
 8010a00:	709a      	strb	r2, [r3, #2]
 8010a02:	2200      	movs	r2, #0
 8010a04:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	22ff      	movs	r2, #255	; 0xff
 8010a0a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	2200      	movs	r2, #0
 8010a10:	729a      	strb	r2, [r3, #10]
 8010a12:	2200      	movs	r2, #0
 8010a14:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	9302      	str	r3, [sp, #8]
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	9301      	str	r3, [sp, #4]
 8010a1e:	2300      	movs	r3, #0
 8010a20:	9300      	str	r3, [sp, #0]
 8010a22:	23ff      	movs	r3, #255	; 0xff
 8010a24:	2200      	movs	r2, #0
 8010a26:	69f9      	ldr	r1, [r7, #28]
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f000 fa75 	bl	8010f18 <ip4_output_if>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010a32:	e001      	b.n	8010a38 <icmp_input+0x1b8>
      break;
 8010a34:	bf00      	nop
 8010a36:	e000      	b.n	8010a3a <icmp_input+0x1ba>
      break;
 8010a38:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f7f9 f8aa 	bl	8009b94 <pbuf_free>
  return;
 8010a40:	e013      	b.n	8010a6a <icmp_input+0x1ea>
    goto lenerr;
 8010a42:	bf00      	nop
 8010a44:	e002      	b.n	8010a4c <icmp_input+0x1cc>
    goto lenerr;
 8010a46:	bf00      	nop
 8010a48:	e000      	b.n	8010a4c <icmp_input+0x1cc>
        goto lenerr;
 8010a4a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f7f9 f8a1 	bl	8009b94 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010a52:	e00a      	b.n	8010a6a <icmp_input+0x1ea>
        goto icmperr;
 8010a54:	bf00      	nop
 8010a56:	e004      	b.n	8010a62 <icmp_input+0x1e2>
        goto icmperr;
 8010a58:	bf00      	nop
 8010a5a:	e002      	b.n	8010a62 <icmp_input+0x1e2>
          goto icmperr;
 8010a5c:	bf00      	nop
 8010a5e:	e000      	b.n	8010a62 <icmp_input+0x1e2>
          goto icmperr;
 8010a60:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f7f9 f896 	bl	8009b94 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010a68:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010a6a:	3728      	adds	r7, #40	; 0x28
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}
 8010a70:	20009740 	.word	0x20009740
 8010a74:	20009754 	.word	0x20009754
 8010a78:	08015904 	.word	0x08015904
 8010a7c:	0801593c 	.word	0x0801593c
 8010a80:	08015974 	.word	0x08015974
 8010a84:	0801599c 	.word	0x0801599c

08010a88 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b082      	sub	sp, #8
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	460b      	mov	r3, r1
 8010a92:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010a94:	78fb      	ldrb	r3, [r7, #3]
 8010a96:	461a      	mov	r2, r3
 8010a98:	2103      	movs	r1, #3
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f000 f814 	bl	8010ac8 <icmp_send_response>
}
 8010aa0:	bf00      	nop
 8010aa2:	3708      	adds	r7, #8
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}

08010aa8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b082      	sub	sp, #8
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
 8010ab0:	460b      	mov	r3, r1
 8010ab2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010ab4:	78fb      	ldrb	r3, [r7, #3]
 8010ab6:	461a      	mov	r2, r3
 8010ab8:	210b      	movs	r1, #11
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f000 f804 	bl	8010ac8 <icmp_send_response>
}
 8010ac0:	bf00      	nop
 8010ac2:	3708      	adds	r7, #8
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}

08010ac8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b08c      	sub	sp, #48	; 0x30
 8010acc:	af04      	add	r7, sp, #16
 8010ace:	6078      	str	r0, [r7, #4]
 8010ad0:	460b      	mov	r3, r1
 8010ad2:	70fb      	strb	r3, [r7, #3]
 8010ad4:	4613      	mov	r3, r2
 8010ad6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010ad8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010adc:	2124      	movs	r1, #36	; 0x24
 8010ade:	2022      	movs	r0, #34	; 0x22
 8010ae0:	f7f8 fd74 	bl	80095cc <pbuf_alloc>
 8010ae4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010ae6:	69fb      	ldr	r3, [r7, #28]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d04c      	beq.n	8010b86 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010aec:	69fb      	ldr	r3, [r7, #28]
 8010aee:	895b      	ldrh	r3, [r3, #10]
 8010af0:	2b23      	cmp	r3, #35	; 0x23
 8010af2:	d806      	bhi.n	8010b02 <icmp_send_response+0x3a>
 8010af4:	4b26      	ldr	r3, [pc, #152]	; (8010b90 <icmp_send_response+0xc8>)
 8010af6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8010afa:	4926      	ldr	r1, [pc, #152]	; (8010b94 <icmp_send_response+0xcc>)
 8010afc:	4826      	ldr	r0, [pc, #152]	; (8010b98 <icmp_send_response+0xd0>)
 8010afe:	f001 fc2b 	bl	8012358 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010b08:	69fb      	ldr	r3, [r7, #28]
 8010b0a:	685b      	ldr	r3, [r3, #4]
 8010b0c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	78fa      	ldrb	r2, [r7, #3]
 8010b12:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	78ba      	ldrb	r2, [r7, #2]
 8010b18:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010b1a:	697b      	ldr	r3, [r7, #20]
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	711a      	strb	r2, [r3, #4]
 8010b20:	2200      	movs	r2, #0
 8010b22:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010b24:	697b      	ldr	r3, [r7, #20]
 8010b26:	2200      	movs	r2, #0
 8010b28:	719a      	strb	r2, [r3, #6]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010b2e:	69fb      	ldr	r3, [r7, #28]
 8010b30:	685b      	ldr	r3, [r3, #4]
 8010b32:	f103 0008 	add.w	r0, r3, #8
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	685b      	ldr	r3, [r3, #4]
 8010b3a:	221c      	movs	r2, #28
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	f001 fd3c 	bl	80125ba <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010b42:	69bb      	ldr	r3, [r7, #24]
 8010b44:	68db      	ldr	r3, [r3, #12]
 8010b46:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010b48:	f107 030c 	add.w	r3, r7, #12
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f000 f825 	bl	8010b9c <ip4_route>
 8010b52:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010b54:	693b      	ldr	r3, [r7, #16]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d011      	beq.n	8010b7e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	709a      	strb	r2, [r3, #2]
 8010b60:	2200      	movs	r2, #0
 8010b62:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010b64:	f107 020c 	add.w	r2, r7, #12
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	9302      	str	r3, [sp, #8]
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	9301      	str	r3, [sp, #4]
 8010b70:	2300      	movs	r3, #0
 8010b72:	9300      	str	r3, [sp, #0]
 8010b74:	23ff      	movs	r3, #255	; 0xff
 8010b76:	2100      	movs	r1, #0
 8010b78:	69f8      	ldr	r0, [r7, #28]
 8010b7a:	f000 f9cd 	bl	8010f18 <ip4_output_if>
  }
  pbuf_free(q);
 8010b7e:	69f8      	ldr	r0, [r7, #28]
 8010b80:	f7f9 f808 	bl	8009b94 <pbuf_free>
 8010b84:	e000      	b.n	8010b88 <icmp_send_response+0xc0>
    return;
 8010b86:	bf00      	nop
}
 8010b88:	3720      	adds	r7, #32
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	08015904 	.word	0x08015904
 8010b94:	080159d0 	.word	0x080159d0
 8010b98:	08015974 	.word	0x08015974

08010b9c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b085      	sub	sp, #20
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010ba4:	4b33      	ldr	r3, [pc, #204]	; (8010c74 <ip4_route+0xd8>)
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	60fb      	str	r3, [r7, #12]
 8010baa:	e036      	b.n	8010c1a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010bb2:	f003 0301 	and.w	r3, r3, #1
 8010bb6:	b2db      	uxtb	r3, r3
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d02b      	beq.n	8010c14 <ip4_route+0x78>
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010bc2:	089b      	lsrs	r3, r3, #2
 8010bc4:	f003 0301 	and.w	r3, r3, #1
 8010bc8:	b2db      	uxtb	r3, r3
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d022      	beq.n	8010c14 <ip4_route+0x78>
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	3304      	adds	r3, #4
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d01d      	beq.n	8010c14 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681a      	ldr	r2, [r3, #0]
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	3304      	adds	r3, #4
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	405a      	eors	r2, r3
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	3308      	adds	r3, #8
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	4013      	ands	r3, r2
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d101      	bne.n	8010bf4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	e038      	b.n	8010c66 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010bfa:	f003 0302 	and.w	r3, r3, #2
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d108      	bne.n	8010c14 <ip4_route+0x78>
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	681a      	ldr	r2, [r3, #0]
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	330c      	adds	r3, #12
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d101      	bne.n	8010c14 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	e028      	b.n	8010c66 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	60fb      	str	r3, [r7, #12]
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d1c5      	bne.n	8010bac <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010c20:	4b15      	ldr	r3, [pc, #84]	; (8010c78 <ip4_route+0xdc>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d01a      	beq.n	8010c5e <ip4_route+0xc2>
 8010c28:	4b13      	ldr	r3, [pc, #76]	; (8010c78 <ip4_route+0xdc>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c30:	f003 0301 	and.w	r3, r3, #1
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d012      	beq.n	8010c5e <ip4_route+0xc2>
 8010c38:	4b0f      	ldr	r3, [pc, #60]	; (8010c78 <ip4_route+0xdc>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c40:	f003 0304 	and.w	r3, r3, #4
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d00a      	beq.n	8010c5e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010c48:	4b0b      	ldr	r3, [pc, #44]	; (8010c78 <ip4_route+0xdc>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	3304      	adds	r3, #4
 8010c4e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d004      	beq.n	8010c5e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	b2db      	uxtb	r3, r3
 8010c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8010c5c:	d101      	bne.n	8010c62 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	e001      	b.n	8010c66 <ip4_route+0xca>
  }

  return netif_default;
 8010c62:	4b05      	ldr	r3, [pc, #20]	; (8010c78 <ip4_route+0xdc>)
 8010c64:	681b      	ldr	r3, [r3, #0]
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	3714      	adds	r7, #20
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c70:	4770      	bx	lr
 8010c72:	bf00      	nop
 8010c74:	2000f048 	.word	0x2000f048
 8010c78:	2000f04c 	.word	0x2000f04c

08010c7c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b082      	sub	sp, #8
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c8a:	f003 0301 	and.w	r3, r3, #1
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d016      	beq.n	8010cc2 <ip4_input_accept+0x46>
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	3304      	adds	r3, #4
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d011      	beq.n	8010cc2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010c9e:	4b0b      	ldr	r3, [pc, #44]	; (8010ccc <ip4_input_accept+0x50>)
 8010ca0:	695a      	ldr	r2, [r3, #20]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	3304      	adds	r3, #4
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d008      	beq.n	8010cbe <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010cac:	4b07      	ldr	r3, [pc, #28]	; (8010ccc <ip4_input_accept+0x50>)
 8010cae:	695b      	ldr	r3, [r3, #20]
 8010cb0:	6879      	ldr	r1, [r7, #4]
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f000 fa08 	bl	80110c8 <ip4_addr_isbroadcast_u32>
 8010cb8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d001      	beq.n	8010cc2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	e000      	b.n	8010cc4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010cc2:	2300      	movs	r3, #0
}
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	3708      	adds	r7, #8
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}
 8010ccc:	20009740 	.word	0x20009740

08010cd0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b086      	sub	sp, #24
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	685b      	ldr	r3, [r3, #4]
 8010cde:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	091b      	lsrs	r3, r3, #4
 8010ce6:	b2db      	uxtb	r3, r3
 8010ce8:	2b04      	cmp	r3, #4
 8010cea:	d004      	beq.n	8010cf6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f7f8 ff51 	bl	8009b94 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	e107      	b.n	8010f06 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	781b      	ldrb	r3, [r3, #0]
 8010cfa:	f003 030f 	and.w	r3, r3, #15
 8010cfe:	b2db      	uxtb	r3, r3
 8010d00:	009b      	lsls	r3, r3, #2
 8010d02:	b2db      	uxtb	r3, r3
 8010d04:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	885b      	ldrh	r3, [r3, #2]
 8010d0a:	b29b      	uxth	r3, r3
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f7f7 fb4f 	bl	80083b0 <lwip_htons>
 8010d12:	4603      	mov	r3, r0
 8010d14:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	891b      	ldrh	r3, [r3, #8]
 8010d1a:	89ba      	ldrh	r2, [r7, #12]
 8010d1c:	429a      	cmp	r2, r3
 8010d1e:	d204      	bcs.n	8010d2a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8010d20:	89bb      	ldrh	r3, [r7, #12]
 8010d22:	4619      	mov	r1, r3
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f7f8 fdaf 	bl	8009888 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	895b      	ldrh	r3, [r3, #10]
 8010d2e:	89fa      	ldrh	r2, [r7, #14]
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d807      	bhi.n	8010d44 <ip4_input+0x74>
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	891b      	ldrh	r3, [r3, #8]
 8010d38:	89ba      	ldrh	r2, [r7, #12]
 8010d3a:	429a      	cmp	r2, r3
 8010d3c:	d802      	bhi.n	8010d44 <ip4_input+0x74>
 8010d3e:	89fb      	ldrh	r3, [r7, #14]
 8010d40:	2b13      	cmp	r3, #19
 8010d42:	d804      	bhi.n	8010d4e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f7f8 ff25 	bl	8009b94 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	e0db      	b.n	8010f06 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010d4e:	697b      	ldr	r3, [r7, #20]
 8010d50:	691b      	ldr	r3, [r3, #16]
 8010d52:	4a6f      	ldr	r2, [pc, #444]	; (8010f10 <ip4_input+0x240>)
 8010d54:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010d56:	697b      	ldr	r3, [r7, #20]
 8010d58:	68db      	ldr	r3, [r3, #12]
 8010d5a:	4a6d      	ldr	r2, [pc, #436]	; (8010f10 <ip4_input+0x240>)
 8010d5c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010d5e:	4b6c      	ldr	r3, [pc, #432]	; (8010f10 <ip4_input+0x240>)
 8010d60:	695b      	ldr	r3, [r3, #20]
 8010d62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010d66:	2be0      	cmp	r3, #224	; 0xe0
 8010d68:	d112      	bne.n	8010d90 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d70:	f003 0301 	and.w	r3, r3, #1
 8010d74:	b2db      	uxtb	r3, r3
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d007      	beq.n	8010d8a <ip4_input+0xba>
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	3304      	adds	r3, #4
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d002      	beq.n	8010d8a <ip4_input+0xba>
      netif = inp;
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	613b      	str	r3, [r7, #16]
 8010d88:	e02a      	b.n	8010de0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	613b      	str	r3, [r7, #16]
 8010d8e:	e027      	b.n	8010de0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010d90:	6838      	ldr	r0, [r7, #0]
 8010d92:	f7ff ff73 	bl	8010c7c <ip4_input_accept>
 8010d96:	4603      	mov	r3, r0
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d002      	beq.n	8010da2 <ip4_input+0xd2>
      netif = inp;
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	613b      	str	r3, [r7, #16]
 8010da0:	e01e      	b.n	8010de0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010da2:	2300      	movs	r3, #0
 8010da4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010da6:	4b5a      	ldr	r3, [pc, #360]	; (8010f10 <ip4_input+0x240>)
 8010da8:	695b      	ldr	r3, [r3, #20]
 8010daa:	b2db      	uxtb	r3, r3
 8010dac:	2b7f      	cmp	r3, #127	; 0x7f
 8010dae:	d017      	beq.n	8010de0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010db0:	4b58      	ldr	r3, [pc, #352]	; (8010f14 <ip4_input+0x244>)
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	613b      	str	r3, [r7, #16]
 8010db6:	e00e      	b.n	8010dd6 <ip4_input+0x106>
          if (netif == inp) {
 8010db8:	693a      	ldr	r2, [r7, #16]
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d006      	beq.n	8010dce <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010dc0:	6938      	ldr	r0, [r7, #16]
 8010dc2:	f7ff ff5b 	bl	8010c7c <ip4_input_accept>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d108      	bne.n	8010dde <ip4_input+0x10e>
 8010dcc:	e000      	b.n	8010dd0 <ip4_input+0x100>
            continue;
 8010dce:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	613b      	str	r3, [r7, #16]
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d1ed      	bne.n	8010db8 <ip4_input+0xe8>
 8010ddc:	e000      	b.n	8010de0 <ip4_input+0x110>
            break;
 8010dde:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010de0:	4b4b      	ldr	r3, [pc, #300]	; (8010f10 <ip4_input+0x240>)
 8010de2:	691b      	ldr	r3, [r3, #16]
 8010de4:	6839      	ldr	r1, [r7, #0]
 8010de6:	4618      	mov	r0, r3
 8010de8:	f000 f96e 	bl	80110c8 <ip4_addr_isbroadcast_u32>
 8010dec:	4603      	mov	r3, r0
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d105      	bne.n	8010dfe <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010df2:	4b47      	ldr	r3, [pc, #284]	; (8010f10 <ip4_input+0x240>)
 8010df4:	691b      	ldr	r3, [r3, #16]
 8010df6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010dfa:	2be0      	cmp	r3, #224	; 0xe0
 8010dfc:	d104      	bne.n	8010e08 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010dfe:	6878      	ldr	r0, [r7, #4]
 8010e00:	f7f8 fec8 	bl	8009b94 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010e04:	2300      	movs	r3, #0
 8010e06:	e07e      	b.n	8010f06 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d104      	bne.n	8010e18 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f7f8 fec0 	bl	8009b94 <pbuf_free>
    return ERR_OK;
 8010e14:	2300      	movs	r3, #0
 8010e16:	e076      	b.n	8010f06 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	88db      	ldrh	r3, [r3, #6]
 8010e1c:	b29b      	uxth	r3, r3
 8010e1e:	461a      	mov	r2, r3
 8010e20:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010e24:	4013      	ands	r3, r2
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d00b      	beq.n	8010e42 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	f000 fc92 	bl	8011754 <ip4_reass>
 8010e30:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d101      	bne.n	8010e3c <ip4_input+0x16c>
      return ERR_OK;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	e064      	b.n	8010f06 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	685b      	ldr	r3, [r3, #4]
 8010e40:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010e42:	4a33      	ldr	r2, [pc, #204]	; (8010f10 <ip4_input+0x240>)
 8010e44:	693b      	ldr	r3, [r7, #16]
 8010e46:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010e48:	4a31      	ldr	r2, [pc, #196]	; (8010f10 <ip4_input+0x240>)
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010e4e:	4a30      	ldr	r2, [pc, #192]	; (8010f10 <ip4_input+0x240>)
 8010e50:	697b      	ldr	r3, [r7, #20]
 8010e52:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010e54:	697b      	ldr	r3, [r7, #20]
 8010e56:	781b      	ldrb	r3, [r3, #0]
 8010e58:	f003 030f 	and.w	r3, r3, #15
 8010e5c:	b2db      	uxtb	r3, r3
 8010e5e:	009b      	lsls	r3, r3, #2
 8010e60:	b2db      	uxtb	r3, r3
 8010e62:	b29a      	uxth	r2, r3
 8010e64:	4b2a      	ldr	r3, [pc, #168]	; (8010f10 <ip4_input+0x240>)
 8010e66:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010e68:	89fb      	ldrh	r3, [r7, #14]
 8010e6a:	4619      	mov	r1, r3
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f7f8 fe0b 	bl	8009a88 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	7a5b      	ldrb	r3, [r3, #9]
 8010e76:	2b11      	cmp	r3, #17
 8010e78:	d006      	beq.n	8010e88 <ip4_input+0x1b8>
 8010e7a:	2b11      	cmp	r3, #17
 8010e7c:	dc13      	bgt.n	8010ea6 <ip4_input+0x1d6>
 8010e7e:	2b01      	cmp	r3, #1
 8010e80:	d00c      	beq.n	8010e9c <ip4_input+0x1cc>
 8010e82:	2b06      	cmp	r3, #6
 8010e84:	d005      	beq.n	8010e92 <ip4_input+0x1c2>
 8010e86:	e00e      	b.n	8010ea6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010e88:	6839      	ldr	r1, [r7, #0]
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f7fe fc68 	bl	800f760 <udp_input>
        break;
 8010e90:	e026      	b.n	8010ee0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8010e92:	6839      	ldr	r1, [r7, #0]
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f7fa fcb1 	bl	800b7fc <tcp_input>
        break;
 8010e9a:	e021      	b.n	8010ee0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010e9c:	6839      	ldr	r1, [r7, #0]
 8010e9e:	6878      	ldr	r0, [r7, #4]
 8010ea0:	f7ff fcee 	bl	8010880 <icmp_input>
        break;
 8010ea4:	e01c      	b.n	8010ee0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010ea6:	4b1a      	ldr	r3, [pc, #104]	; (8010f10 <ip4_input+0x240>)
 8010ea8:	695b      	ldr	r3, [r3, #20]
 8010eaa:	6939      	ldr	r1, [r7, #16]
 8010eac:	4618      	mov	r0, r3
 8010eae:	f000 f90b 	bl	80110c8 <ip4_addr_isbroadcast_u32>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d10f      	bne.n	8010ed8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010eb8:	4b15      	ldr	r3, [pc, #84]	; (8010f10 <ip4_input+0x240>)
 8010eba:	695b      	ldr	r3, [r3, #20]
 8010ebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010ec0:	2be0      	cmp	r3, #224	; 0xe0
 8010ec2:	d009      	beq.n	8010ed8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010ec4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010ec8:	4619      	mov	r1, r3
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f7f8 fe4f 	bl	8009b6e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010ed0:	2102      	movs	r1, #2
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f7ff fdd8 	bl	8010a88 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f7f8 fe5b 	bl	8009b94 <pbuf_free>
        break;
 8010ede:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010ee0:	4b0b      	ldr	r3, [pc, #44]	; (8010f10 <ip4_input+0x240>)
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010ee6:	4b0a      	ldr	r3, [pc, #40]	; (8010f10 <ip4_input+0x240>)
 8010ee8:	2200      	movs	r2, #0
 8010eea:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010eec:	4b08      	ldr	r3, [pc, #32]	; (8010f10 <ip4_input+0x240>)
 8010eee:	2200      	movs	r2, #0
 8010ef0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010ef2:	4b07      	ldr	r3, [pc, #28]	; (8010f10 <ip4_input+0x240>)
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010ef8:	4b05      	ldr	r3, [pc, #20]	; (8010f10 <ip4_input+0x240>)
 8010efa:	2200      	movs	r2, #0
 8010efc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010efe:	4b04      	ldr	r3, [pc, #16]	; (8010f10 <ip4_input+0x240>)
 8010f00:	2200      	movs	r2, #0
 8010f02:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010f04:	2300      	movs	r3, #0
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3718      	adds	r7, #24
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop
 8010f10:	20009740 	.word	0x20009740
 8010f14:	2000f048 	.word	0x2000f048

08010f18 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b08a      	sub	sp, #40	; 0x28
 8010f1c:	af04      	add	r7, sp, #16
 8010f1e:	60f8      	str	r0, [r7, #12]
 8010f20:	60b9      	str	r1, [r7, #8]
 8010f22:	607a      	str	r2, [r7, #4]
 8010f24:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010f26:	68bb      	ldr	r3, [r7, #8]
 8010f28:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d009      	beq.n	8010f44 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d003      	beq.n	8010f3e <ip4_output_if+0x26>
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d102      	bne.n	8010f44 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f40:	3304      	adds	r3, #4
 8010f42:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010f44:	78fa      	ldrb	r2, [r7, #3]
 8010f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f48:	9302      	str	r3, [sp, #8]
 8010f4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010f4e:	9301      	str	r3, [sp, #4]
 8010f50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010f54:	9300      	str	r3, [sp, #0]
 8010f56:	4613      	mov	r3, r2
 8010f58:	687a      	ldr	r2, [r7, #4]
 8010f5a:	6979      	ldr	r1, [r7, #20]
 8010f5c:	68f8      	ldr	r0, [r7, #12]
 8010f5e:	f000 f805 	bl	8010f6c <ip4_output_if_src>
 8010f62:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010f64:	4618      	mov	r0, r3
 8010f66:	3718      	adds	r7, #24
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}

08010f6c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b088      	sub	sp, #32
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	60f8      	str	r0, [r7, #12]
 8010f74:	60b9      	str	r1, [r7, #8]
 8010f76:	607a      	str	r2, [r7, #4]
 8010f78:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	7b9b      	ldrb	r3, [r3, #14]
 8010f7e:	2b01      	cmp	r3, #1
 8010f80:	d006      	beq.n	8010f90 <ip4_output_if_src+0x24>
 8010f82:	4b4b      	ldr	r3, [pc, #300]	; (80110b0 <ip4_output_if_src+0x144>)
 8010f84:	f44f 7255 	mov.w	r2, #852	; 0x354
 8010f88:	494a      	ldr	r1, [pc, #296]	; (80110b4 <ip4_output_if_src+0x148>)
 8010f8a:	484b      	ldr	r0, [pc, #300]	; (80110b8 <ip4_output_if_src+0x14c>)
 8010f8c:	f001 f9e4 	bl	8012358 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d060      	beq.n	8011058 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010f96:	2314      	movs	r3, #20
 8010f98:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010f9a:	2114      	movs	r1, #20
 8010f9c:	68f8      	ldr	r0, [r7, #12]
 8010f9e:	f7f8 fd63 	bl	8009a68 <pbuf_add_header>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d002      	beq.n	8010fae <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010fa8:	f06f 0301 	mvn.w	r3, #1
 8010fac:	e07c      	b.n	80110a8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	685b      	ldr	r3, [r3, #4]
 8010fb2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	895b      	ldrh	r3, [r3, #10]
 8010fb8:	2b13      	cmp	r3, #19
 8010fba:	d806      	bhi.n	8010fca <ip4_output_if_src+0x5e>
 8010fbc:	4b3c      	ldr	r3, [pc, #240]	; (80110b0 <ip4_output_if_src+0x144>)
 8010fbe:	f44f 7262 	mov.w	r2, #904	; 0x388
 8010fc2:	493e      	ldr	r1, [pc, #248]	; (80110bc <ip4_output_if_src+0x150>)
 8010fc4:	483c      	ldr	r0, [pc, #240]	; (80110b8 <ip4_output_if_src+0x14c>)
 8010fc6:	f001 f9c7 	bl	8012358 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010fca:	69fb      	ldr	r3, [r7, #28]
 8010fcc:	78fa      	ldrb	r2, [r7, #3]
 8010fce:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010fd0:	69fb      	ldr	r3, [r7, #28]
 8010fd2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010fd6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681a      	ldr	r2, [r3, #0]
 8010fdc:	69fb      	ldr	r3, [r7, #28]
 8010fde:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010fe0:	8b7b      	ldrh	r3, [r7, #26]
 8010fe2:	089b      	lsrs	r3, r3, #2
 8010fe4:	b29b      	uxth	r3, r3
 8010fe6:	b2db      	uxtb	r3, r3
 8010fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fec:	b2da      	uxtb	r2, r3
 8010fee:	69fb      	ldr	r3, [r7, #28]
 8010ff0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010ff2:	69fb      	ldr	r3, [r7, #28]
 8010ff4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010ff8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	891b      	ldrh	r3, [r3, #8]
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7f7 f9d6 	bl	80083b0 <lwip_htons>
 8011004:	4603      	mov	r3, r0
 8011006:	461a      	mov	r2, r3
 8011008:	69fb      	ldr	r3, [r7, #28]
 801100a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	2200      	movs	r2, #0
 8011010:	719a      	strb	r2, [r3, #6]
 8011012:	2200      	movs	r2, #0
 8011014:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011016:	4b2a      	ldr	r3, [pc, #168]	; (80110c0 <ip4_output_if_src+0x154>)
 8011018:	881b      	ldrh	r3, [r3, #0]
 801101a:	4618      	mov	r0, r3
 801101c:	f7f7 f9c8 	bl	80083b0 <lwip_htons>
 8011020:	4603      	mov	r3, r0
 8011022:	461a      	mov	r2, r3
 8011024:	69fb      	ldr	r3, [r7, #28]
 8011026:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011028:	4b25      	ldr	r3, [pc, #148]	; (80110c0 <ip4_output_if_src+0x154>)
 801102a:	881b      	ldrh	r3, [r3, #0]
 801102c:	3301      	adds	r3, #1
 801102e:	b29a      	uxth	r2, r3
 8011030:	4b23      	ldr	r3, [pc, #140]	; (80110c0 <ip4_output_if_src+0x154>)
 8011032:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d104      	bne.n	8011044 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801103a:	4b22      	ldr	r3, [pc, #136]	; (80110c4 <ip4_output_if_src+0x158>)
 801103c:	681a      	ldr	r2, [r3, #0]
 801103e:	69fb      	ldr	r3, [r7, #28]
 8011040:	60da      	str	r2, [r3, #12]
 8011042:	e003      	b.n	801104c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	681a      	ldr	r2, [r3, #0]
 8011048:	69fb      	ldr	r3, [r7, #28]
 801104a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801104c:	69fb      	ldr	r3, [r7, #28]
 801104e:	2200      	movs	r2, #0
 8011050:	729a      	strb	r2, [r3, #10]
 8011052:	2200      	movs	r2, #0
 8011054:	72da      	strb	r2, [r3, #11]
 8011056:	e00f      	b.n	8011078 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	895b      	ldrh	r3, [r3, #10]
 801105c:	2b13      	cmp	r3, #19
 801105e:	d802      	bhi.n	8011066 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011060:	f06f 0301 	mvn.w	r3, #1
 8011064:	e020      	b.n	80110a8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	685b      	ldr	r3, [r3, #4]
 801106a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801106c:	69fb      	ldr	r3, [r7, #28]
 801106e:	691b      	ldr	r3, [r3, #16]
 8011070:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011072:	f107 0314 	add.w	r3, r7, #20
 8011076:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801107a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801107c:	2b00      	cmp	r3, #0
 801107e:	d00c      	beq.n	801109a <ip4_output_if_src+0x12e>
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	891a      	ldrh	r2, [r3, #8]
 8011084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011086:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011088:	429a      	cmp	r2, r3
 801108a:	d906      	bls.n	801109a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801108c:	687a      	ldr	r2, [r7, #4]
 801108e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011090:	68f8      	ldr	r0, [r7, #12]
 8011092:	f000 fd53 	bl	8011b3c <ip4_frag>
 8011096:	4603      	mov	r3, r0
 8011098:	e006      	b.n	80110a8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801109a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801109c:	695b      	ldr	r3, [r3, #20]
 801109e:	687a      	ldr	r2, [r7, #4]
 80110a0:	68f9      	ldr	r1, [r7, #12]
 80110a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80110a4:	4798      	blx	r3
 80110a6:	4603      	mov	r3, r0
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3720      	adds	r7, #32
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}
 80110b0:	080159fc 	.word	0x080159fc
 80110b4:	08015a30 	.word	0x08015a30
 80110b8:	08015a3c 	.word	0x08015a3c
 80110bc:	08015a64 	.word	0x08015a64
 80110c0:	2000f1a6 	.word	0x2000f1a6
 80110c4:	08015ea8 	.word	0x08015ea8

080110c8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80110c8:	b480      	push	{r7}
 80110ca:	b085      	sub	sp, #20
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110dc:	d002      	beq.n	80110e4 <ip4_addr_isbroadcast_u32+0x1c>
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d101      	bne.n	80110e8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80110e4:	2301      	movs	r3, #1
 80110e6:	e02a      	b.n	801113e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80110ee:	f003 0302 	and.w	r3, r3, #2
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d101      	bne.n	80110fa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80110f6:	2300      	movs	r3, #0
 80110f8:	e021      	b.n	801113e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	3304      	adds	r3, #4
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	687a      	ldr	r2, [r7, #4]
 8011102:	429a      	cmp	r2, r3
 8011104:	d101      	bne.n	801110a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011106:	2300      	movs	r3, #0
 8011108:	e019      	b.n	801113e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801110a:	68fa      	ldr	r2, [r7, #12]
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	3304      	adds	r3, #4
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	405a      	eors	r2, r3
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	3308      	adds	r3, #8
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	4013      	ands	r3, r2
 801111c:	2b00      	cmp	r3, #0
 801111e:	d10d      	bne.n	801113c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	3308      	adds	r3, #8
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	43da      	mvns	r2, r3
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	3308      	adds	r3, #8
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011134:	429a      	cmp	r2, r3
 8011136:	d101      	bne.n	801113c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011138:	2301      	movs	r3, #1
 801113a:	e000      	b.n	801113e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801113c:	2300      	movs	r3, #0
  }
}
 801113e:	4618      	mov	r0, r3
 8011140:	3714      	adds	r7, #20
 8011142:	46bd      	mov	sp, r7
 8011144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011148:	4770      	bx	lr
	...

0801114c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b084      	sub	sp, #16
 8011150:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011152:	2300      	movs	r3, #0
 8011154:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011156:	4b12      	ldr	r3, [pc, #72]	; (80111a0 <ip_reass_tmr+0x54>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801115c:	e018      	b.n	8011190 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	7fdb      	ldrb	r3, [r3, #31]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d00b      	beq.n	801117e <ip_reass_tmr+0x32>
      r->timer--;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	7fdb      	ldrb	r3, [r3, #31]
 801116a:	3b01      	subs	r3, #1
 801116c:	b2da      	uxtb	r2, r3
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	60fb      	str	r3, [r7, #12]
 801117c:	e008      	b.n	8011190 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011188:	68b9      	ldr	r1, [r7, #8]
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f000 f80a 	bl	80111a4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d1e3      	bne.n	801115e <ip_reass_tmr+0x12>
    }
  }
}
 8011196:	bf00      	nop
 8011198:	bf00      	nop
 801119a:	3710      	adds	r7, #16
 801119c:	46bd      	mov	sp, r7
 801119e:	bd80      	pop	{r7, pc}
 80111a0:	2000f1a8 	.word	0x2000f1a8

080111a4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b088      	sub	sp, #32
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
 80111ac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80111ae:	2300      	movs	r3, #0
 80111b0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80111b2:	683a      	ldr	r2, [r7, #0]
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d105      	bne.n	80111c6 <ip_reass_free_complete_datagram+0x22>
 80111ba:	4b45      	ldr	r3, [pc, #276]	; (80112d0 <ip_reass_free_complete_datagram+0x12c>)
 80111bc:	22ab      	movs	r2, #171	; 0xab
 80111be:	4945      	ldr	r1, [pc, #276]	; (80112d4 <ip_reass_free_complete_datagram+0x130>)
 80111c0:	4845      	ldr	r0, [pc, #276]	; (80112d8 <ip_reass_free_complete_datagram+0x134>)
 80111c2:	f001 f8c9 	bl	8012358 <iprintf>
  if (prev != NULL) {
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d00a      	beq.n	80111e2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	687a      	ldr	r2, [r7, #4]
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d005      	beq.n	80111e2 <ip_reass_free_complete_datagram+0x3e>
 80111d6:	4b3e      	ldr	r3, [pc, #248]	; (80112d0 <ip_reass_free_complete_datagram+0x12c>)
 80111d8:	22ad      	movs	r2, #173	; 0xad
 80111da:	4940      	ldr	r1, [pc, #256]	; (80112dc <ip_reass_free_complete_datagram+0x138>)
 80111dc:	483e      	ldr	r0, [pc, #248]	; (80112d8 <ip_reass_free_complete_datagram+0x134>)
 80111de:	f001 f8bb 	bl	8012358 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	685b      	ldr	r3, [r3, #4]
 80111e6:	685b      	ldr	r3, [r3, #4]
 80111e8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	889b      	ldrh	r3, [r3, #4]
 80111ee:	b29b      	uxth	r3, r3
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d12a      	bne.n	801124a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	685b      	ldr	r3, [r3, #4]
 80111f8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	681a      	ldr	r2, [r3, #0]
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011202:	69bb      	ldr	r3, [r7, #24]
 8011204:	6858      	ldr	r0, [r3, #4]
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	3308      	adds	r3, #8
 801120a:	2214      	movs	r2, #20
 801120c:	4619      	mov	r1, r3
 801120e:	f001 f9d4 	bl	80125ba <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011212:	2101      	movs	r1, #1
 8011214:	69b8      	ldr	r0, [r7, #24]
 8011216:	f7ff fc47 	bl	8010aa8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801121a:	69b8      	ldr	r0, [r7, #24]
 801121c:	f7f8 fd48 	bl	8009cb0 <pbuf_clen>
 8011220:	4603      	mov	r3, r0
 8011222:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011224:	8bfa      	ldrh	r2, [r7, #30]
 8011226:	8a7b      	ldrh	r3, [r7, #18]
 8011228:	4413      	add	r3, r2
 801122a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801122e:	db05      	blt.n	801123c <ip_reass_free_complete_datagram+0x98>
 8011230:	4b27      	ldr	r3, [pc, #156]	; (80112d0 <ip_reass_free_complete_datagram+0x12c>)
 8011232:	22bc      	movs	r2, #188	; 0xbc
 8011234:	492a      	ldr	r1, [pc, #168]	; (80112e0 <ip_reass_free_complete_datagram+0x13c>)
 8011236:	4828      	ldr	r0, [pc, #160]	; (80112d8 <ip_reass_free_complete_datagram+0x134>)
 8011238:	f001 f88e 	bl	8012358 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801123c:	8bfa      	ldrh	r2, [r7, #30]
 801123e:	8a7b      	ldrh	r3, [r7, #18]
 8011240:	4413      	add	r3, r2
 8011242:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011244:	69b8      	ldr	r0, [r7, #24]
 8011246:	f7f8 fca5 	bl	8009b94 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	685b      	ldr	r3, [r3, #4]
 801124e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011250:	e01f      	b.n	8011292 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011252:	69bb      	ldr	r3, [r7, #24]
 8011254:	685b      	ldr	r3, [r3, #4]
 8011256:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011258:	69bb      	ldr	r3, [r7, #24]
 801125a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801125c:	697b      	ldr	r3, [r7, #20]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011262:	68f8      	ldr	r0, [r7, #12]
 8011264:	f7f8 fd24 	bl	8009cb0 <pbuf_clen>
 8011268:	4603      	mov	r3, r0
 801126a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801126c:	8bfa      	ldrh	r2, [r7, #30]
 801126e:	8a7b      	ldrh	r3, [r7, #18]
 8011270:	4413      	add	r3, r2
 8011272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011276:	db05      	blt.n	8011284 <ip_reass_free_complete_datagram+0xe0>
 8011278:	4b15      	ldr	r3, [pc, #84]	; (80112d0 <ip_reass_free_complete_datagram+0x12c>)
 801127a:	22cc      	movs	r2, #204	; 0xcc
 801127c:	4918      	ldr	r1, [pc, #96]	; (80112e0 <ip_reass_free_complete_datagram+0x13c>)
 801127e:	4816      	ldr	r0, [pc, #88]	; (80112d8 <ip_reass_free_complete_datagram+0x134>)
 8011280:	f001 f86a 	bl	8012358 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011284:	8bfa      	ldrh	r2, [r7, #30]
 8011286:	8a7b      	ldrh	r3, [r7, #18]
 8011288:	4413      	add	r3, r2
 801128a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801128c:	68f8      	ldr	r0, [r7, #12]
 801128e:	f7f8 fc81 	bl	8009b94 <pbuf_free>
  while (p != NULL) {
 8011292:	69bb      	ldr	r3, [r7, #24]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d1dc      	bne.n	8011252 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011298:	6839      	ldr	r1, [r7, #0]
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	f000 f8c2 	bl	8011424 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80112a0:	4b10      	ldr	r3, [pc, #64]	; (80112e4 <ip_reass_free_complete_datagram+0x140>)
 80112a2:	881b      	ldrh	r3, [r3, #0]
 80112a4:	8bfa      	ldrh	r2, [r7, #30]
 80112a6:	429a      	cmp	r2, r3
 80112a8:	d905      	bls.n	80112b6 <ip_reass_free_complete_datagram+0x112>
 80112aa:	4b09      	ldr	r3, [pc, #36]	; (80112d0 <ip_reass_free_complete_datagram+0x12c>)
 80112ac:	22d2      	movs	r2, #210	; 0xd2
 80112ae:	490e      	ldr	r1, [pc, #56]	; (80112e8 <ip_reass_free_complete_datagram+0x144>)
 80112b0:	4809      	ldr	r0, [pc, #36]	; (80112d8 <ip_reass_free_complete_datagram+0x134>)
 80112b2:	f001 f851 	bl	8012358 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80112b6:	4b0b      	ldr	r3, [pc, #44]	; (80112e4 <ip_reass_free_complete_datagram+0x140>)
 80112b8:	881a      	ldrh	r2, [r3, #0]
 80112ba:	8bfb      	ldrh	r3, [r7, #30]
 80112bc:	1ad3      	subs	r3, r2, r3
 80112be:	b29a      	uxth	r2, r3
 80112c0:	4b08      	ldr	r3, [pc, #32]	; (80112e4 <ip_reass_free_complete_datagram+0x140>)
 80112c2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80112c4:	8bfb      	ldrh	r3, [r7, #30]
}
 80112c6:	4618      	mov	r0, r3
 80112c8:	3720      	adds	r7, #32
 80112ca:	46bd      	mov	sp, r7
 80112cc:	bd80      	pop	{r7, pc}
 80112ce:	bf00      	nop
 80112d0:	08015a94 	.word	0x08015a94
 80112d4:	08015ad0 	.word	0x08015ad0
 80112d8:	08015adc 	.word	0x08015adc
 80112dc:	08015b04 	.word	0x08015b04
 80112e0:	08015b18 	.word	0x08015b18
 80112e4:	2000f1ac 	.word	0x2000f1ac
 80112e8:	08015b38 	.word	0x08015b38

080112ec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b08a      	sub	sp, #40	; 0x28
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80112f6:	2300      	movs	r3, #0
 80112f8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80112fa:	2300      	movs	r3, #0
 80112fc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80112fe:	2300      	movs	r3, #0
 8011300:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011302:	2300      	movs	r3, #0
 8011304:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011306:	2300      	movs	r3, #0
 8011308:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801130a:	4b28      	ldr	r3, [pc, #160]	; (80113ac <ip_reass_remove_oldest_datagram+0xc0>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011310:	e030      	b.n	8011374 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011314:	695a      	ldr	r2, [r3, #20]
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	68db      	ldr	r3, [r3, #12]
 801131a:	429a      	cmp	r2, r3
 801131c:	d10c      	bne.n	8011338 <ip_reass_remove_oldest_datagram+0x4c>
 801131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011320:	699a      	ldr	r2, [r3, #24]
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	691b      	ldr	r3, [r3, #16]
 8011326:	429a      	cmp	r2, r3
 8011328:	d106      	bne.n	8011338 <ip_reass_remove_oldest_datagram+0x4c>
 801132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132c:	899a      	ldrh	r2, [r3, #12]
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	889b      	ldrh	r3, [r3, #4]
 8011332:	b29b      	uxth	r3, r3
 8011334:	429a      	cmp	r2, r3
 8011336:	d014      	beq.n	8011362 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011338:	693b      	ldr	r3, [r7, #16]
 801133a:	3301      	adds	r3, #1
 801133c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801133e:	6a3b      	ldr	r3, [r7, #32]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d104      	bne.n	801134e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011346:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011348:	69fb      	ldr	r3, [r7, #28]
 801134a:	61bb      	str	r3, [r7, #24]
 801134c:	e009      	b.n	8011362 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011350:	7fda      	ldrb	r2, [r3, #31]
 8011352:	6a3b      	ldr	r3, [r7, #32]
 8011354:	7fdb      	ldrb	r3, [r3, #31]
 8011356:	429a      	cmp	r2, r3
 8011358:	d803      	bhi.n	8011362 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801135c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801135e:	69fb      	ldr	r3, [r7, #28]
 8011360:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d001      	beq.n	801136e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801136c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011376:	2b00      	cmp	r3, #0
 8011378:	d1cb      	bne.n	8011312 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801137a:	6a3b      	ldr	r3, [r7, #32]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d008      	beq.n	8011392 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011380:	69b9      	ldr	r1, [r7, #24]
 8011382:	6a38      	ldr	r0, [r7, #32]
 8011384:	f7ff ff0e 	bl	80111a4 <ip_reass_free_complete_datagram>
 8011388:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801138a:	697a      	ldr	r2, [r7, #20]
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	4413      	add	r3, r2
 8011390:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011392:	697a      	ldr	r2, [r7, #20]
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	429a      	cmp	r2, r3
 8011398:	da02      	bge.n	80113a0 <ip_reass_remove_oldest_datagram+0xb4>
 801139a:	693b      	ldr	r3, [r7, #16]
 801139c:	2b01      	cmp	r3, #1
 801139e:	dcac      	bgt.n	80112fa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80113a0:	697b      	ldr	r3, [r7, #20]
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3728      	adds	r7, #40	; 0x28
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}
 80113aa:	bf00      	nop
 80113ac:	2000f1a8 	.word	0x2000f1a8

080113b0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b084      	sub	sp, #16
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80113ba:	2004      	movs	r0, #4
 80113bc:	f7f7 fcd0 	bl	8008d60 <memp_malloc>
 80113c0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d110      	bne.n	80113ea <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80113c8:	6839      	ldr	r1, [r7, #0]
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	f7ff ff8e 	bl	80112ec <ip_reass_remove_oldest_datagram>
 80113d0:	4602      	mov	r2, r0
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	4293      	cmp	r3, r2
 80113d6:	dc03      	bgt.n	80113e0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80113d8:	2004      	movs	r0, #4
 80113da:	f7f7 fcc1 	bl	8008d60 <memp_malloc>
 80113de:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d101      	bne.n	80113ea <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80113e6:	2300      	movs	r3, #0
 80113e8:	e016      	b.n	8011418 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80113ea:	2220      	movs	r2, #32
 80113ec:	2100      	movs	r1, #0
 80113ee:	68f8      	ldr	r0, [r7, #12]
 80113f0:	f001 f817 	bl	8012422 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	220f      	movs	r2, #15
 80113f8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80113fa:	4b09      	ldr	r3, [pc, #36]	; (8011420 <ip_reass_enqueue_new_datagram+0x70>)
 80113fc:	681a      	ldr	r2, [r3, #0]
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011402:	4a07      	ldr	r2, [pc, #28]	; (8011420 <ip_reass_enqueue_new_datagram+0x70>)
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	3308      	adds	r3, #8
 801140c:	2214      	movs	r2, #20
 801140e:	6879      	ldr	r1, [r7, #4]
 8011410:	4618      	mov	r0, r3
 8011412:	f001 f8d2 	bl	80125ba <memcpy>
  return ipr;
 8011416:	68fb      	ldr	r3, [r7, #12]
}
 8011418:	4618      	mov	r0, r3
 801141a:	3710      	adds	r7, #16
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}
 8011420:	2000f1a8 	.word	0x2000f1a8

08011424 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b082      	sub	sp, #8
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
 801142c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801142e:	4b10      	ldr	r3, [pc, #64]	; (8011470 <ip_reass_dequeue_datagram+0x4c>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	687a      	ldr	r2, [r7, #4]
 8011434:	429a      	cmp	r2, r3
 8011436:	d104      	bne.n	8011442 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	4a0c      	ldr	r2, [pc, #48]	; (8011470 <ip_reass_dequeue_datagram+0x4c>)
 801143e:	6013      	str	r3, [r2, #0]
 8011440:	e00d      	b.n	801145e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d106      	bne.n	8011456 <ip_reass_dequeue_datagram+0x32>
 8011448:	4b0a      	ldr	r3, [pc, #40]	; (8011474 <ip_reass_dequeue_datagram+0x50>)
 801144a:	f240 1245 	movw	r2, #325	; 0x145
 801144e:	490a      	ldr	r1, [pc, #40]	; (8011478 <ip_reass_dequeue_datagram+0x54>)
 8011450:	480a      	ldr	r0, [pc, #40]	; (801147c <ip_reass_dequeue_datagram+0x58>)
 8011452:	f000 ff81 	bl	8012358 <iprintf>
    prev->next = ipr->next;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801145e:	6879      	ldr	r1, [r7, #4]
 8011460:	2004      	movs	r0, #4
 8011462:	f7f7 fcf3 	bl	8008e4c <memp_free>
}
 8011466:	bf00      	nop
 8011468:	3708      	adds	r7, #8
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}
 801146e:	bf00      	nop
 8011470:	2000f1a8 	.word	0x2000f1a8
 8011474:	08015a94 	.word	0x08015a94
 8011478:	08015b5c 	.word	0x08015b5c
 801147c:	08015adc 	.word	0x08015adc

08011480 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b08c      	sub	sp, #48	; 0x30
 8011484:	af00      	add	r7, sp, #0
 8011486:	60f8      	str	r0, [r7, #12]
 8011488:	60b9      	str	r1, [r7, #8]
 801148a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801148c:	2300      	movs	r3, #0
 801148e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011490:	2301      	movs	r3, #1
 8011492:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	685b      	ldr	r3, [r3, #4]
 8011498:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801149a:	69fb      	ldr	r3, [r7, #28]
 801149c:	885b      	ldrh	r3, [r3, #2]
 801149e:	b29b      	uxth	r3, r3
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7f6 ff85 	bl	80083b0 <lwip_htons>
 80114a6:	4603      	mov	r3, r0
 80114a8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80114aa:	69fb      	ldr	r3, [r7, #28]
 80114ac:	781b      	ldrb	r3, [r3, #0]
 80114ae:	f003 030f 	and.w	r3, r3, #15
 80114b2:	b2db      	uxtb	r3, r3
 80114b4:	009b      	lsls	r3, r3, #2
 80114b6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80114b8:	7e7b      	ldrb	r3, [r7, #25]
 80114ba:	b29b      	uxth	r3, r3
 80114bc:	8b7a      	ldrh	r2, [r7, #26]
 80114be:	429a      	cmp	r2, r3
 80114c0:	d202      	bcs.n	80114c8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80114c2:	f04f 33ff 	mov.w	r3, #4294967295
 80114c6:	e135      	b.n	8011734 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80114c8:	7e7b      	ldrb	r3, [r7, #25]
 80114ca:	b29b      	uxth	r3, r3
 80114cc:	8b7a      	ldrh	r2, [r7, #26]
 80114ce:	1ad3      	subs	r3, r2, r3
 80114d0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80114d2:	69fb      	ldr	r3, [r7, #28]
 80114d4:	88db      	ldrh	r3, [r3, #6]
 80114d6:	b29b      	uxth	r3, r3
 80114d8:	4618      	mov	r0, r3
 80114da:	f7f6 ff69 	bl	80083b0 <lwip_htons>
 80114de:	4603      	mov	r3, r0
 80114e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80114e4:	b29b      	uxth	r3, r3
 80114e6:	00db      	lsls	r3, r3, #3
 80114e8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	685b      	ldr	r3, [r3, #4]
 80114ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80114f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f2:	2200      	movs	r2, #0
 80114f4:	701a      	strb	r2, [r3, #0]
 80114f6:	2200      	movs	r2, #0
 80114f8:	705a      	strb	r2, [r3, #1]
 80114fa:	2200      	movs	r2, #0
 80114fc:	709a      	strb	r2, [r3, #2]
 80114fe:	2200      	movs	r2, #0
 8011500:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011504:	8afa      	ldrh	r2, [r7, #22]
 8011506:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011508:	8afa      	ldrh	r2, [r7, #22]
 801150a:	8b7b      	ldrh	r3, [r7, #26]
 801150c:	4413      	add	r3, r2
 801150e:	b29a      	uxth	r2, r3
 8011510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011512:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011516:	88db      	ldrh	r3, [r3, #6]
 8011518:	b29b      	uxth	r3, r3
 801151a:	8afa      	ldrh	r2, [r7, #22]
 801151c:	429a      	cmp	r2, r3
 801151e:	d902      	bls.n	8011526 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011520:	f04f 33ff 	mov.w	r3, #4294967295
 8011524:	e106      	b.n	8011734 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	685b      	ldr	r3, [r3, #4]
 801152a:	627b      	str	r3, [r7, #36]	; 0x24
 801152c:	e068      	b.n	8011600 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011530:	685b      	ldr	r3, [r3, #4]
 8011532:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011536:	889b      	ldrh	r3, [r3, #4]
 8011538:	b29a      	uxth	r2, r3
 801153a:	693b      	ldr	r3, [r7, #16]
 801153c:	889b      	ldrh	r3, [r3, #4]
 801153e:	b29b      	uxth	r3, r3
 8011540:	429a      	cmp	r2, r3
 8011542:	d235      	bcs.n	80115b0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011548:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801154a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801154c:	2b00      	cmp	r3, #0
 801154e:	d020      	beq.n	8011592 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011552:	889b      	ldrh	r3, [r3, #4]
 8011554:	b29a      	uxth	r2, r3
 8011556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011558:	88db      	ldrh	r3, [r3, #6]
 801155a:	b29b      	uxth	r3, r3
 801155c:	429a      	cmp	r2, r3
 801155e:	d307      	bcc.n	8011570 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011562:	88db      	ldrh	r3, [r3, #6]
 8011564:	b29a      	uxth	r2, r3
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	889b      	ldrh	r3, [r3, #4]
 801156a:	b29b      	uxth	r3, r3
 801156c:	429a      	cmp	r2, r3
 801156e:	d902      	bls.n	8011576 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011570:	f04f 33ff 	mov.w	r3, #4294967295
 8011574:	e0de      	b.n	8011734 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011578:	68ba      	ldr	r2, [r7, #8]
 801157a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801157c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801157e:	88db      	ldrh	r3, [r3, #6]
 8011580:	b29a      	uxth	r2, r3
 8011582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011584:	889b      	ldrh	r3, [r3, #4]
 8011586:	b29b      	uxth	r3, r3
 8011588:	429a      	cmp	r2, r3
 801158a:	d03d      	beq.n	8011608 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801158c:	2300      	movs	r3, #0
 801158e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011590:	e03a      	b.n	8011608 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011594:	88db      	ldrh	r3, [r3, #6]
 8011596:	b29a      	uxth	r2, r3
 8011598:	693b      	ldr	r3, [r7, #16]
 801159a:	889b      	ldrh	r3, [r3, #4]
 801159c:	b29b      	uxth	r3, r3
 801159e:	429a      	cmp	r2, r3
 80115a0:	d902      	bls.n	80115a8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80115a2:	f04f 33ff 	mov.w	r3, #4294967295
 80115a6:	e0c5      	b.n	8011734 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	68ba      	ldr	r2, [r7, #8]
 80115ac:	605a      	str	r2, [r3, #4]
      break;
 80115ae:	e02b      	b.n	8011608 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80115b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115b2:	889b      	ldrh	r3, [r3, #4]
 80115b4:	b29a      	uxth	r2, r3
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	889b      	ldrh	r3, [r3, #4]
 80115ba:	b29b      	uxth	r3, r3
 80115bc:	429a      	cmp	r2, r3
 80115be:	d102      	bne.n	80115c6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80115c0:	f04f 33ff 	mov.w	r3, #4294967295
 80115c4:	e0b6      	b.n	8011734 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80115c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c8:	889b      	ldrh	r3, [r3, #4]
 80115ca:	b29a      	uxth	r2, r3
 80115cc:	693b      	ldr	r3, [r7, #16]
 80115ce:	88db      	ldrh	r3, [r3, #6]
 80115d0:	b29b      	uxth	r3, r3
 80115d2:	429a      	cmp	r2, r3
 80115d4:	d202      	bcs.n	80115dc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80115d6:	f04f 33ff 	mov.w	r3, #4294967295
 80115da:	e0ab      	b.n	8011734 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80115dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d009      	beq.n	80115f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80115e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e4:	88db      	ldrh	r3, [r3, #6]
 80115e6:	b29a      	uxth	r2, r3
 80115e8:	693b      	ldr	r3, [r7, #16]
 80115ea:	889b      	ldrh	r3, [r3, #4]
 80115ec:	b29b      	uxth	r3, r3
 80115ee:	429a      	cmp	r2, r3
 80115f0:	d001      	beq.n	80115f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80115f2:	2300      	movs	r3, #0
 80115f4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80115f6:	693b      	ldr	r3, [r7, #16]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80115fc:	693b      	ldr	r3, [r7, #16]
 80115fe:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011602:	2b00      	cmp	r3, #0
 8011604:	d193      	bne.n	801152e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8011606:	e000      	b.n	801160a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011608:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801160c:	2b00      	cmp	r3, #0
 801160e:	d12d      	bne.n	801166c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011612:	2b00      	cmp	r3, #0
 8011614:	d01c      	beq.n	8011650 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011618:	88db      	ldrh	r3, [r3, #6]
 801161a:	b29a      	uxth	r2, r3
 801161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801161e:	889b      	ldrh	r3, [r3, #4]
 8011620:	b29b      	uxth	r3, r3
 8011622:	429a      	cmp	r2, r3
 8011624:	d906      	bls.n	8011634 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011626:	4b45      	ldr	r3, [pc, #276]	; (801173c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011628:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801162c:	4944      	ldr	r1, [pc, #272]	; (8011740 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801162e:	4845      	ldr	r0, [pc, #276]	; (8011744 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011630:	f000 fe92 	bl	8012358 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011636:	68ba      	ldr	r2, [r7, #8]
 8011638:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801163c:	88db      	ldrh	r3, [r3, #6]
 801163e:	b29a      	uxth	r2, r3
 8011640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011642:	889b      	ldrh	r3, [r3, #4]
 8011644:	b29b      	uxth	r3, r3
 8011646:	429a      	cmp	r2, r3
 8011648:	d010      	beq.n	801166c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801164a:	2300      	movs	r3, #0
 801164c:	623b      	str	r3, [r7, #32]
 801164e:	e00d      	b.n	801166c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	685b      	ldr	r3, [r3, #4]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d006      	beq.n	8011666 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011658:	4b38      	ldr	r3, [pc, #224]	; (801173c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801165a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801165e:	493a      	ldr	r1, [pc, #232]	; (8011748 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011660:	4838      	ldr	r0, [pc, #224]	; (8011744 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011662:	f000 fe79 	bl	8012358 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	68ba      	ldr	r2, [r7, #8]
 801166a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d105      	bne.n	801167e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	7f9b      	ldrb	r3, [r3, #30]
 8011676:	f003 0301 	and.w	r3, r3, #1
 801167a:	2b00      	cmp	r3, #0
 801167c:	d059      	beq.n	8011732 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801167e:	6a3b      	ldr	r3, [r7, #32]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d04f      	beq.n	8011724 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d006      	beq.n	801169a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	685b      	ldr	r3, [r3, #4]
 8011690:	685b      	ldr	r3, [r3, #4]
 8011692:	889b      	ldrh	r3, [r3, #4]
 8011694:	b29b      	uxth	r3, r3
 8011696:	2b00      	cmp	r3, #0
 8011698:	d002      	beq.n	80116a0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801169a:	2300      	movs	r3, #0
 801169c:	623b      	str	r3, [r7, #32]
 801169e:	e041      	b.n	8011724 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80116a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80116a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80116aa:	e012      	b.n	80116d2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80116ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ae:	685b      	ldr	r3, [r3, #4]
 80116b0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80116b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b4:	88db      	ldrh	r3, [r3, #6]
 80116b6:	b29a      	uxth	r2, r3
 80116b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ba:	889b      	ldrh	r3, [r3, #4]
 80116bc:	b29b      	uxth	r3, r3
 80116be:	429a      	cmp	r2, r3
 80116c0:	d002      	beq.n	80116c8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80116c2:	2300      	movs	r3, #0
 80116c4:	623b      	str	r3, [r7, #32]
            break;
 80116c6:	e007      	b.n	80116d8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80116c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ca:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80116cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80116d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d1e9      	bne.n	80116ac <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80116d8:	6a3b      	ldr	r3, [r7, #32]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d022      	beq.n	8011724 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	685b      	ldr	r3, [r3, #4]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d106      	bne.n	80116f4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80116e6:	4b15      	ldr	r3, [pc, #84]	; (801173c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80116e8:	f240 12df 	movw	r2, #479	; 0x1df
 80116ec:	4917      	ldr	r1, [pc, #92]	; (801174c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80116ee:	4815      	ldr	r0, [pc, #84]	; (8011744 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80116f0:	f000 fe32 	bl	8012358 <iprintf>
          LWIP_ASSERT("sanity check",
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	685b      	ldr	r3, [r3, #4]
 80116f8:	685b      	ldr	r3, [r3, #4]
 80116fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d106      	bne.n	801170e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011700:	4b0e      	ldr	r3, [pc, #56]	; (801173c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011702:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011706:	4911      	ldr	r1, [pc, #68]	; (801174c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011708:	480e      	ldr	r0, [pc, #56]	; (8011744 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801170a:	f000 fe25 	bl	8012358 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801170e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d006      	beq.n	8011724 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8011716:	4b09      	ldr	r3, [pc, #36]	; (801173c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011718:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801171c:	490c      	ldr	r1, [pc, #48]	; (8011750 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801171e:	4809      	ldr	r0, [pc, #36]	; (8011744 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011720:	f000 fe1a 	bl	8012358 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011724:	6a3b      	ldr	r3, [r7, #32]
 8011726:	2b00      	cmp	r3, #0
 8011728:	bf14      	ite	ne
 801172a:	2301      	movne	r3, #1
 801172c:	2300      	moveq	r3, #0
 801172e:	b2db      	uxtb	r3, r3
 8011730:	e000      	b.n	8011734 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011732:	2300      	movs	r3, #0
}
 8011734:	4618      	mov	r0, r3
 8011736:	3730      	adds	r7, #48	; 0x30
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}
 801173c:	08015a94 	.word	0x08015a94
 8011740:	08015b78 	.word	0x08015b78
 8011744:	08015adc 	.word	0x08015adc
 8011748:	08015b98 	.word	0x08015b98
 801174c:	08015bd0 	.word	0x08015bd0
 8011750:	08015be0 	.word	0x08015be0

08011754 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b08e      	sub	sp, #56	; 0x38
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	685b      	ldr	r3, [r3, #4]
 8011760:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011764:	781b      	ldrb	r3, [r3, #0]
 8011766:	f003 030f 	and.w	r3, r3, #15
 801176a:	b2db      	uxtb	r3, r3
 801176c:	009b      	lsls	r3, r3, #2
 801176e:	b2db      	uxtb	r3, r3
 8011770:	2b14      	cmp	r3, #20
 8011772:	f040 8171 	bne.w	8011a58 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8011776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011778:	88db      	ldrh	r3, [r3, #6]
 801177a:	b29b      	uxth	r3, r3
 801177c:	4618      	mov	r0, r3
 801177e:	f7f6 fe17 	bl	80083b0 <lwip_htons>
 8011782:	4603      	mov	r3, r0
 8011784:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011788:	b29b      	uxth	r3, r3
 801178a:	00db      	lsls	r3, r3, #3
 801178c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801178e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011790:	885b      	ldrh	r3, [r3, #2]
 8011792:	b29b      	uxth	r3, r3
 8011794:	4618      	mov	r0, r3
 8011796:	f7f6 fe0b 	bl	80083b0 <lwip_htons>
 801179a:	4603      	mov	r3, r0
 801179c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801179e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117a0:	781b      	ldrb	r3, [r3, #0]
 80117a2:	f003 030f 	and.w	r3, r3, #15
 80117a6:	b2db      	uxtb	r3, r3
 80117a8:	009b      	lsls	r3, r3, #2
 80117aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80117ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80117b2:	b29b      	uxth	r3, r3
 80117b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80117b6:	429a      	cmp	r2, r3
 80117b8:	f0c0 8150 	bcc.w	8011a5c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80117bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80117c0:	b29b      	uxth	r3, r3
 80117c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80117c4:	1ad3      	subs	r3, r2, r3
 80117c6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f7f8 fa71 	bl	8009cb0 <pbuf_clen>
 80117ce:	4603      	mov	r3, r0
 80117d0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80117d2:	4b8c      	ldr	r3, [pc, #560]	; (8011a04 <ip4_reass+0x2b0>)
 80117d4:	881b      	ldrh	r3, [r3, #0]
 80117d6:	461a      	mov	r2, r3
 80117d8:	8c3b      	ldrh	r3, [r7, #32]
 80117da:	4413      	add	r3, r2
 80117dc:	2b0a      	cmp	r3, #10
 80117de:	dd10      	ble.n	8011802 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80117e0:	8c3b      	ldrh	r3, [r7, #32]
 80117e2:	4619      	mov	r1, r3
 80117e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80117e6:	f7ff fd81 	bl	80112ec <ip_reass_remove_oldest_datagram>
 80117ea:	4603      	mov	r3, r0
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	f000 8137 	beq.w	8011a60 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80117f2:	4b84      	ldr	r3, [pc, #528]	; (8011a04 <ip4_reass+0x2b0>)
 80117f4:	881b      	ldrh	r3, [r3, #0]
 80117f6:	461a      	mov	r2, r3
 80117f8:	8c3b      	ldrh	r3, [r7, #32]
 80117fa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80117fc:	2b0a      	cmp	r3, #10
 80117fe:	f300 812f 	bgt.w	8011a60 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011802:	4b81      	ldr	r3, [pc, #516]	; (8011a08 <ip4_reass+0x2b4>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	633b      	str	r3, [r7, #48]	; 0x30
 8011808:	e015      	b.n	8011836 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801180a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801180c:	695a      	ldr	r2, [r3, #20]
 801180e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011810:	68db      	ldr	r3, [r3, #12]
 8011812:	429a      	cmp	r2, r3
 8011814:	d10c      	bne.n	8011830 <ip4_reass+0xdc>
 8011816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011818:	699a      	ldr	r2, [r3, #24]
 801181a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801181c:	691b      	ldr	r3, [r3, #16]
 801181e:	429a      	cmp	r2, r3
 8011820:	d106      	bne.n	8011830 <ip4_reass+0xdc>
 8011822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011824:	899a      	ldrh	r2, [r3, #12]
 8011826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011828:	889b      	ldrh	r3, [r3, #4]
 801182a:	b29b      	uxth	r3, r3
 801182c:	429a      	cmp	r2, r3
 801182e:	d006      	beq.n	801183e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	633b      	str	r3, [r7, #48]	; 0x30
 8011836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011838:	2b00      	cmp	r3, #0
 801183a:	d1e6      	bne.n	801180a <ip4_reass+0xb6>
 801183c:	e000      	b.n	8011840 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801183e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011842:	2b00      	cmp	r3, #0
 8011844:	d109      	bne.n	801185a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011846:	8c3b      	ldrh	r3, [r7, #32]
 8011848:	4619      	mov	r1, r3
 801184a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801184c:	f7ff fdb0 	bl	80113b0 <ip_reass_enqueue_new_datagram>
 8011850:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011854:	2b00      	cmp	r3, #0
 8011856:	d11c      	bne.n	8011892 <ip4_reass+0x13e>
      goto nullreturn;
 8011858:	e105      	b.n	8011a66 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801185a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801185c:	88db      	ldrh	r3, [r3, #6]
 801185e:	b29b      	uxth	r3, r3
 8011860:	4618      	mov	r0, r3
 8011862:	f7f6 fda5 	bl	80083b0 <lwip_htons>
 8011866:	4603      	mov	r3, r0
 8011868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801186c:	2b00      	cmp	r3, #0
 801186e:	d110      	bne.n	8011892 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011872:	89db      	ldrh	r3, [r3, #14]
 8011874:	4618      	mov	r0, r3
 8011876:	f7f6 fd9b 	bl	80083b0 <lwip_htons>
 801187a:	4603      	mov	r3, r0
 801187c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011880:	2b00      	cmp	r3, #0
 8011882:	d006      	beq.n	8011892 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011886:	3308      	adds	r3, #8
 8011888:	2214      	movs	r2, #20
 801188a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801188c:	4618      	mov	r0, r3
 801188e:	f000 fe94 	bl	80125ba <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011894:	88db      	ldrh	r3, [r3, #6]
 8011896:	b29b      	uxth	r3, r3
 8011898:	f003 0320 	and.w	r3, r3, #32
 801189c:	2b00      	cmp	r3, #0
 801189e:	bf0c      	ite	eq
 80118a0:	2301      	moveq	r3, #1
 80118a2:	2300      	movne	r3, #0
 80118a4:	b2db      	uxtb	r3, r3
 80118a6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80118a8:	69fb      	ldr	r3, [r7, #28]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d00e      	beq.n	80118cc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80118ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80118b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80118b2:	4413      	add	r3, r2
 80118b4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80118b6:	8b7a      	ldrh	r2, [r7, #26]
 80118b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80118ba:	429a      	cmp	r2, r3
 80118bc:	f0c0 80a0 	bcc.w	8011a00 <ip4_reass+0x2ac>
 80118c0:	8b7b      	ldrh	r3, [r7, #26]
 80118c2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80118c6:	4293      	cmp	r3, r2
 80118c8:	f200 809a 	bhi.w	8011a00 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80118cc:	69fa      	ldr	r2, [r7, #28]
 80118ce:	6879      	ldr	r1, [r7, #4]
 80118d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118d2:	f7ff fdd5 	bl	8011480 <ip_reass_chain_frag_into_datagram_and_validate>
 80118d6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80118d8:	697b      	ldr	r3, [r7, #20]
 80118da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118de:	f000 809b 	beq.w	8011a18 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80118e2:	4b48      	ldr	r3, [pc, #288]	; (8011a04 <ip4_reass+0x2b0>)
 80118e4:	881a      	ldrh	r2, [r3, #0]
 80118e6:	8c3b      	ldrh	r3, [r7, #32]
 80118e8:	4413      	add	r3, r2
 80118ea:	b29a      	uxth	r2, r3
 80118ec:	4b45      	ldr	r3, [pc, #276]	; (8011a04 <ip4_reass+0x2b0>)
 80118ee:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80118f0:	69fb      	ldr	r3, [r7, #28]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d00d      	beq.n	8011912 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80118f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80118f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80118fa:	4413      	add	r3, r2
 80118fc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80118fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011900:	8a7a      	ldrh	r2, [r7, #18]
 8011902:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011906:	7f9b      	ldrb	r3, [r3, #30]
 8011908:	f043 0301 	orr.w	r3, r3, #1
 801190c:	b2da      	uxtb	r2, r3
 801190e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011910:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011912:	697b      	ldr	r3, [r7, #20]
 8011914:	2b01      	cmp	r3, #1
 8011916:	d171      	bne.n	80119fc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801191a:	8b9b      	ldrh	r3, [r3, #28]
 801191c:	3314      	adds	r3, #20
 801191e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011922:	685b      	ldr	r3, [r3, #4]
 8011924:	685b      	ldr	r3, [r3, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801192a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801192c:	685b      	ldr	r3, [r3, #4]
 801192e:	685b      	ldr	r3, [r3, #4]
 8011930:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011934:	3308      	adds	r3, #8
 8011936:	2214      	movs	r2, #20
 8011938:	4619      	mov	r1, r3
 801193a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801193c:	f000 fe3d 	bl	80125ba <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011940:	8a3b      	ldrh	r3, [r7, #16]
 8011942:	4618      	mov	r0, r3
 8011944:	f7f6 fd34 	bl	80083b0 <lwip_htons>
 8011948:	4603      	mov	r3, r0
 801194a:	461a      	mov	r2, r3
 801194c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801194e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011952:	2200      	movs	r2, #0
 8011954:	719a      	strb	r2, [r3, #6]
 8011956:	2200      	movs	r2, #0
 8011958:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801195a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801195c:	2200      	movs	r2, #0
 801195e:	729a      	strb	r2, [r3, #10]
 8011960:	2200      	movs	r2, #0
 8011962:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011966:	685b      	ldr	r3, [r3, #4]
 8011968:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801196a:	e00d      	b.n	8011988 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801196c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801196e:	685b      	ldr	r3, [r3, #4]
 8011970:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8011972:	2114      	movs	r1, #20
 8011974:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011976:	f7f8 f887 	bl	8009a88 <pbuf_remove_header>
      pbuf_cat(p, r);
 801197a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801197c:	6878      	ldr	r0, [r7, #4]
 801197e:	f7f8 f9d7 	bl	8009d30 <pbuf_cat>
      r = iprh->next_pbuf;
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8011988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801198a:	2b00      	cmp	r3, #0
 801198c:	d1ee      	bne.n	801196c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801198e:	4b1e      	ldr	r3, [pc, #120]	; (8011a08 <ip4_reass+0x2b4>)
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011994:	429a      	cmp	r2, r3
 8011996:	d102      	bne.n	801199e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8011998:	2300      	movs	r3, #0
 801199a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801199c:	e010      	b.n	80119c0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801199e:	4b1a      	ldr	r3, [pc, #104]	; (8011a08 <ip4_reass+0x2b4>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119a4:	e007      	b.n	80119b6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80119a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d006      	beq.n	80119be <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80119b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d1f4      	bne.n	80119a6 <ip4_reass+0x252>
 80119bc:	e000      	b.n	80119c0 <ip4_reass+0x26c>
          break;
 80119be:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80119c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80119c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80119c4:	f7ff fd2e 	bl	8011424 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80119c8:	6878      	ldr	r0, [r7, #4]
 80119ca:	f7f8 f971 	bl	8009cb0 <pbuf_clen>
 80119ce:	4603      	mov	r3, r0
 80119d0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80119d2:	4b0c      	ldr	r3, [pc, #48]	; (8011a04 <ip4_reass+0x2b0>)
 80119d4:	881b      	ldrh	r3, [r3, #0]
 80119d6:	8c3a      	ldrh	r2, [r7, #32]
 80119d8:	429a      	cmp	r2, r3
 80119da:	d906      	bls.n	80119ea <ip4_reass+0x296>
 80119dc:	4b0b      	ldr	r3, [pc, #44]	; (8011a0c <ip4_reass+0x2b8>)
 80119de:	f240 229b 	movw	r2, #667	; 0x29b
 80119e2:	490b      	ldr	r1, [pc, #44]	; (8011a10 <ip4_reass+0x2bc>)
 80119e4:	480b      	ldr	r0, [pc, #44]	; (8011a14 <ip4_reass+0x2c0>)
 80119e6:	f000 fcb7 	bl	8012358 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80119ea:	4b06      	ldr	r3, [pc, #24]	; (8011a04 <ip4_reass+0x2b0>)
 80119ec:	881a      	ldrh	r2, [r3, #0]
 80119ee:	8c3b      	ldrh	r3, [r7, #32]
 80119f0:	1ad3      	subs	r3, r2, r3
 80119f2:	b29a      	uxth	r2, r3
 80119f4:	4b03      	ldr	r3, [pc, #12]	; (8011a04 <ip4_reass+0x2b0>)
 80119f6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	e038      	b.n	8011a6e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80119fc:	2300      	movs	r3, #0
 80119fe:	e036      	b.n	8011a6e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8011a00:	bf00      	nop
 8011a02:	e00a      	b.n	8011a1a <ip4_reass+0x2c6>
 8011a04:	2000f1ac 	.word	0x2000f1ac
 8011a08:	2000f1a8 	.word	0x2000f1a8
 8011a0c:	08015a94 	.word	0x08015a94
 8011a10:	08015c04 	.word	0x08015c04
 8011a14:	08015adc 	.word	0x08015adc
    goto nullreturn_ipr;
 8011a18:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d106      	bne.n	8011a2e <ip4_reass+0x2da>
 8011a20:	4b15      	ldr	r3, [pc, #84]	; (8011a78 <ip4_reass+0x324>)
 8011a22:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011a26:	4915      	ldr	r1, [pc, #84]	; (8011a7c <ip4_reass+0x328>)
 8011a28:	4815      	ldr	r0, [pc, #84]	; (8011a80 <ip4_reass+0x32c>)
 8011a2a:	f000 fc95 	bl	8012358 <iprintf>
  if (ipr->p == NULL) {
 8011a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a30:	685b      	ldr	r3, [r3, #4]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d116      	bne.n	8011a64 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011a36:	4b13      	ldr	r3, [pc, #76]	; (8011a84 <ip4_reass+0x330>)
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a3c:	429a      	cmp	r2, r3
 8011a3e:	d006      	beq.n	8011a4e <ip4_reass+0x2fa>
 8011a40:	4b0d      	ldr	r3, [pc, #52]	; (8011a78 <ip4_reass+0x324>)
 8011a42:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011a46:	4910      	ldr	r1, [pc, #64]	; (8011a88 <ip4_reass+0x334>)
 8011a48:	480d      	ldr	r0, [pc, #52]	; (8011a80 <ip4_reass+0x32c>)
 8011a4a:	f000 fc85 	bl	8012358 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8011a4e:	2100      	movs	r1, #0
 8011a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a52:	f7ff fce7 	bl	8011424 <ip_reass_dequeue_datagram>
 8011a56:	e006      	b.n	8011a66 <ip4_reass+0x312>
    goto nullreturn;
 8011a58:	bf00      	nop
 8011a5a:	e004      	b.n	8011a66 <ip4_reass+0x312>
    goto nullreturn;
 8011a5c:	bf00      	nop
 8011a5e:	e002      	b.n	8011a66 <ip4_reass+0x312>
      goto nullreturn;
 8011a60:	bf00      	nop
 8011a62:	e000      	b.n	8011a66 <ip4_reass+0x312>
  }

nullreturn:
 8011a64:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f7f8 f894 	bl	8009b94 <pbuf_free>
  return NULL;
 8011a6c:	2300      	movs	r3, #0
}
 8011a6e:	4618      	mov	r0, r3
 8011a70:	3738      	adds	r7, #56	; 0x38
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}
 8011a76:	bf00      	nop
 8011a78:	08015a94 	.word	0x08015a94
 8011a7c:	08015c20 	.word	0x08015c20
 8011a80:	08015adc 	.word	0x08015adc
 8011a84:	2000f1a8 	.word	0x2000f1a8
 8011a88:	08015c2c 	.word	0x08015c2c

08011a8c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011a90:	2005      	movs	r0, #5
 8011a92:	f7f7 f965 	bl	8008d60 <memp_malloc>
 8011a96:	4603      	mov	r3, r0
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	bd80      	pop	{r7, pc}

08011a9c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b082      	sub	sp, #8
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d106      	bne.n	8011ab8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8011aaa:	4b07      	ldr	r3, [pc, #28]	; (8011ac8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011aac:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8011ab0:	4906      	ldr	r1, [pc, #24]	; (8011acc <ip_frag_free_pbuf_custom_ref+0x30>)
 8011ab2:	4807      	ldr	r0, [pc, #28]	; (8011ad0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8011ab4:	f000 fc50 	bl	8012358 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011ab8:	6879      	ldr	r1, [r7, #4]
 8011aba:	2005      	movs	r0, #5
 8011abc:	f7f7 f9c6 	bl	8008e4c <memp_free>
}
 8011ac0:	bf00      	nop
 8011ac2:	3708      	adds	r7, #8
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}
 8011ac8:	08015a94 	.word	0x08015a94
 8011acc:	08015c4c 	.word	0x08015c4c
 8011ad0:	08015adc 	.word	0x08015adc

08011ad4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b084      	sub	sp, #16
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d106      	bne.n	8011af4 <ipfrag_free_pbuf_custom+0x20>
 8011ae6:	4b11      	ldr	r3, [pc, #68]	; (8011b2c <ipfrag_free_pbuf_custom+0x58>)
 8011ae8:	f240 22ce 	movw	r2, #718	; 0x2ce
 8011aec:	4910      	ldr	r1, [pc, #64]	; (8011b30 <ipfrag_free_pbuf_custom+0x5c>)
 8011aee:	4811      	ldr	r0, [pc, #68]	; (8011b34 <ipfrag_free_pbuf_custom+0x60>)
 8011af0:	f000 fc32 	bl	8012358 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011af4:	68fa      	ldr	r2, [r7, #12]
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	429a      	cmp	r2, r3
 8011afa:	d006      	beq.n	8011b0a <ipfrag_free_pbuf_custom+0x36>
 8011afc:	4b0b      	ldr	r3, [pc, #44]	; (8011b2c <ipfrag_free_pbuf_custom+0x58>)
 8011afe:	f240 22cf 	movw	r2, #719	; 0x2cf
 8011b02:	490d      	ldr	r1, [pc, #52]	; (8011b38 <ipfrag_free_pbuf_custom+0x64>)
 8011b04:	480b      	ldr	r0, [pc, #44]	; (8011b34 <ipfrag_free_pbuf_custom+0x60>)
 8011b06:	f000 fc27 	bl	8012358 <iprintf>
  if (pcr->original != NULL) {
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	695b      	ldr	r3, [r3, #20]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d004      	beq.n	8011b1c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	695b      	ldr	r3, [r3, #20]
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7f8 f83c 	bl	8009b94 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011b1c:	68f8      	ldr	r0, [r7, #12]
 8011b1e:	f7ff ffbd 	bl	8011a9c <ip_frag_free_pbuf_custom_ref>
}
 8011b22:	bf00      	nop
 8011b24:	3710      	adds	r7, #16
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bd80      	pop	{r7, pc}
 8011b2a:	bf00      	nop
 8011b2c:	08015a94 	.word	0x08015a94
 8011b30:	08015c58 	.word	0x08015c58
 8011b34:	08015adc 	.word	0x08015adc
 8011b38:	08015c64 	.word	0x08015c64

08011b3c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b094      	sub	sp, #80	; 0x50
 8011b40:	af02      	add	r7, sp, #8
 8011b42:	60f8      	str	r0, [r7, #12]
 8011b44:	60b9      	str	r1, [r7, #8]
 8011b46:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011b52:	3b14      	subs	r3, #20
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	da00      	bge.n	8011b5a <ip4_frag+0x1e>
 8011b58:	3307      	adds	r3, #7
 8011b5a:	10db      	asrs	r3, r3, #3
 8011b5c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011b5e:	2314      	movs	r3, #20
 8011b60:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	685b      	ldr	r3, [r3, #4]
 8011b66:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8011b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b6a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	f003 030f 	and.w	r3, r3, #15
 8011b74:	b2db      	uxtb	r3, r3
 8011b76:	009b      	lsls	r3, r3, #2
 8011b78:	b2db      	uxtb	r3, r3
 8011b7a:	2b14      	cmp	r3, #20
 8011b7c:	d002      	beq.n	8011b84 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8011b7e:	f06f 0305 	mvn.w	r3, #5
 8011b82:	e110      	b.n	8011da6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	895b      	ldrh	r3, [r3, #10]
 8011b88:	2b13      	cmp	r3, #19
 8011b8a:	d809      	bhi.n	8011ba0 <ip4_frag+0x64>
 8011b8c:	4b88      	ldr	r3, [pc, #544]	; (8011db0 <ip4_frag+0x274>)
 8011b8e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8011b92:	4988      	ldr	r1, [pc, #544]	; (8011db4 <ip4_frag+0x278>)
 8011b94:	4888      	ldr	r0, [pc, #544]	; (8011db8 <ip4_frag+0x27c>)
 8011b96:	f000 fbdf 	bl	8012358 <iprintf>
 8011b9a:	f06f 0305 	mvn.w	r3, #5
 8011b9e:	e102      	b.n	8011da6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba2:	88db      	ldrh	r3, [r3, #6]
 8011ba4:	b29b      	uxth	r3, r3
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f7f6 fc02 	bl	80083b0 <lwip_htons>
 8011bac:	4603      	mov	r3, r0
 8011bae:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8011bb0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011bb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011bb6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011bba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011bbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011bc0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	891b      	ldrh	r3, [r3, #8]
 8011bc6:	3b14      	subs	r3, #20
 8011bc8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8011bcc:	e0e1      	b.n	8011d92 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011bce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011bd0:	00db      	lsls	r3, r3, #3
 8011bd2:	b29b      	uxth	r3, r3
 8011bd4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011bd8:	4293      	cmp	r3, r2
 8011bda:	bf28      	it	cs
 8011bdc:	4613      	movcs	r3, r2
 8011bde:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011be0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011be4:	2114      	movs	r1, #20
 8011be6:	200e      	movs	r0, #14
 8011be8:	f7f7 fcf0 	bl	80095cc <pbuf_alloc>
 8011bec:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8011bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	f000 80d5 	beq.w	8011da0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bf8:	895b      	ldrh	r3, [r3, #10]
 8011bfa:	2b13      	cmp	r3, #19
 8011bfc:	d806      	bhi.n	8011c0c <ip4_frag+0xd0>
 8011bfe:	4b6c      	ldr	r3, [pc, #432]	; (8011db0 <ip4_frag+0x274>)
 8011c00:	f44f 7249 	mov.w	r2, #804	; 0x324
 8011c04:	496d      	ldr	r1, [pc, #436]	; (8011dbc <ip4_frag+0x280>)
 8011c06:	486c      	ldr	r0, [pc, #432]	; (8011db8 <ip4_frag+0x27c>)
 8011c08:	f000 fba6 	bl	8012358 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c0e:	685b      	ldr	r3, [r3, #4]
 8011c10:	2214      	movs	r2, #20
 8011c12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011c14:	4618      	mov	r0, r3
 8011c16:	f000 fcd0 	bl	80125ba <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c1c:	685b      	ldr	r3, [r3, #4]
 8011c1e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8011c20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011c22:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8011c26:	e064      	b.n	8011cf2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	895a      	ldrh	r2, [r3, #10]
 8011c2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011c2e:	1ad3      	subs	r3, r2, r3
 8011c30:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	895b      	ldrh	r3, [r3, #10]
 8011c36:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011c38:	429a      	cmp	r2, r3
 8011c3a:	d906      	bls.n	8011c4a <ip4_frag+0x10e>
 8011c3c:	4b5c      	ldr	r3, [pc, #368]	; (8011db0 <ip4_frag+0x274>)
 8011c3e:	f240 322d 	movw	r2, #813	; 0x32d
 8011c42:	495f      	ldr	r1, [pc, #380]	; (8011dc0 <ip4_frag+0x284>)
 8011c44:	485c      	ldr	r0, [pc, #368]	; (8011db8 <ip4_frag+0x27c>)
 8011c46:	f000 fb87 	bl	8012358 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011c4a:	8bfa      	ldrh	r2, [r7, #30]
 8011c4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011c50:	4293      	cmp	r3, r2
 8011c52:	bf28      	it	cs
 8011c54:	4613      	movcs	r3, r2
 8011c56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011c5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d105      	bne.n	8011c6e <ip4_frag+0x132>
        poff = 0;
 8011c62:	2300      	movs	r3, #0
 8011c64:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	60fb      	str	r3, [r7, #12]
        continue;
 8011c6c:	e041      	b.n	8011cf2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011c6e:	f7ff ff0d 	bl	8011a8c <ip_frag_alloc_pbuf_custom_ref>
 8011c72:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011c74:	69bb      	ldr	r3, [r7, #24]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d103      	bne.n	8011c82 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011c7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c7c:	f7f7 ff8a 	bl	8009b94 <pbuf_free>
        goto memerr;
 8011c80:	e08f      	b.n	8011da2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011c82:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011c88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011c8a:	4413      	add	r3, r2
 8011c8c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8011c90:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8011c94:	9201      	str	r2, [sp, #4]
 8011c96:	9300      	str	r3, [sp, #0]
 8011c98:	4603      	mov	r3, r0
 8011c9a:	2241      	movs	r2, #65	; 0x41
 8011c9c:	2000      	movs	r0, #0
 8011c9e:	f7f7 fdbf 	bl	8009820 <pbuf_alloced_custom>
 8011ca2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011ca4:	697b      	ldr	r3, [r7, #20]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d106      	bne.n	8011cb8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011caa:	69b8      	ldr	r0, [r7, #24]
 8011cac:	f7ff fef6 	bl	8011a9c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011cb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cb2:	f7f7 ff6f 	bl	8009b94 <pbuf_free>
        goto memerr;
 8011cb6:	e074      	b.n	8011da2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8011cb8:	68f8      	ldr	r0, [r7, #12]
 8011cba:	f7f8 f811 	bl	8009ce0 <pbuf_ref>
      pcr->original = p;
 8011cbe:	69bb      	ldr	r3, [r7, #24]
 8011cc0:	68fa      	ldr	r2, [r7, #12]
 8011cc2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011cc4:	69bb      	ldr	r3, [r7, #24]
 8011cc6:	4a3f      	ldr	r2, [pc, #252]	; (8011dc4 <ip4_frag+0x288>)
 8011cc8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011cca:	6979      	ldr	r1, [r7, #20]
 8011ccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cce:	f7f8 f82f 	bl	8009d30 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011cd2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011cd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011cda:	1ad3      	subs	r3, r2, r3
 8011cdc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8011ce0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d004      	beq.n	8011cf2 <ip4_frag+0x1b6>
        poff = 0;
 8011ce8:	2300      	movs	r3, #0
 8011cea:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011cf2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d196      	bne.n	8011c28 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011cfa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011cfc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011d00:	4413      	add	r3, r2
 8011d02:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011d08:	f1a3 0213 	sub.w	r2, r3, #19
 8011d0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d10:	429a      	cmp	r2, r3
 8011d12:	bfcc      	ite	gt
 8011d14:	2301      	movgt	r3, #1
 8011d16:	2300      	movle	r3, #0
 8011d18:	b2db      	uxtb	r3, r3
 8011d1a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011d1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011d20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011d24:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011d26:	6a3b      	ldr	r3, [r7, #32]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d002      	beq.n	8011d32 <ip4_frag+0x1f6>
 8011d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d003      	beq.n	8011d3a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011d32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011d34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011d38:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011d3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	f7f6 fb37 	bl	80083b0 <lwip_htons>
 8011d42:	4603      	mov	r3, r0
 8011d44:	461a      	mov	r2, r3
 8011d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d48:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011d4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011d4c:	3314      	adds	r3, #20
 8011d4e:	b29b      	uxth	r3, r3
 8011d50:	4618      	mov	r0, r3
 8011d52:	f7f6 fb2d 	bl	80083b0 <lwip_htons>
 8011d56:	4603      	mov	r3, r0
 8011d58:	461a      	mov	r2, r3
 8011d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d5c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d60:	2200      	movs	r2, #0
 8011d62:	729a      	strb	r2, [r3, #10]
 8011d64:	2200      	movs	r2, #0
 8011d66:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011d68:	68bb      	ldr	r3, [r7, #8]
 8011d6a:	695b      	ldr	r3, [r3, #20]
 8011d6c:	687a      	ldr	r2, [r7, #4]
 8011d6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d70:	68b8      	ldr	r0, [r7, #8]
 8011d72:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d76:	f7f7 ff0d 	bl	8009b94 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8011d7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011d80:	1ad3      	subs	r3, r2, r3
 8011d82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8011d86:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011d8a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011d8c:	4413      	add	r3, r2
 8011d8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8011d92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	f47f af19 	bne.w	8011bce <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	e002      	b.n	8011da6 <ip4_frag+0x26a>
      goto memerr;
 8011da0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011da2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	3748      	adds	r7, #72	; 0x48
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}
 8011dae:	bf00      	nop
 8011db0:	08015a94 	.word	0x08015a94
 8011db4:	08015c70 	.word	0x08015c70
 8011db8:	08015adc 	.word	0x08015adc
 8011dbc:	08015c8c 	.word	0x08015c8c
 8011dc0:	08015cac 	.word	0x08015cac
 8011dc4:	08011ad5 	.word	0x08011ad5

08011dc8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b086      	sub	sp, #24
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011dd2:	230e      	movs	r3, #14
 8011dd4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	895b      	ldrh	r3, [r3, #10]
 8011dda:	2b0e      	cmp	r3, #14
 8011ddc:	d96e      	bls.n	8011ebc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	7bdb      	ldrb	r3, [r3, #15]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d106      	bne.n	8011df4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011dec:	3301      	adds	r3, #1
 8011dee:	b2da      	uxtb	r2, r3
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	685b      	ldr	r3, [r3, #4]
 8011df8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011dfa:	693b      	ldr	r3, [r7, #16]
 8011dfc:	7b1a      	ldrb	r2, [r3, #12]
 8011dfe:	7b5b      	ldrb	r3, [r3, #13]
 8011e00:	021b      	lsls	r3, r3, #8
 8011e02:	4313      	orrs	r3, r2
 8011e04:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011e06:	693b      	ldr	r3, [r7, #16]
 8011e08:	781b      	ldrb	r3, [r3, #0]
 8011e0a:	f003 0301 	and.w	r3, r3, #1
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d023      	beq.n	8011e5a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011e12:	693b      	ldr	r3, [r7, #16]
 8011e14:	781b      	ldrb	r3, [r3, #0]
 8011e16:	2b01      	cmp	r3, #1
 8011e18:	d10f      	bne.n	8011e3a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011e1a:	693b      	ldr	r3, [r7, #16]
 8011e1c:	785b      	ldrb	r3, [r3, #1]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d11b      	bne.n	8011e5a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011e22:	693b      	ldr	r3, [r7, #16]
 8011e24:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011e26:	2b5e      	cmp	r3, #94	; 0x5e
 8011e28:	d117      	bne.n	8011e5a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	7b5b      	ldrb	r3, [r3, #13]
 8011e2e:	f043 0310 	orr.w	r3, r3, #16
 8011e32:	b2da      	uxtb	r2, r3
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	735a      	strb	r2, [r3, #13]
 8011e38:	e00f      	b.n	8011e5a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011e3a:	693b      	ldr	r3, [r7, #16]
 8011e3c:	2206      	movs	r2, #6
 8011e3e:	4928      	ldr	r1, [pc, #160]	; (8011ee0 <ethernet_input+0x118>)
 8011e40:	4618      	mov	r0, r3
 8011e42:	f000 fade 	bl	8012402 <memcmp>
 8011e46:	4603      	mov	r3, r0
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d106      	bne.n	8011e5a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	7b5b      	ldrb	r3, [r3, #13]
 8011e50:	f043 0308 	orr.w	r3, r3, #8
 8011e54:	b2da      	uxtb	r2, r3
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011e5a:	89fb      	ldrh	r3, [r7, #14]
 8011e5c:	2b08      	cmp	r3, #8
 8011e5e:	d003      	beq.n	8011e68 <ethernet_input+0xa0>
 8011e60:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8011e64:	d014      	beq.n	8011e90 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011e66:	e032      	b.n	8011ece <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e6e:	f003 0308 	and.w	r3, r3, #8
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d024      	beq.n	8011ec0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011e76:	8afb      	ldrh	r3, [r7, #22]
 8011e78:	4619      	mov	r1, r3
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f7f7 fe04 	bl	8009a88 <pbuf_remove_header>
 8011e80:	4603      	mov	r3, r0
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d11e      	bne.n	8011ec4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8011e86:	6839      	ldr	r1, [r7, #0]
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	f7fe ff21 	bl	8010cd0 <ip4_input>
      break;
 8011e8e:	e013      	b.n	8011eb8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011e90:	683b      	ldr	r3, [r7, #0]
 8011e92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e96:	f003 0308 	and.w	r3, r3, #8
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d014      	beq.n	8011ec8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011e9e:	8afb      	ldrh	r3, [r7, #22]
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f7f7 fdf0 	bl	8009a88 <pbuf_remove_header>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d10e      	bne.n	8011ecc <ethernet_input+0x104>
        etharp_input(p, netif);
 8011eae:	6839      	ldr	r1, [r7, #0]
 8011eb0:	6878      	ldr	r0, [r7, #4]
 8011eb2:	f7fe f8c1 	bl	8010038 <etharp_input>
      break;
 8011eb6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011eb8:	2300      	movs	r3, #0
 8011eba:	e00c      	b.n	8011ed6 <ethernet_input+0x10e>
    goto free_and_return;
 8011ebc:	bf00      	nop
 8011ebe:	e006      	b.n	8011ece <ethernet_input+0x106>
        goto free_and_return;
 8011ec0:	bf00      	nop
 8011ec2:	e004      	b.n	8011ece <ethernet_input+0x106>
        goto free_and_return;
 8011ec4:	bf00      	nop
 8011ec6:	e002      	b.n	8011ece <ethernet_input+0x106>
        goto free_and_return;
 8011ec8:	bf00      	nop
 8011eca:	e000      	b.n	8011ece <ethernet_input+0x106>
        goto free_and_return;
 8011ecc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f7f7 fe60 	bl	8009b94 <pbuf_free>
  return ERR_OK;
 8011ed4:	2300      	movs	r3, #0
}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	3718      	adds	r7, #24
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}
 8011ede:	bf00      	nop
 8011ee0:	08015eac 	.word	0x08015eac

08011ee4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b086      	sub	sp, #24
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	60f8      	str	r0, [r7, #12]
 8011eec:	60b9      	str	r1, [r7, #8]
 8011eee:	607a      	str	r2, [r7, #4]
 8011ef0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011ef2:	8c3b      	ldrh	r3, [r7, #32]
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7f6 fa5b 	bl	80083b0 <lwip_htons>
 8011efa:	4603      	mov	r3, r0
 8011efc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011efe:	210e      	movs	r1, #14
 8011f00:	68b8      	ldr	r0, [r7, #8]
 8011f02:	f7f7 fdb1 	bl	8009a68 <pbuf_add_header>
 8011f06:	4603      	mov	r3, r0
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d125      	bne.n	8011f58 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011f0c:	68bb      	ldr	r3, [r7, #8]
 8011f0e:	685b      	ldr	r3, [r3, #4]
 8011f10:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	8afa      	ldrh	r2, [r7, #22]
 8011f16:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011f18:	693b      	ldr	r3, [r7, #16]
 8011f1a:	2206      	movs	r2, #6
 8011f1c:	6839      	ldr	r1, [r7, #0]
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f000 fb4b 	bl	80125ba <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011f24:	693b      	ldr	r3, [r7, #16]
 8011f26:	3306      	adds	r3, #6
 8011f28:	2206      	movs	r2, #6
 8011f2a:	6879      	ldr	r1, [r7, #4]
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f000 fb44 	bl	80125ba <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011f38:	2b06      	cmp	r3, #6
 8011f3a:	d006      	beq.n	8011f4a <ethernet_output+0x66>
 8011f3c:	4b0a      	ldr	r3, [pc, #40]	; (8011f68 <ethernet_output+0x84>)
 8011f3e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8011f42:	490a      	ldr	r1, [pc, #40]	; (8011f6c <ethernet_output+0x88>)
 8011f44:	480a      	ldr	r0, [pc, #40]	; (8011f70 <ethernet_output+0x8c>)
 8011f46:	f000 fa07 	bl	8012358 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	699b      	ldr	r3, [r3, #24]
 8011f4e:	68b9      	ldr	r1, [r7, #8]
 8011f50:	68f8      	ldr	r0, [r7, #12]
 8011f52:	4798      	blx	r3
 8011f54:	4603      	mov	r3, r0
 8011f56:	e002      	b.n	8011f5e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011f58:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011f5a:	f06f 0301 	mvn.w	r3, #1
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3718      	adds	r7, #24
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	bf00      	nop
 8011f68:	08015cbc 	.word	0x08015cbc
 8011f6c:	08015cf4 	.word	0x08015cf4
 8011f70:	08015d28 	.word	0x08015d28

08011f74 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b082      	sub	sp, #8
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
 8011f7c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8011f7e:	683b      	ldr	r3, [r7, #0]
 8011f80:	2200      	movs	r2, #0
 8011f82:	2104      	movs	r1, #4
 8011f84:	4618      	mov	r0, r3
 8011f86:	f7f2 fdc5 	bl	8004b14 <osMessageQueueNew>
 8011f8a:	4602      	mov	r2, r0
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d102      	bne.n	8011f9e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8011f98:	f04f 33ff 	mov.w	r3, #4294967295
 8011f9c:	e000      	b.n	8011fa0 <sys_mbox_new+0x2c>

  return ERR_OK;
 8011f9e:	2300      	movs	r3, #0
}
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	3708      	adds	r7, #8
 8011fa4:	46bd      	mov	sp, r7
 8011fa6:	bd80      	pop	{r7, pc}

08011fa8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b084      	sub	sp, #16
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
 8011fb0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	6818      	ldr	r0, [r3, #0]
 8011fb6:	4639      	mov	r1, r7
 8011fb8:	2300      	movs	r3, #0
 8011fba:	2200      	movs	r2, #0
 8011fbc:	f7f2 fe1e 	bl	8004bfc <osMessageQueuePut>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d102      	bne.n	8011fcc <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	73fb      	strb	r3, [r7, #15]
 8011fca:	e001      	b.n	8011fd0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8011fcc:	23ff      	movs	r3, #255	; 0xff
 8011fce:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8011fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	3710      	adds	r7, #16
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	bd80      	pop	{r7, pc}

08011fdc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	b086      	sub	sp, #24
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	60f8      	str	r0, [r7, #12]
 8011fe4:	60b9      	str	r1, [r7, #8]
 8011fe6:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8011fe8:	f7f2 faa4 	bl	8004534 <osKernelGetTickCount>
 8011fec:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d013      	beq.n	801201c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	6818      	ldr	r0, [r3, #0]
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	68b9      	ldr	r1, [r7, #8]
 8011ffe:	f7f2 fe5d 	bl	8004cbc <osMessageQueueGet>
 8012002:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8012004:	693b      	ldr	r3, [r7, #16]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d105      	bne.n	8012016 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801200a:	f7f2 fa93 	bl	8004534 <osKernelGetTickCount>
 801200e:	4602      	mov	r2, r0
 8012010:	697b      	ldr	r3, [r7, #20]
 8012012:	1ad3      	subs	r3, r2, r3
 8012014:	e00f      	b.n	8012036 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8012016:	f04f 33ff 	mov.w	r3, #4294967295
 801201a:	e00c      	b.n	8012036 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	6818      	ldr	r0, [r3, #0]
 8012020:	f04f 33ff 	mov.w	r3, #4294967295
 8012024:	2200      	movs	r2, #0
 8012026:	68b9      	ldr	r1, [r7, #8]
 8012028:	f7f2 fe48 	bl	8004cbc <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801202c:	f7f2 fa82 	bl	8004534 <osKernelGetTickCount>
 8012030:	4602      	mov	r2, r0
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8012036:	4618      	mov	r0, r3
 8012038:	3718      	adds	r7, #24
 801203a:	46bd      	mov	sp, r7
 801203c:	bd80      	pop	{r7, pc}

0801203e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801203e:	b480      	push	{r7}
 8012040:	b083      	sub	sp, #12
 8012042:	af00      	add	r7, sp, #0
 8012044:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d101      	bne.n	8012052 <sys_mbox_valid+0x14>
    return 0;
 801204e:	2300      	movs	r3, #0
 8012050:	e000      	b.n	8012054 <sys_mbox_valid+0x16>
  else
    return 1;
 8012052:	2301      	movs	r3, #1
}
 8012054:	4618      	mov	r0, r3
 8012056:	370c      	adds	r7, #12
 8012058:	46bd      	mov	sp, r7
 801205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205e:	4770      	bx	lr

08012060 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8012064:	2000      	movs	r0, #0
 8012066:	f7f2 fb27 	bl	80046b8 <osMutexNew>
 801206a:	4603      	mov	r3, r0
 801206c:	4a01      	ldr	r2, [pc, #4]	; (8012074 <sys_init+0x14>)
 801206e:	6013      	str	r3, [r2, #0]
#endif
}
 8012070:	bf00      	nop
 8012072:	bd80      	pop	{r7, pc}
 8012074:	2000f1b0 	.word	0x2000f1b0

08012078 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8012080:	2000      	movs	r0, #0
 8012082:	f7f2 fb19 	bl	80046b8 <osMutexNew>
 8012086:	4602      	mov	r2, r0
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d102      	bne.n	801209a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8012094:	f04f 33ff 	mov.w	r3, #4294967295
 8012098:	e000      	b.n	801209c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801209a:	2300      	movs	r3, #0
}
 801209c:	4618      	mov	r0, r3
 801209e:	3708      	adds	r7, #8
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}

080120a4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b082      	sub	sp, #8
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	f04f 31ff 	mov.w	r1, #4294967295
 80120b4:	4618      	mov	r0, r3
 80120b6:	f7f2 fb85 	bl	80047c4 <osMutexAcquire>
#endif
}
 80120ba:	bf00      	nop
 80120bc:	3708      	adds	r7, #8
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}

080120c2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80120c2:	b580      	push	{r7, lr}
 80120c4:	b082      	sub	sp, #8
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	4618      	mov	r0, r3
 80120d0:	f7f2 fbc3 	bl	800485a <osMutexRelease>
}
 80120d4:	bf00      	nop
 80120d6:	3708      	adds	r7, #8
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd80      	pop	{r7, pc}

080120dc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b08e      	sub	sp, #56	; 0x38
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	60f8      	str	r0, [r7, #12]
 80120e4:	60b9      	str	r1, [r7, #8]
 80120e6:	607a      	str	r2, [r7, #4]
 80120e8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80120ea:	f107 0314 	add.w	r3, r7, #20
 80120ee:	2224      	movs	r2, #36	; 0x24
 80120f0:	2100      	movs	r1, #0
 80120f2:	4618      	mov	r0, r3
 80120f4:	f000 f995 	bl	8012422 <memset>
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	617b      	str	r3, [r7, #20]
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8012100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012102:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8012104:	f107 0314 	add.w	r3, r7, #20
 8012108:	461a      	mov	r2, r3
 801210a:	6879      	ldr	r1, [r7, #4]
 801210c:	68b8      	ldr	r0, [r7, #8]
 801210e:	f7f2 fa26 	bl	800455e <osThreadNew>
 8012112:	4603      	mov	r3, r0
#endif
}
 8012114:	4618      	mov	r0, r3
 8012116:	3738      	adds	r7, #56	; 0x38
 8012118:	46bd      	mov	sp, r7
 801211a:	bd80      	pop	{r7, pc}

0801211c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801211c:	b580      	push	{r7, lr}
 801211e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8012120:	4b04      	ldr	r3, [pc, #16]	; (8012134 <sys_arch_protect+0x18>)
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	f04f 31ff 	mov.w	r1, #4294967295
 8012128:	4618      	mov	r0, r3
 801212a:	f7f2 fb4b 	bl	80047c4 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801212e:	2301      	movs	r3, #1
}
 8012130:	4618      	mov	r0, r3
 8012132:	bd80      	pop	{r7, pc}
 8012134:	2000f1b0 	.word	0x2000f1b0

08012138 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8012140:	4b04      	ldr	r3, [pc, #16]	; (8012154 <sys_arch_unprotect+0x1c>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	4618      	mov	r0, r3
 8012146:	f7f2 fb88 	bl	800485a <osMutexRelease>
}
 801214a:	bf00      	nop
 801214c:	3708      	adds	r7, #8
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}
 8012152:	bf00      	nop
 8012154:	2000f1b0 	.word	0x2000f1b0

08012158 <rand>:
 8012158:	4b16      	ldr	r3, [pc, #88]	; (80121b4 <rand+0x5c>)
 801215a:	b510      	push	{r4, lr}
 801215c:	681c      	ldr	r4, [r3, #0]
 801215e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012160:	b9b3      	cbnz	r3, 8012190 <rand+0x38>
 8012162:	2018      	movs	r0, #24
 8012164:	f000 faa2 	bl	80126ac <malloc>
 8012168:	4602      	mov	r2, r0
 801216a:	6320      	str	r0, [r4, #48]	; 0x30
 801216c:	b920      	cbnz	r0, 8012178 <rand+0x20>
 801216e:	4b12      	ldr	r3, [pc, #72]	; (80121b8 <rand+0x60>)
 8012170:	4812      	ldr	r0, [pc, #72]	; (80121bc <rand+0x64>)
 8012172:	2152      	movs	r1, #82	; 0x52
 8012174:	f000 fa30 	bl	80125d8 <__assert_func>
 8012178:	4911      	ldr	r1, [pc, #68]	; (80121c0 <rand+0x68>)
 801217a:	4b12      	ldr	r3, [pc, #72]	; (80121c4 <rand+0x6c>)
 801217c:	e9c0 1300 	strd	r1, r3, [r0]
 8012180:	4b11      	ldr	r3, [pc, #68]	; (80121c8 <rand+0x70>)
 8012182:	6083      	str	r3, [r0, #8]
 8012184:	230b      	movs	r3, #11
 8012186:	8183      	strh	r3, [r0, #12]
 8012188:	2100      	movs	r1, #0
 801218a:	2001      	movs	r0, #1
 801218c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012190:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012192:	480e      	ldr	r0, [pc, #56]	; (80121cc <rand+0x74>)
 8012194:	690b      	ldr	r3, [r1, #16]
 8012196:	694c      	ldr	r4, [r1, #20]
 8012198:	4a0d      	ldr	r2, [pc, #52]	; (80121d0 <rand+0x78>)
 801219a:	4358      	muls	r0, r3
 801219c:	fb02 0004 	mla	r0, r2, r4, r0
 80121a0:	fba3 3202 	umull	r3, r2, r3, r2
 80121a4:	3301      	adds	r3, #1
 80121a6:	eb40 0002 	adc.w	r0, r0, r2
 80121aa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80121ae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80121b2:	bd10      	pop	{r4, pc}
 80121b4:	20000088 	.word	0x20000088
 80121b8:	08015eba 	.word	0x08015eba
 80121bc:	08015ed1 	.word	0x08015ed1
 80121c0:	abcd330e 	.word	0xabcd330e
 80121c4:	e66d1234 	.word	0xe66d1234
 80121c8:	0005deec 	.word	0x0005deec
 80121cc:	5851f42d 	.word	0x5851f42d
 80121d0:	4c957f2d 	.word	0x4c957f2d

080121d4 <std>:
 80121d4:	2300      	movs	r3, #0
 80121d6:	b510      	push	{r4, lr}
 80121d8:	4604      	mov	r4, r0
 80121da:	e9c0 3300 	strd	r3, r3, [r0]
 80121de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80121e2:	6083      	str	r3, [r0, #8]
 80121e4:	8181      	strh	r1, [r0, #12]
 80121e6:	6643      	str	r3, [r0, #100]	; 0x64
 80121e8:	81c2      	strh	r2, [r0, #14]
 80121ea:	6183      	str	r3, [r0, #24]
 80121ec:	4619      	mov	r1, r3
 80121ee:	2208      	movs	r2, #8
 80121f0:	305c      	adds	r0, #92	; 0x5c
 80121f2:	f000 f916 	bl	8012422 <memset>
 80121f6:	4b0d      	ldr	r3, [pc, #52]	; (801222c <std+0x58>)
 80121f8:	6263      	str	r3, [r4, #36]	; 0x24
 80121fa:	4b0d      	ldr	r3, [pc, #52]	; (8012230 <std+0x5c>)
 80121fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80121fe:	4b0d      	ldr	r3, [pc, #52]	; (8012234 <std+0x60>)
 8012200:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012202:	4b0d      	ldr	r3, [pc, #52]	; (8012238 <std+0x64>)
 8012204:	6323      	str	r3, [r4, #48]	; 0x30
 8012206:	4b0d      	ldr	r3, [pc, #52]	; (801223c <std+0x68>)
 8012208:	6224      	str	r4, [r4, #32]
 801220a:	429c      	cmp	r4, r3
 801220c:	d006      	beq.n	801221c <std+0x48>
 801220e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012212:	4294      	cmp	r4, r2
 8012214:	d002      	beq.n	801221c <std+0x48>
 8012216:	33d0      	adds	r3, #208	; 0xd0
 8012218:	429c      	cmp	r4, r3
 801221a:	d105      	bne.n	8012228 <std+0x54>
 801221c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012224:	f000 b9c6 	b.w	80125b4 <__retarget_lock_init_recursive>
 8012228:	bd10      	pop	{r4, pc}
 801222a:	bf00      	nop
 801222c:	0801237d 	.word	0x0801237d
 8012230:	0801239f 	.word	0x0801239f
 8012234:	080123d7 	.word	0x080123d7
 8012238:	080123fb 	.word	0x080123fb
 801223c:	2000f1b4 	.word	0x2000f1b4

08012240 <stdio_exit_handler>:
 8012240:	4a02      	ldr	r2, [pc, #8]	; (801224c <stdio_exit_handler+0xc>)
 8012242:	4903      	ldr	r1, [pc, #12]	; (8012250 <stdio_exit_handler+0x10>)
 8012244:	4803      	ldr	r0, [pc, #12]	; (8012254 <stdio_exit_handler+0x14>)
 8012246:	f000 b869 	b.w	801231c <_fwalk_sglue>
 801224a:	bf00      	nop
 801224c:	20000030 	.word	0x20000030
 8012250:	08012ec9 	.word	0x08012ec9
 8012254:	2000003c 	.word	0x2000003c

08012258 <cleanup_stdio>:
 8012258:	6841      	ldr	r1, [r0, #4]
 801225a:	4b0c      	ldr	r3, [pc, #48]	; (801228c <cleanup_stdio+0x34>)
 801225c:	4299      	cmp	r1, r3
 801225e:	b510      	push	{r4, lr}
 8012260:	4604      	mov	r4, r0
 8012262:	d001      	beq.n	8012268 <cleanup_stdio+0x10>
 8012264:	f000 fe30 	bl	8012ec8 <_fflush_r>
 8012268:	68a1      	ldr	r1, [r4, #8]
 801226a:	4b09      	ldr	r3, [pc, #36]	; (8012290 <cleanup_stdio+0x38>)
 801226c:	4299      	cmp	r1, r3
 801226e:	d002      	beq.n	8012276 <cleanup_stdio+0x1e>
 8012270:	4620      	mov	r0, r4
 8012272:	f000 fe29 	bl	8012ec8 <_fflush_r>
 8012276:	68e1      	ldr	r1, [r4, #12]
 8012278:	4b06      	ldr	r3, [pc, #24]	; (8012294 <cleanup_stdio+0x3c>)
 801227a:	4299      	cmp	r1, r3
 801227c:	d004      	beq.n	8012288 <cleanup_stdio+0x30>
 801227e:	4620      	mov	r0, r4
 8012280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012284:	f000 be20 	b.w	8012ec8 <_fflush_r>
 8012288:	bd10      	pop	{r4, pc}
 801228a:	bf00      	nop
 801228c:	2000f1b4 	.word	0x2000f1b4
 8012290:	2000f21c 	.word	0x2000f21c
 8012294:	2000f284 	.word	0x2000f284

08012298 <global_stdio_init.part.0>:
 8012298:	b510      	push	{r4, lr}
 801229a:	4b0b      	ldr	r3, [pc, #44]	; (80122c8 <global_stdio_init.part.0+0x30>)
 801229c:	4c0b      	ldr	r4, [pc, #44]	; (80122cc <global_stdio_init.part.0+0x34>)
 801229e:	4a0c      	ldr	r2, [pc, #48]	; (80122d0 <global_stdio_init.part.0+0x38>)
 80122a0:	601a      	str	r2, [r3, #0]
 80122a2:	4620      	mov	r0, r4
 80122a4:	2200      	movs	r2, #0
 80122a6:	2104      	movs	r1, #4
 80122a8:	f7ff ff94 	bl	80121d4 <std>
 80122ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80122b0:	2201      	movs	r2, #1
 80122b2:	2109      	movs	r1, #9
 80122b4:	f7ff ff8e 	bl	80121d4 <std>
 80122b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80122bc:	2202      	movs	r2, #2
 80122be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122c2:	2112      	movs	r1, #18
 80122c4:	f7ff bf86 	b.w	80121d4 <std>
 80122c8:	2000f2ec 	.word	0x2000f2ec
 80122cc:	2000f1b4 	.word	0x2000f1b4
 80122d0:	08012241 	.word	0x08012241

080122d4 <__sfp_lock_acquire>:
 80122d4:	4801      	ldr	r0, [pc, #4]	; (80122dc <__sfp_lock_acquire+0x8>)
 80122d6:	f000 b96e 	b.w	80125b6 <__retarget_lock_acquire_recursive>
 80122da:	bf00      	nop
 80122dc:	2000f2f5 	.word	0x2000f2f5

080122e0 <__sfp_lock_release>:
 80122e0:	4801      	ldr	r0, [pc, #4]	; (80122e8 <__sfp_lock_release+0x8>)
 80122e2:	f000 b969 	b.w	80125b8 <__retarget_lock_release_recursive>
 80122e6:	bf00      	nop
 80122e8:	2000f2f5 	.word	0x2000f2f5

080122ec <__sinit>:
 80122ec:	b510      	push	{r4, lr}
 80122ee:	4604      	mov	r4, r0
 80122f0:	f7ff fff0 	bl	80122d4 <__sfp_lock_acquire>
 80122f4:	6a23      	ldr	r3, [r4, #32]
 80122f6:	b11b      	cbz	r3, 8012300 <__sinit+0x14>
 80122f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122fc:	f7ff bff0 	b.w	80122e0 <__sfp_lock_release>
 8012300:	4b04      	ldr	r3, [pc, #16]	; (8012314 <__sinit+0x28>)
 8012302:	6223      	str	r3, [r4, #32]
 8012304:	4b04      	ldr	r3, [pc, #16]	; (8012318 <__sinit+0x2c>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d1f5      	bne.n	80122f8 <__sinit+0xc>
 801230c:	f7ff ffc4 	bl	8012298 <global_stdio_init.part.0>
 8012310:	e7f2      	b.n	80122f8 <__sinit+0xc>
 8012312:	bf00      	nop
 8012314:	08012259 	.word	0x08012259
 8012318:	2000f2ec 	.word	0x2000f2ec

0801231c <_fwalk_sglue>:
 801231c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012320:	4607      	mov	r7, r0
 8012322:	4688      	mov	r8, r1
 8012324:	4614      	mov	r4, r2
 8012326:	2600      	movs	r6, #0
 8012328:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801232c:	f1b9 0901 	subs.w	r9, r9, #1
 8012330:	d505      	bpl.n	801233e <_fwalk_sglue+0x22>
 8012332:	6824      	ldr	r4, [r4, #0]
 8012334:	2c00      	cmp	r4, #0
 8012336:	d1f7      	bne.n	8012328 <_fwalk_sglue+0xc>
 8012338:	4630      	mov	r0, r6
 801233a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801233e:	89ab      	ldrh	r3, [r5, #12]
 8012340:	2b01      	cmp	r3, #1
 8012342:	d907      	bls.n	8012354 <_fwalk_sglue+0x38>
 8012344:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012348:	3301      	adds	r3, #1
 801234a:	d003      	beq.n	8012354 <_fwalk_sglue+0x38>
 801234c:	4629      	mov	r1, r5
 801234e:	4638      	mov	r0, r7
 8012350:	47c0      	blx	r8
 8012352:	4306      	orrs	r6, r0
 8012354:	3568      	adds	r5, #104	; 0x68
 8012356:	e7e9      	b.n	801232c <_fwalk_sglue+0x10>

08012358 <iprintf>:
 8012358:	b40f      	push	{r0, r1, r2, r3}
 801235a:	b507      	push	{r0, r1, r2, lr}
 801235c:	4906      	ldr	r1, [pc, #24]	; (8012378 <iprintf+0x20>)
 801235e:	ab04      	add	r3, sp, #16
 8012360:	6808      	ldr	r0, [r1, #0]
 8012362:	f853 2b04 	ldr.w	r2, [r3], #4
 8012366:	6881      	ldr	r1, [r0, #8]
 8012368:	9301      	str	r3, [sp, #4]
 801236a:	f000 fa7d 	bl	8012868 <_vfiprintf_r>
 801236e:	b003      	add	sp, #12
 8012370:	f85d eb04 	ldr.w	lr, [sp], #4
 8012374:	b004      	add	sp, #16
 8012376:	4770      	bx	lr
 8012378:	20000088 	.word	0x20000088

0801237c <__sread>:
 801237c:	b510      	push	{r4, lr}
 801237e:	460c      	mov	r4, r1
 8012380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012384:	f000 f8ce 	bl	8012524 <_read_r>
 8012388:	2800      	cmp	r0, #0
 801238a:	bfab      	itete	ge
 801238c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801238e:	89a3      	ldrhlt	r3, [r4, #12]
 8012390:	181b      	addge	r3, r3, r0
 8012392:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012396:	bfac      	ite	ge
 8012398:	6563      	strge	r3, [r4, #84]	; 0x54
 801239a:	81a3      	strhlt	r3, [r4, #12]
 801239c:	bd10      	pop	{r4, pc}

0801239e <__swrite>:
 801239e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123a2:	461f      	mov	r7, r3
 80123a4:	898b      	ldrh	r3, [r1, #12]
 80123a6:	05db      	lsls	r3, r3, #23
 80123a8:	4605      	mov	r5, r0
 80123aa:	460c      	mov	r4, r1
 80123ac:	4616      	mov	r6, r2
 80123ae:	d505      	bpl.n	80123bc <__swrite+0x1e>
 80123b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123b4:	2302      	movs	r3, #2
 80123b6:	2200      	movs	r2, #0
 80123b8:	f000 f8a2 	bl	8012500 <_lseek_r>
 80123bc:	89a3      	ldrh	r3, [r4, #12]
 80123be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80123c6:	81a3      	strh	r3, [r4, #12]
 80123c8:	4632      	mov	r2, r6
 80123ca:	463b      	mov	r3, r7
 80123cc:	4628      	mov	r0, r5
 80123ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123d2:	f000 b8b9 	b.w	8012548 <_write_r>

080123d6 <__sseek>:
 80123d6:	b510      	push	{r4, lr}
 80123d8:	460c      	mov	r4, r1
 80123da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123de:	f000 f88f 	bl	8012500 <_lseek_r>
 80123e2:	1c43      	adds	r3, r0, #1
 80123e4:	89a3      	ldrh	r3, [r4, #12]
 80123e6:	bf15      	itete	ne
 80123e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80123ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80123ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80123f2:	81a3      	strheq	r3, [r4, #12]
 80123f4:	bf18      	it	ne
 80123f6:	81a3      	strhne	r3, [r4, #12]
 80123f8:	bd10      	pop	{r4, pc}

080123fa <__sclose>:
 80123fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123fe:	f000 b819 	b.w	8012434 <_close_r>

08012402 <memcmp>:
 8012402:	b510      	push	{r4, lr}
 8012404:	3901      	subs	r1, #1
 8012406:	4402      	add	r2, r0
 8012408:	4290      	cmp	r0, r2
 801240a:	d101      	bne.n	8012410 <memcmp+0xe>
 801240c:	2000      	movs	r0, #0
 801240e:	e005      	b.n	801241c <memcmp+0x1a>
 8012410:	7803      	ldrb	r3, [r0, #0]
 8012412:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012416:	42a3      	cmp	r3, r4
 8012418:	d001      	beq.n	801241e <memcmp+0x1c>
 801241a:	1b18      	subs	r0, r3, r4
 801241c:	bd10      	pop	{r4, pc}
 801241e:	3001      	adds	r0, #1
 8012420:	e7f2      	b.n	8012408 <memcmp+0x6>

08012422 <memset>:
 8012422:	4402      	add	r2, r0
 8012424:	4603      	mov	r3, r0
 8012426:	4293      	cmp	r3, r2
 8012428:	d100      	bne.n	801242c <memset+0xa>
 801242a:	4770      	bx	lr
 801242c:	f803 1b01 	strb.w	r1, [r3], #1
 8012430:	e7f9      	b.n	8012426 <memset+0x4>
	...

08012434 <_close_r>:
 8012434:	b538      	push	{r3, r4, r5, lr}
 8012436:	4d06      	ldr	r5, [pc, #24]	; (8012450 <_close_r+0x1c>)
 8012438:	2300      	movs	r3, #0
 801243a:	4604      	mov	r4, r0
 801243c:	4608      	mov	r0, r1
 801243e:	602b      	str	r3, [r5, #0]
 8012440:	f7ee fad3 	bl	80009ea <_close>
 8012444:	1c43      	adds	r3, r0, #1
 8012446:	d102      	bne.n	801244e <_close_r+0x1a>
 8012448:	682b      	ldr	r3, [r5, #0]
 801244a:	b103      	cbz	r3, 801244e <_close_r+0x1a>
 801244c:	6023      	str	r3, [r4, #0]
 801244e:	bd38      	pop	{r3, r4, r5, pc}
 8012450:	2000f2f0 	.word	0x2000f2f0

08012454 <_reclaim_reent>:
 8012454:	4b29      	ldr	r3, [pc, #164]	; (80124fc <_reclaim_reent+0xa8>)
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	4283      	cmp	r3, r0
 801245a:	b570      	push	{r4, r5, r6, lr}
 801245c:	4604      	mov	r4, r0
 801245e:	d04b      	beq.n	80124f8 <_reclaim_reent+0xa4>
 8012460:	69c3      	ldr	r3, [r0, #28]
 8012462:	b143      	cbz	r3, 8012476 <_reclaim_reent+0x22>
 8012464:	68db      	ldr	r3, [r3, #12]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d144      	bne.n	80124f4 <_reclaim_reent+0xa0>
 801246a:	69e3      	ldr	r3, [r4, #28]
 801246c:	6819      	ldr	r1, [r3, #0]
 801246e:	b111      	cbz	r1, 8012476 <_reclaim_reent+0x22>
 8012470:	4620      	mov	r0, r4
 8012472:	f000 f8cf 	bl	8012614 <_free_r>
 8012476:	6961      	ldr	r1, [r4, #20]
 8012478:	b111      	cbz	r1, 8012480 <_reclaim_reent+0x2c>
 801247a:	4620      	mov	r0, r4
 801247c:	f000 f8ca 	bl	8012614 <_free_r>
 8012480:	69e1      	ldr	r1, [r4, #28]
 8012482:	b111      	cbz	r1, 801248a <_reclaim_reent+0x36>
 8012484:	4620      	mov	r0, r4
 8012486:	f000 f8c5 	bl	8012614 <_free_r>
 801248a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801248c:	b111      	cbz	r1, 8012494 <_reclaim_reent+0x40>
 801248e:	4620      	mov	r0, r4
 8012490:	f000 f8c0 	bl	8012614 <_free_r>
 8012494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012496:	b111      	cbz	r1, 801249e <_reclaim_reent+0x4a>
 8012498:	4620      	mov	r0, r4
 801249a:	f000 f8bb 	bl	8012614 <_free_r>
 801249e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80124a0:	b111      	cbz	r1, 80124a8 <_reclaim_reent+0x54>
 80124a2:	4620      	mov	r0, r4
 80124a4:	f000 f8b6 	bl	8012614 <_free_r>
 80124a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80124aa:	b111      	cbz	r1, 80124b2 <_reclaim_reent+0x5e>
 80124ac:	4620      	mov	r0, r4
 80124ae:	f000 f8b1 	bl	8012614 <_free_r>
 80124b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80124b4:	b111      	cbz	r1, 80124bc <_reclaim_reent+0x68>
 80124b6:	4620      	mov	r0, r4
 80124b8:	f000 f8ac 	bl	8012614 <_free_r>
 80124bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80124be:	b111      	cbz	r1, 80124c6 <_reclaim_reent+0x72>
 80124c0:	4620      	mov	r0, r4
 80124c2:	f000 f8a7 	bl	8012614 <_free_r>
 80124c6:	6a23      	ldr	r3, [r4, #32]
 80124c8:	b1b3      	cbz	r3, 80124f8 <_reclaim_reent+0xa4>
 80124ca:	4620      	mov	r0, r4
 80124cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124d0:	4718      	bx	r3
 80124d2:	5949      	ldr	r1, [r1, r5]
 80124d4:	b941      	cbnz	r1, 80124e8 <_reclaim_reent+0x94>
 80124d6:	3504      	adds	r5, #4
 80124d8:	69e3      	ldr	r3, [r4, #28]
 80124da:	2d80      	cmp	r5, #128	; 0x80
 80124dc:	68d9      	ldr	r1, [r3, #12]
 80124de:	d1f8      	bne.n	80124d2 <_reclaim_reent+0x7e>
 80124e0:	4620      	mov	r0, r4
 80124e2:	f000 f897 	bl	8012614 <_free_r>
 80124e6:	e7c0      	b.n	801246a <_reclaim_reent+0x16>
 80124e8:	680e      	ldr	r6, [r1, #0]
 80124ea:	4620      	mov	r0, r4
 80124ec:	f000 f892 	bl	8012614 <_free_r>
 80124f0:	4631      	mov	r1, r6
 80124f2:	e7ef      	b.n	80124d4 <_reclaim_reent+0x80>
 80124f4:	2500      	movs	r5, #0
 80124f6:	e7ef      	b.n	80124d8 <_reclaim_reent+0x84>
 80124f8:	bd70      	pop	{r4, r5, r6, pc}
 80124fa:	bf00      	nop
 80124fc:	20000088 	.word	0x20000088

08012500 <_lseek_r>:
 8012500:	b538      	push	{r3, r4, r5, lr}
 8012502:	4d07      	ldr	r5, [pc, #28]	; (8012520 <_lseek_r+0x20>)
 8012504:	4604      	mov	r4, r0
 8012506:	4608      	mov	r0, r1
 8012508:	4611      	mov	r1, r2
 801250a:	2200      	movs	r2, #0
 801250c:	602a      	str	r2, [r5, #0]
 801250e:	461a      	mov	r2, r3
 8012510:	f7ee fa92 	bl	8000a38 <_lseek>
 8012514:	1c43      	adds	r3, r0, #1
 8012516:	d102      	bne.n	801251e <_lseek_r+0x1e>
 8012518:	682b      	ldr	r3, [r5, #0]
 801251a:	b103      	cbz	r3, 801251e <_lseek_r+0x1e>
 801251c:	6023      	str	r3, [r4, #0]
 801251e:	bd38      	pop	{r3, r4, r5, pc}
 8012520:	2000f2f0 	.word	0x2000f2f0

08012524 <_read_r>:
 8012524:	b538      	push	{r3, r4, r5, lr}
 8012526:	4d07      	ldr	r5, [pc, #28]	; (8012544 <_read_r+0x20>)
 8012528:	4604      	mov	r4, r0
 801252a:	4608      	mov	r0, r1
 801252c:	4611      	mov	r1, r2
 801252e:	2200      	movs	r2, #0
 8012530:	602a      	str	r2, [r5, #0]
 8012532:	461a      	mov	r2, r3
 8012534:	f7ee fa20 	bl	8000978 <_read>
 8012538:	1c43      	adds	r3, r0, #1
 801253a:	d102      	bne.n	8012542 <_read_r+0x1e>
 801253c:	682b      	ldr	r3, [r5, #0]
 801253e:	b103      	cbz	r3, 8012542 <_read_r+0x1e>
 8012540:	6023      	str	r3, [r4, #0]
 8012542:	bd38      	pop	{r3, r4, r5, pc}
 8012544:	2000f2f0 	.word	0x2000f2f0

08012548 <_write_r>:
 8012548:	b538      	push	{r3, r4, r5, lr}
 801254a:	4d07      	ldr	r5, [pc, #28]	; (8012568 <_write_r+0x20>)
 801254c:	4604      	mov	r4, r0
 801254e:	4608      	mov	r0, r1
 8012550:	4611      	mov	r1, r2
 8012552:	2200      	movs	r2, #0
 8012554:	602a      	str	r2, [r5, #0]
 8012556:	461a      	mov	r2, r3
 8012558:	f7ee fa2b 	bl	80009b2 <_write>
 801255c:	1c43      	adds	r3, r0, #1
 801255e:	d102      	bne.n	8012566 <_write_r+0x1e>
 8012560:	682b      	ldr	r3, [r5, #0]
 8012562:	b103      	cbz	r3, 8012566 <_write_r+0x1e>
 8012564:	6023      	str	r3, [r4, #0]
 8012566:	bd38      	pop	{r3, r4, r5, pc}
 8012568:	2000f2f0 	.word	0x2000f2f0

0801256c <__libc_init_array>:
 801256c:	b570      	push	{r4, r5, r6, lr}
 801256e:	4d0d      	ldr	r5, [pc, #52]	; (80125a4 <__libc_init_array+0x38>)
 8012570:	4c0d      	ldr	r4, [pc, #52]	; (80125a8 <__libc_init_array+0x3c>)
 8012572:	1b64      	subs	r4, r4, r5
 8012574:	10a4      	asrs	r4, r4, #2
 8012576:	2600      	movs	r6, #0
 8012578:	42a6      	cmp	r6, r4
 801257a:	d109      	bne.n	8012590 <__libc_init_array+0x24>
 801257c:	4d0b      	ldr	r5, [pc, #44]	; (80125ac <__libc_init_array+0x40>)
 801257e:	4c0c      	ldr	r4, [pc, #48]	; (80125b0 <__libc_init_array+0x44>)
 8012580:	f000 fe52 	bl	8013228 <_init>
 8012584:	1b64      	subs	r4, r4, r5
 8012586:	10a4      	asrs	r4, r4, #2
 8012588:	2600      	movs	r6, #0
 801258a:	42a6      	cmp	r6, r4
 801258c:	d105      	bne.n	801259a <__libc_init_array+0x2e>
 801258e:	bd70      	pop	{r4, r5, r6, pc}
 8012590:	f855 3b04 	ldr.w	r3, [r5], #4
 8012594:	4798      	blx	r3
 8012596:	3601      	adds	r6, #1
 8012598:	e7ee      	b.n	8012578 <__libc_init_array+0xc>
 801259a:	f855 3b04 	ldr.w	r3, [r5], #4
 801259e:	4798      	blx	r3
 80125a0:	3601      	adds	r6, #1
 80125a2:	e7f2      	b.n	801258a <__libc_init_array+0x1e>
 80125a4:	08015fa0 	.word	0x08015fa0
 80125a8:	08015fa0 	.word	0x08015fa0
 80125ac:	08015fa0 	.word	0x08015fa0
 80125b0:	08015fa4 	.word	0x08015fa4

080125b4 <__retarget_lock_init_recursive>:
 80125b4:	4770      	bx	lr

080125b6 <__retarget_lock_acquire_recursive>:
 80125b6:	4770      	bx	lr

080125b8 <__retarget_lock_release_recursive>:
 80125b8:	4770      	bx	lr

080125ba <memcpy>:
 80125ba:	440a      	add	r2, r1
 80125bc:	4291      	cmp	r1, r2
 80125be:	f100 33ff 	add.w	r3, r0, #4294967295
 80125c2:	d100      	bne.n	80125c6 <memcpy+0xc>
 80125c4:	4770      	bx	lr
 80125c6:	b510      	push	{r4, lr}
 80125c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80125cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80125d0:	4291      	cmp	r1, r2
 80125d2:	d1f9      	bne.n	80125c8 <memcpy+0xe>
 80125d4:	bd10      	pop	{r4, pc}
	...

080125d8 <__assert_func>:
 80125d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80125da:	4614      	mov	r4, r2
 80125dc:	461a      	mov	r2, r3
 80125de:	4b09      	ldr	r3, [pc, #36]	; (8012604 <__assert_func+0x2c>)
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	4605      	mov	r5, r0
 80125e4:	68d8      	ldr	r0, [r3, #12]
 80125e6:	b14c      	cbz	r4, 80125fc <__assert_func+0x24>
 80125e8:	4b07      	ldr	r3, [pc, #28]	; (8012608 <__assert_func+0x30>)
 80125ea:	9100      	str	r1, [sp, #0]
 80125ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80125f0:	4906      	ldr	r1, [pc, #24]	; (801260c <__assert_func+0x34>)
 80125f2:	462b      	mov	r3, r5
 80125f4:	f000 fc90 	bl	8012f18 <fiprintf>
 80125f8:	f000 fd46 	bl	8013088 <abort>
 80125fc:	4b04      	ldr	r3, [pc, #16]	; (8012610 <__assert_func+0x38>)
 80125fe:	461c      	mov	r4, r3
 8012600:	e7f3      	b.n	80125ea <__assert_func+0x12>
 8012602:	bf00      	nop
 8012604:	20000088 	.word	0x20000088
 8012608:	08015f29 	.word	0x08015f29
 801260c:	08015f36 	.word	0x08015f36
 8012610:	08015f64 	.word	0x08015f64

08012614 <_free_r>:
 8012614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012616:	2900      	cmp	r1, #0
 8012618:	d044      	beq.n	80126a4 <_free_r+0x90>
 801261a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801261e:	9001      	str	r0, [sp, #4]
 8012620:	2b00      	cmp	r3, #0
 8012622:	f1a1 0404 	sub.w	r4, r1, #4
 8012626:	bfb8      	it	lt
 8012628:	18e4      	addlt	r4, r4, r3
 801262a:	f000 f8e7 	bl	80127fc <__malloc_lock>
 801262e:	4a1e      	ldr	r2, [pc, #120]	; (80126a8 <_free_r+0x94>)
 8012630:	9801      	ldr	r0, [sp, #4]
 8012632:	6813      	ldr	r3, [r2, #0]
 8012634:	b933      	cbnz	r3, 8012644 <_free_r+0x30>
 8012636:	6063      	str	r3, [r4, #4]
 8012638:	6014      	str	r4, [r2, #0]
 801263a:	b003      	add	sp, #12
 801263c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012640:	f000 b8e2 	b.w	8012808 <__malloc_unlock>
 8012644:	42a3      	cmp	r3, r4
 8012646:	d908      	bls.n	801265a <_free_r+0x46>
 8012648:	6825      	ldr	r5, [r4, #0]
 801264a:	1961      	adds	r1, r4, r5
 801264c:	428b      	cmp	r3, r1
 801264e:	bf01      	itttt	eq
 8012650:	6819      	ldreq	r1, [r3, #0]
 8012652:	685b      	ldreq	r3, [r3, #4]
 8012654:	1949      	addeq	r1, r1, r5
 8012656:	6021      	streq	r1, [r4, #0]
 8012658:	e7ed      	b.n	8012636 <_free_r+0x22>
 801265a:	461a      	mov	r2, r3
 801265c:	685b      	ldr	r3, [r3, #4]
 801265e:	b10b      	cbz	r3, 8012664 <_free_r+0x50>
 8012660:	42a3      	cmp	r3, r4
 8012662:	d9fa      	bls.n	801265a <_free_r+0x46>
 8012664:	6811      	ldr	r1, [r2, #0]
 8012666:	1855      	adds	r5, r2, r1
 8012668:	42a5      	cmp	r5, r4
 801266a:	d10b      	bne.n	8012684 <_free_r+0x70>
 801266c:	6824      	ldr	r4, [r4, #0]
 801266e:	4421      	add	r1, r4
 8012670:	1854      	adds	r4, r2, r1
 8012672:	42a3      	cmp	r3, r4
 8012674:	6011      	str	r1, [r2, #0]
 8012676:	d1e0      	bne.n	801263a <_free_r+0x26>
 8012678:	681c      	ldr	r4, [r3, #0]
 801267a:	685b      	ldr	r3, [r3, #4]
 801267c:	6053      	str	r3, [r2, #4]
 801267e:	440c      	add	r4, r1
 8012680:	6014      	str	r4, [r2, #0]
 8012682:	e7da      	b.n	801263a <_free_r+0x26>
 8012684:	d902      	bls.n	801268c <_free_r+0x78>
 8012686:	230c      	movs	r3, #12
 8012688:	6003      	str	r3, [r0, #0]
 801268a:	e7d6      	b.n	801263a <_free_r+0x26>
 801268c:	6825      	ldr	r5, [r4, #0]
 801268e:	1961      	adds	r1, r4, r5
 8012690:	428b      	cmp	r3, r1
 8012692:	bf04      	itt	eq
 8012694:	6819      	ldreq	r1, [r3, #0]
 8012696:	685b      	ldreq	r3, [r3, #4]
 8012698:	6063      	str	r3, [r4, #4]
 801269a:	bf04      	itt	eq
 801269c:	1949      	addeq	r1, r1, r5
 801269e:	6021      	streq	r1, [r4, #0]
 80126a0:	6054      	str	r4, [r2, #4]
 80126a2:	e7ca      	b.n	801263a <_free_r+0x26>
 80126a4:	b003      	add	sp, #12
 80126a6:	bd30      	pop	{r4, r5, pc}
 80126a8:	2000f2f8 	.word	0x2000f2f8

080126ac <malloc>:
 80126ac:	4b02      	ldr	r3, [pc, #8]	; (80126b8 <malloc+0xc>)
 80126ae:	4601      	mov	r1, r0
 80126b0:	6818      	ldr	r0, [r3, #0]
 80126b2:	f000 b823 	b.w	80126fc <_malloc_r>
 80126b6:	bf00      	nop
 80126b8:	20000088 	.word	0x20000088

080126bc <sbrk_aligned>:
 80126bc:	b570      	push	{r4, r5, r6, lr}
 80126be:	4e0e      	ldr	r6, [pc, #56]	; (80126f8 <sbrk_aligned+0x3c>)
 80126c0:	460c      	mov	r4, r1
 80126c2:	6831      	ldr	r1, [r6, #0]
 80126c4:	4605      	mov	r5, r0
 80126c6:	b911      	cbnz	r1, 80126ce <sbrk_aligned+0x12>
 80126c8:	f000 fcce 	bl	8013068 <_sbrk_r>
 80126cc:	6030      	str	r0, [r6, #0]
 80126ce:	4621      	mov	r1, r4
 80126d0:	4628      	mov	r0, r5
 80126d2:	f000 fcc9 	bl	8013068 <_sbrk_r>
 80126d6:	1c43      	adds	r3, r0, #1
 80126d8:	d00a      	beq.n	80126f0 <sbrk_aligned+0x34>
 80126da:	1cc4      	adds	r4, r0, #3
 80126dc:	f024 0403 	bic.w	r4, r4, #3
 80126e0:	42a0      	cmp	r0, r4
 80126e2:	d007      	beq.n	80126f4 <sbrk_aligned+0x38>
 80126e4:	1a21      	subs	r1, r4, r0
 80126e6:	4628      	mov	r0, r5
 80126e8:	f000 fcbe 	bl	8013068 <_sbrk_r>
 80126ec:	3001      	adds	r0, #1
 80126ee:	d101      	bne.n	80126f4 <sbrk_aligned+0x38>
 80126f0:	f04f 34ff 	mov.w	r4, #4294967295
 80126f4:	4620      	mov	r0, r4
 80126f6:	bd70      	pop	{r4, r5, r6, pc}
 80126f8:	2000f2fc 	.word	0x2000f2fc

080126fc <_malloc_r>:
 80126fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012700:	1ccd      	adds	r5, r1, #3
 8012702:	f025 0503 	bic.w	r5, r5, #3
 8012706:	3508      	adds	r5, #8
 8012708:	2d0c      	cmp	r5, #12
 801270a:	bf38      	it	cc
 801270c:	250c      	movcc	r5, #12
 801270e:	2d00      	cmp	r5, #0
 8012710:	4607      	mov	r7, r0
 8012712:	db01      	blt.n	8012718 <_malloc_r+0x1c>
 8012714:	42a9      	cmp	r1, r5
 8012716:	d905      	bls.n	8012724 <_malloc_r+0x28>
 8012718:	230c      	movs	r3, #12
 801271a:	603b      	str	r3, [r7, #0]
 801271c:	2600      	movs	r6, #0
 801271e:	4630      	mov	r0, r6
 8012720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012724:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80127f8 <_malloc_r+0xfc>
 8012728:	f000 f868 	bl	80127fc <__malloc_lock>
 801272c:	f8d8 3000 	ldr.w	r3, [r8]
 8012730:	461c      	mov	r4, r3
 8012732:	bb5c      	cbnz	r4, 801278c <_malloc_r+0x90>
 8012734:	4629      	mov	r1, r5
 8012736:	4638      	mov	r0, r7
 8012738:	f7ff ffc0 	bl	80126bc <sbrk_aligned>
 801273c:	1c43      	adds	r3, r0, #1
 801273e:	4604      	mov	r4, r0
 8012740:	d155      	bne.n	80127ee <_malloc_r+0xf2>
 8012742:	f8d8 4000 	ldr.w	r4, [r8]
 8012746:	4626      	mov	r6, r4
 8012748:	2e00      	cmp	r6, #0
 801274a:	d145      	bne.n	80127d8 <_malloc_r+0xdc>
 801274c:	2c00      	cmp	r4, #0
 801274e:	d048      	beq.n	80127e2 <_malloc_r+0xe6>
 8012750:	6823      	ldr	r3, [r4, #0]
 8012752:	4631      	mov	r1, r6
 8012754:	4638      	mov	r0, r7
 8012756:	eb04 0903 	add.w	r9, r4, r3
 801275a:	f000 fc85 	bl	8013068 <_sbrk_r>
 801275e:	4581      	cmp	r9, r0
 8012760:	d13f      	bne.n	80127e2 <_malloc_r+0xe6>
 8012762:	6821      	ldr	r1, [r4, #0]
 8012764:	1a6d      	subs	r5, r5, r1
 8012766:	4629      	mov	r1, r5
 8012768:	4638      	mov	r0, r7
 801276a:	f7ff ffa7 	bl	80126bc <sbrk_aligned>
 801276e:	3001      	adds	r0, #1
 8012770:	d037      	beq.n	80127e2 <_malloc_r+0xe6>
 8012772:	6823      	ldr	r3, [r4, #0]
 8012774:	442b      	add	r3, r5
 8012776:	6023      	str	r3, [r4, #0]
 8012778:	f8d8 3000 	ldr.w	r3, [r8]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d038      	beq.n	80127f2 <_malloc_r+0xf6>
 8012780:	685a      	ldr	r2, [r3, #4]
 8012782:	42a2      	cmp	r2, r4
 8012784:	d12b      	bne.n	80127de <_malloc_r+0xe2>
 8012786:	2200      	movs	r2, #0
 8012788:	605a      	str	r2, [r3, #4]
 801278a:	e00f      	b.n	80127ac <_malloc_r+0xb0>
 801278c:	6822      	ldr	r2, [r4, #0]
 801278e:	1b52      	subs	r2, r2, r5
 8012790:	d41f      	bmi.n	80127d2 <_malloc_r+0xd6>
 8012792:	2a0b      	cmp	r2, #11
 8012794:	d917      	bls.n	80127c6 <_malloc_r+0xca>
 8012796:	1961      	adds	r1, r4, r5
 8012798:	42a3      	cmp	r3, r4
 801279a:	6025      	str	r5, [r4, #0]
 801279c:	bf18      	it	ne
 801279e:	6059      	strne	r1, [r3, #4]
 80127a0:	6863      	ldr	r3, [r4, #4]
 80127a2:	bf08      	it	eq
 80127a4:	f8c8 1000 	streq.w	r1, [r8]
 80127a8:	5162      	str	r2, [r4, r5]
 80127aa:	604b      	str	r3, [r1, #4]
 80127ac:	4638      	mov	r0, r7
 80127ae:	f104 060b 	add.w	r6, r4, #11
 80127b2:	f000 f829 	bl	8012808 <__malloc_unlock>
 80127b6:	f026 0607 	bic.w	r6, r6, #7
 80127ba:	1d23      	adds	r3, r4, #4
 80127bc:	1af2      	subs	r2, r6, r3
 80127be:	d0ae      	beq.n	801271e <_malloc_r+0x22>
 80127c0:	1b9b      	subs	r3, r3, r6
 80127c2:	50a3      	str	r3, [r4, r2]
 80127c4:	e7ab      	b.n	801271e <_malloc_r+0x22>
 80127c6:	42a3      	cmp	r3, r4
 80127c8:	6862      	ldr	r2, [r4, #4]
 80127ca:	d1dd      	bne.n	8012788 <_malloc_r+0x8c>
 80127cc:	f8c8 2000 	str.w	r2, [r8]
 80127d0:	e7ec      	b.n	80127ac <_malloc_r+0xb0>
 80127d2:	4623      	mov	r3, r4
 80127d4:	6864      	ldr	r4, [r4, #4]
 80127d6:	e7ac      	b.n	8012732 <_malloc_r+0x36>
 80127d8:	4634      	mov	r4, r6
 80127da:	6876      	ldr	r6, [r6, #4]
 80127dc:	e7b4      	b.n	8012748 <_malloc_r+0x4c>
 80127de:	4613      	mov	r3, r2
 80127e0:	e7cc      	b.n	801277c <_malloc_r+0x80>
 80127e2:	230c      	movs	r3, #12
 80127e4:	603b      	str	r3, [r7, #0]
 80127e6:	4638      	mov	r0, r7
 80127e8:	f000 f80e 	bl	8012808 <__malloc_unlock>
 80127ec:	e797      	b.n	801271e <_malloc_r+0x22>
 80127ee:	6025      	str	r5, [r4, #0]
 80127f0:	e7dc      	b.n	80127ac <_malloc_r+0xb0>
 80127f2:	605b      	str	r3, [r3, #4]
 80127f4:	deff      	udf	#255	; 0xff
 80127f6:	bf00      	nop
 80127f8:	2000f2f8 	.word	0x2000f2f8

080127fc <__malloc_lock>:
 80127fc:	4801      	ldr	r0, [pc, #4]	; (8012804 <__malloc_lock+0x8>)
 80127fe:	f7ff beda 	b.w	80125b6 <__retarget_lock_acquire_recursive>
 8012802:	bf00      	nop
 8012804:	2000f2f4 	.word	0x2000f2f4

08012808 <__malloc_unlock>:
 8012808:	4801      	ldr	r0, [pc, #4]	; (8012810 <__malloc_unlock+0x8>)
 801280a:	f7ff bed5 	b.w	80125b8 <__retarget_lock_release_recursive>
 801280e:	bf00      	nop
 8012810:	2000f2f4 	.word	0x2000f2f4

08012814 <__sfputc_r>:
 8012814:	6893      	ldr	r3, [r2, #8]
 8012816:	3b01      	subs	r3, #1
 8012818:	2b00      	cmp	r3, #0
 801281a:	b410      	push	{r4}
 801281c:	6093      	str	r3, [r2, #8]
 801281e:	da08      	bge.n	8012832 <__sfputc_r+0x1e>
 8012820:	6994      	ldr	r4, [r2, #24]
 8012822:	42a3      	cmp	r3, r4
 8012824:	db01      	blt.n	801282a <__sfputc_r+0x16>
 8012826:	290a      	cmp	r1, #10
 8012828:	d103      	bne.n	8012832 <__sfputc_r+0x1e>
 801282a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801282e:	f000 bb85 	b.w	8012f3c <__swbuf_r>
 8012832:	6813      	ldr	r3, [r2, #0]
 8012834:	1c58      	adds	r0, r3, #1
 8012836:	6010      	str	r0, [r2, #0]
 8012838:	7019      	strb	r1, [r3, #0]
 801283a:	4608      	mov	r0, r1
 801283c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012840:	4770      	bx	lr

08012842 <__sfputs_r>:
 8012842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012844:	4606      	mov	r6, r0
 8012846:	460f      	mov	r7, r1
 8012848:	4614      	mov	r4, r2
 801284a:	18d5      	adds	r5, r2, r3
 801284c:	42ac      	cmp	r4, r5
 801284e:	d101      	bne.n	8012854 <__sfputs_r+0x12>
 8012850:	2000      	movs	r0, #0
 8012852:	e007      	b.n	8012864 <__sfputs_r+0x22>
 8012854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012858:	463a      	mov	r2, r7
 801285a:	4630      	mov	r0, r6
 801285c:	f7ff ffda 	bl	8012814 <__sfputc_r>
 8012860:	1c43      	adds	r3, r0, #1
 8012862:	d1f3      	bne.n	801284c <__sfputs_r+0xa>
 8012864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012868 <_vfiprintf_r>:
 8012868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801286c:	460d      	mov	r5, r1
 801286e:	b09d      	sub	sp, #116	; 0x74
 8012870:	4614      	mov	r4, r2
 8012872:	4698      	mov	r8, r3
 8012874:	4606      	mov	r6, r0
 8012876:	b118      	cbz	r0, 8012880 <_vfiprintf_r+0x18>
 8012878:	6a03      	ldr	r3, [r0, #32]
 801287a:	b90b      	cbnz	r3, 8012880 <_vfiprintf_r+0x18>
 801287c:	f7ff fd36 	bl	80122ec <__sinit>
 8012880:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012882:	07d9      	lsls	r1, r3, #31
 8012884:	d405      	bmi.n	8012892 <_vfiprintf_r+0x2a>
 8012886:	89ab      	ldrh	r3, [r5, #12]
 8012888:	059a      	lsls	r2, r3, #22
 801288a:	d402      	bmi.n	8012892 <_vfiprintf_r+0x2a>
 801288c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801288e:	f7ff fe92 	bl	80125b6 <__retarget_lock_acquire_recursive>
 8012892:	89ab      	ldrh	r3, [r5, #12]
 8012894:	071b      	lsls	r3, r3, #28
 8012896:	d501      	bpl.n	801289c <_vfiprintf_r+0x34>
 8012898:	692b      	ldr	r3, [r5, #16]
 801289a:	b99b      	cbnz	r3, 80128c4 <_vfiprintf_r+0x5c>
 801289c:	4629      	mov	r1, r5
 801289e:	4630      	mov	r0, r6
 80128a0:	f000 fb8a 	bl	8012fb8 <__swsetup_r>
 80128a4:	b170      	cbz	r0, 80128c4 <_vfiprintf_r+0x5c>
 80128a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80128a8:	07dc      	lsls	r4, r3, #31
 80128aa:	d504      	bpl.n	80128b6 <_vfiprintf_r+0x4e>
 80128ac:	f04f 30ff 	mov.w	r0, #4294967295
 80128b0:	b01d      	add	sp, #116	; 0x74
 80128b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128b6:	89ab      	ldrh	r3, [r5, #12]
 80128b8:	0598      	lsls	r0, r3, #22
 80128ba:	d4f7      	bmi.n	80128ac <_vfiprintf_r+0x44>
 80128bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80128be:	f7ff fe7b 	bl	80125b8 <__retarget_lock_release_recursive>
 80128c2:	e7f3      	b.n	80128ac <_vfiprintf_r+0x44>
 80128c4:	2300      	movs	r3, #0
 80128c6:	9309      	str	r3, [sp, #36]	; 0x24
 80128c8:	2320      	movs	r3, #32
 80128ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80128ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80128d2:	2330      	movs	r3, #48	; 0x30
 80128d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012a88 <_vfiprintf_r+0x220>
 80128d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80128dc:	f04f 0901 	mov.w	r9, #1
 80128e0:	4623      	mov	r3, r4
 80128e2:	469a      	mov	sl, r3
 80128e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80128e8:	b10a      	cbz	r2, 80128ee <_vfiprintf_r+0x86>
 80128ea:	2a25      	cmp	r2, #37	; 0x25
 80128ec:	d1f9      	bne.n	80128e2 <_vfiprintf_r+0x7a>
 80128ee:	ebba 0b04 	subs.w	fp, sl, r4
 80128f2:	d00b      	beq.n	801290c <_vfiprintf_r+0xa4>
 80128f4:	465b      	mov	r3, fp
 80128f6:	4622      	mov	r2, r4
 80128f8:	4629      	mov	r1, r5
 80128fa:	4630      	mov	r0, r6
 80128fc:	f7ff ffa1 	bl	8012842 <__sfputs_r>
 8012900:	3001      	adds	r0, #1
 8012902:	f000 80a9 	beq.w	8012a58 <_vfiprintf_r+0x1f0>
 8012906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012908:	445a      	add	r2, fp
 801290a:	9209      	str	r2, [sp, #36]	; 0x24
 801290c:	f89a 3000 	ldrb.w	r3, [sl]
 8012910:	2b00      	cmp	r3, #0
 8012912:	f000 80a1 	beq.w	8012a58 <_vfiprintf_r+0x1f0>
 8012916:	2300      	movs	r3, #0
 8012918:	f04f 32ff 	mov.w	r2, #4294967295
 801291c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012920:	f10a 0a01 	add.w	sl, sl, #1
 8012924:	9304      	str	r3, [sp, #16]
 8012926:	9307      	str	r3, [sp, #28]
 8012928:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801292c:	931a      	str	r3, [sp, #104]	; 0x68
 801292e:	4654      	mov	r4, sl
 8012930:	2205      	movs	r2, #5
 8012932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012936:	4854      	ldr	r0, [pc, #336]	; (8012a88 <_vfiprintf_r+0x220>)
 8012938:	f7ed fc5a 	bl	80001f0 <memchr>
 801293c:	9a04      	ldr	r2, [sp, #16]
 801293e:	b9d8      	cbnz	r0, 8012978 <_vfiprintf_r+0x110>
 8012940:	06d1      	lsls	r1, r2, #27
 8012942:	bf44      	itt	mi
 8012944:	2320      	movmi	r3, #32
 8012946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801294a:	0713      	lsls	r3, r2, #28
 801294c:	bf44      	itt	mi
 801294e:	232b      	movmi	r3, #43	; 0x2b
 8012950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012954:	f89a 3000 	ldrb.w	r3, [sl]
 8012958:	2b2a      	cmp	r3, #42	; 0x2a
 801295a:	d015      	beq.n	8012988 <_vfiprintf_r+0x120>
 801295c:	9a07      	ldr	r2, [sp, #28]
 801295e:	4654      	mov	r4, sl
 8012960:	2000      	movs	r0, #0
 8012962:	f04f 0c0a 	mov.w	ip, #10
 8012966:	4621      	mov	r1, r4
 8012968:	f811 3b01 	ldrb.w	r3, [r1], #1
 801296c:	3b30      	subs	r3, #48	; 0x30
 801296e:	2b09      	cmp	r3, #9
 8012970:	d94d      	bls.n	8012a0e <_vfiprintf_r+0x1a6>
 8012972:	b1b0      	cbz	r0, 80129a2 <_vfiprintf_r+0x13a>
 8012974:	9207      	str	r2, [sp, #28]
 8012976:	e014      	b.n	80129a2 <_vfiprintf_r+0x13a>
 8012978:	eba0 0308 	sub.w	r3, r0, r8
 801297c:	fa09 f303 	lsl.w	r3, r9, r3
 8012980:	4313      	orrs	r3, r2
 8012982:	9304      	str	r3, [sp, #16]
 8012984:	46a2      	mov	sl, r4
 8012986:	e7d2      	b.n	801292e <_vfiprintf_r+0xc6>
 8012988:	9b03      	ldr	r3, [sp, #12]
 801298a:	1d19      	adds	r1, r3, #4
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	9103      	str	r1, [sp, #12]
 8012990:	2b00      	cmp	r3, #0
 8012992:	bfbb      	ittet	lt
 8012994:	425b      	neglt	r3, r3
 8012996:	f042 0202 	orrlt.w	r2, r2, #2
 801299a:	9307      	strge	r3, [sp, #28]
 801299c:	9307      	strlt	r3, [sp, #28]
 801299e:	bfb8      	it	lt
 80129a0:	9204      	strlt	r2, [sp, #16]
 80129a2:	7823      	ldrb	r3, [r4, #0]
 80129a4:	2b2e      	cmp	r3, #46	; 0x2e
 80129a6:	d10c      	bne.n	80129c2 <_vfiprintf_r+0x15a>
 80129a8:	7863      	ldrb	r3, [r4, #1]
 80129aa:	2b2a      	cmp	r3, #42	; 0x2a
 80129ac:	d134      	bne.n	8012a18 <_vfiprintf_r+0x1b0>
 80129ae:	9b03      	ldr	r3, [sp, #12]
 80129b0:	1d1a      	adds	r2, r3, #4
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	9203      	str	r2, [sp, #12]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	bfb8      	it	lt
 80129ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80129be:	3402      	adds	r4, #2
 80129c0:	9305      	str	r3, [sp, #20]
 80129c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012a98 <_vfiprintf_r+0x230>
 80129c6:	7821      	ldrb	r1, [r4, #0]
 80129c8:	2203      	movs	r2, #3
 80129ca:	4650      	mov	r0, sl
 80129cc:	f7ed fc10 	bl	80001f0 <memchr>
 80129d0:	b138      	cbz	r0, 80129e2 <_vfiprintf_r+0x17a>
 80129d2:	9b04      	ldr	r3, [sp, #16]
 80129d4:	eba0 000a 	sub.w	r0, r0, sl
 80129d8:	2240      	movs	r2, #64	; 0x40
 80129da:	4082      	lsls	r2, r0
 80129dc:	4313      	orrs	r3, r2
 80129de:	3401      	adds	r4, #1
 80129e0:	9304      	str	r3, [sp, #16]
 80129e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129e6:	4829      	ldr	r0, [pc, #164]	; (8012a8c <_vfiprintf_r+0x224>)
 80129e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80129ec:	2206      	movs	r2, #6
 80129ee:	f7ed fbff 	bl	80001f0 <memchr>
 80129f2:	2800      	cmp	r0, #0
 80129f4:	d03f      	beq.n	8012a76 <_vfiprintf_r+0x20e>
 80129f6:	4b26      	ldr	r3, [pc, #152]	; (8012a90 <_vfiprintf_r+0x228>)
 80129f8:	bb1b      	cbnz	r3, 8012a42 <_vfiprintf_r+0x1da>
 80129fa:	9b03      	ldr	r3, [sp, #12]
 80129fc:	3307      	adds	r3, #7
 80129fe:	f023 0307 	bic.w	r3, r3, #7
 8012a02:	3308      	adds	r3, #8
 8012a04:	9303      	str	r3, [sp, #12]
 8012a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a08:	443b      	add	r3, r7
 8012a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8012a0c:	e768      	b.n	80128e0 <_vfiprintf_r+0x78>
 8012a0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012a12:	460c      	mov	r4, r1
 8012a14:	2001      	movs	r0, #1
 8012a16:	e7a6      	b.n	8012966 <_vfiprintf_r+0xfe>
 8012a18:	2300      	movs	r3, #0
 8012a1a:	3401      	adds	r4, #1
 8012a1c:	9305      	str	r3, [sp, #20]
 8012a1e:	4619      	mov	r1, r3
 8012a20:	f04f 0c0a 	mov.w	ip, #10
 8012a24:	4620      	mov	r0, r4
 8012a26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a2a:	3a30      	subs	r2, #48	; 0x30
 8012a2c:	2a09      	cmp	r2, #9
 8012a2e:	d903      	bls.n	8012a38 <_vfiprintf_r+0x1d0>
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d0c6      	beq.n	80129c2 <_vfiprintf_r+0x15a>
 8012a34:	9105      	str	r1, [sp, #20]
 8012a36:	e7c4      	b.n	80129c2 <_vfiprintf_r+0x15a>
 8012a38:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a3c:	4604      	mov	r4, r0
 8012a3e:	2301      	movs	r3, #1
 8012a40:	e7f0      	b.n	8012a24 <_vfiprintf_r+0x1bc>
 8012a42:	ab03      	add	r3, sp, #12
 8012a44:	9300      	str	r3, [sp, #0]
 8012a46:	462a      	mov	r2, r5
 8012a48:	4b12      	ldr	r3, [pc, #72]	; (8012a94 <_vfiprintf_r+0x22c>)
 8012a4a:	a904      	add	r1, sp, #16
 8012a4c:	4630      	mov	r0, r6
 8012a4e:	f3af 8000 	nop.w
 8012a52:	4607      	mov	r7, r0
 8012a54:	1c78      	adds	r0, r7, #1
 8012a56:	d1d6      	bne.n	8012a06 <_vfiprintf_r+0x19e>
 8012a58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a5a:	07d9      	lsls	r1, r3, #31
 8012a5c:	d405      	bmi.n	8012a6a <_vfiprintf_r+0x202>
 8012a5e:	89ab      	ldrh	r3, [r5, #12]
 8012a60:	059a      	lsls	r2, r3, #22
 8012a62:	d402      	bmi.n	8012a6a <_vfiprintf_r+0x202>
 8012a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a66:	f7ff fda7 	bl	80125b8 <__retarget_lock_release_recursive>
 8012a6a:	89ab      	ldrh	r3, [r5, #12]
 8012a6c:	065b      	lsls	r3, r3, #25
 8012a6e:	f53f af1d 	bmi.w	80128ac <_vfiprintf_r+0x44>
 8012a72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a74:	e71c      	b.n	80128b0 <_vfiprintf_r+0x48>
 8012a76:	ab03      	add	r3, sp, #12
 8012a78:	9300      	str	r3, [sp, #0]
 8012a7a:	462a      	mov	r2, r5
 8012a7c:	4b05      	ldr	r3, [pc, #20]	; (8012a94 <_vfiprintf_r+0x22c>)
 8012a7e:	a904      	add	r1, sp, #16
 8012a80:	4630      	mov	r0, r6
 8012a82:	f000 f879 	bl	8012b78 <_printf_i>
 8012a86:	e7e4      	b.n	8012a52 <_vfiprintf_r+0x1ea>
 8012a88:	08015f65 	.word	0x08015f65
 8012a8c:	08015f6f 	.word	0x08015f6f
 8012a90:	00000000 	.word	0x00000000
 8012a94:	08012843 	.word	0x08012843
 8012a98:	08015f6b 	.word	0x08015f6b

08012a9c <_printf_common>:
 8012a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012aa0:	4616      	mov	r6, r2
 8012aa2:	4699      	mov	r9, r3
 8012aa4:	688a      	ldr	r2, [r1, #8]
 8012aa6:	690b      	ldr	r3, [r1, #16]
 8012aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012aac:	4293      	cmp	r3, r2
 8012aae:	bfb8      	it	lt
 8012ab0:	4613      	movlt	r3, r2
 8012ab2:	6033      	str	r3, [r6, #0]
 8012ab4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012ab8:	4607      	mov	r7, r0
 8012aba:	460c      	mov	r4, r1
 8012abc:	b10a      	cbz	r2, 8012ac2 <_printf_common+0x26>
 8012abe:	3301      	adds	r3, #1
 8012ac0:	6033      	str	r3, [r6, #0]
 8012ac2:	6823      	ldr	r3, [r4, #0]
 8012ac4:	0699      	lsls	r1, r3, #26
 8012ac6:	bf42      	ittt	mi
 8012ac8:	6833      	ldrmi	r3, [r6, #0]
 8012aca:	3302      	addmi	r3, #2
 8012acc:	6033      	strmi	r3, [r6, #0]
 8012ace:	6825      	ldr	r5, [r4, #0]
 8012ad0:	f015 0506 	ands.w	r5, r5, #6
 8012ad4:	d106      	bne.n	8012ae4 <_printf_common+0x48>
 8012ad6:	f104 0a19 	add.w	sl, r4, #25
 8012ada:	68e3      	ldr	r3, [r4, #12]
 8012adc:	6832      	ldr	r2, [r6, #0]
 8012ade:	1a9b      	subs	r3, r3, r2
 8012ae0:	42ab      	cmp	r3, r5
 8012ae2:	dc26      	bgt.n	8012b32 <_printf_common+0x96>
 8012ae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012ae8:	1e13      	subs	r3, r2, #0
 8012aea:	6822      	ldr	r2, [r4, #0]
 8012aec:	bf18      	it	ne
 8012aee:	2301      	movne	r3, #1
 8012af0:	0692      	lsls	r2, r2, #26
 8012af2:	d42b      	bmi.n	8012b4c <_printf_common+0xb0>
 8012af4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012af8:	4649      	mov	r1, r9
 8012afa:	4638      	mov	r0, r7
 8012afc:	47c0      	blx	r8
 8012afe:	3001      	adds	r0, #1
 8012b00:	d01e      	beq.n	8012b40 <_printf_common+0xa4>
 8012b02:	6823      	ldr	r3, [r4, #0]
 8012b04:	6922      	ldr	r2, [r4, #16]
 8012b06:	f003 0306 	and.w	r3, r3, #6
 8012b0a:	2b04      	cmp	r3, #4
 8012b0c:	bf02      	ittt	eq
 8012b0e:	68e5      	ldreq	r5, [r4, #12]
 8012b10:	6833      	ldreq	r3, [r6, #0]
 8012b12:	1aed      	subeq	r5, r5, r3
 8012b14:	68a3      	ldr	r3, [r4, #8]
 8012b16:	bf0c      	ite	eq
 8012b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012b1c:	2500      	movne	r5, #0
 8012b1e:	4293      	cmp	r3, r2
 8012b20:	bfc4      	itt	gt
 8012b22:	1a9b      	subgt	r3, r3, r2
 8012b24:	18ed      	addgt	r5, r5, r3
 8012b26:	2600      	movs	r6, #0
 8012b28:	341a      	adds	r4, #26
 8012b2a:	42b5      	cmp	r5, r6
 8012b2c:	d11a      	bne.n	8012b64 <_printf_common+0xc8>
 8012b2e:	2000      	movs	r0, #0
 8012b30:	e008      	b.n	8012b44 <_printf_common+0xa8>
 8012b32:	2301      	movs	r3, #1
 8012b34:	4652      	mov	r2, sl
 8012b36:	4649      	mov	r1, r9
 8012b38:	4638      	mov	r0, r7
 8012b3a:	47c0      	blx	r8
 8012b3c:	3001      	adds	r0, #1
 8012b3e:	d103      	bne.n	8012b48 <_printf_common+0xac>
 8012b40:	f04f 30ff 	mov.w	r0, #4294967295
 8012b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b48:	3501      	adds	r5, #1
 8012b4a:	e7c6      	b.n	8012ada <_printf_common+0x3e>
 8012b4c:	18e1      	adds	r1, r4, r3
 8012b4e:	1c5a      	adds	r2, r3, #1
 8012b50:	2030      	movs	r0, #48	; 0x30
 8012b52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012b56:	4422      	add	r2, r4
 8012b58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012b5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012b60:	3302      	adds	r3, #2
 8012b62:	e7c7      	b.n	8012af4 <_printf_common+0x58>
 8012b64:	2301      	movs	r3, #1
 8012b66:	4622      	mov	r2, r4
 8012b68:	4649      	mov	r1, r9
 8012b6a:	4638      	mov	r0, r7
 8012b6c:	47c0      	blx	r8
 8012b6e:	3001      	adds	r0, #1
 8012b70:	d0e6      	beq.n	8012b40 <_printf_common+0xa4>
 8012b72:	3601      	adds	r6, #1
 8012b74:	e7d9      	b.n	8012b2a <_printf_common+0x8e>
	...

08012b78 <_printf_i>:
 8012b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012b7c:	7e0f      	ldrb	r7, [r1, #24]
 8012b7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012b80:	2f78      	cmp	r7, #120	; 0x78
 8012b82:	4691      	mov	r9, r2
 8012b84:	4680      	mov	r8, r0
 8012b86:	460c      	mov	r4, r1
 8012b88:	469a      	mov	sl, r3
 8012b8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012b8e:	d807      	bhi.n	8012ba0 <_printf_i+0x28>
 8012b90:	2f62      	cmp	r7, #98	; 0x62
 8012b92:	d80a      	bhi.n	8012baa <_printf_i+0x32>
 8012b94:	2f00      	cmp	r7, #0
 8012b96:	f000 80d4 	beq.w	8012d42 <_printf_i+0x1ca>
 8012b9a:	2f58      	cmp	r7, #88	; 0x58
 8012b9c:	f000 80c0 	beq.w	8012d20 <_printf_i+0x1a8>
 8012ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012ba8:	e03a      	b.n	8012c20 <_printf_i+0xa8>
 8012baa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012bae:	2b15      	cmp	r3, #21
 8012bb0:	d8f6      	bhi.n	8012ba0 <_printf_i+0x28>
 8012bb2:	a101      	add	r1, pc, #4	; (adr r1, 8012bb8 <_printf_i+0x40>)
 8012bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012bb8:	08012c11 	.word	0x08012c11
 8012bbc:	08012c25 	.word	0x08012c25
 8012bc0:	08012ba1 	.word	0x08012ba1
 8012bc4:	08012ba1 	.word	0x08012ba1
 8012bc8:	08012ba1 	.word	0x08012ba1
 8012bcc:	08012ba1 	.word	0x08012ba1
 8012bd0:	08012c25 	.word	0x08012c25
 8012bd4:	08012ba1 	.word	0x08012ba1
 8012bd8:	08012ba1 	.word	0x08012ba1
 8012bdc:	08012ba1 	.word	0x08012ba1
 8012be0:	08012ba1 	.word	0x08012ba1
 8012be4:	08012d29 	.word	0x08012d29
 8012be8:	08012c51 	.word	0x08012c51
 8012bec:	08012ce3 	.word	0x08012ce3
 8012bf0:	08012ba1 	.word	0x08012ba1
 8012bf4:	08012ba1 	.word	0x08012ba1
 8012bf8:	08012d4b 	.word	0x08012d4b
 8012bfc:	08012ba1 	.word	0x08012ba1
 8012c00:	08012c51 	.word	0x08012c51
 8012c04:	08012ba1 	.word	0x08012ba1
 8012c08:	08012ba1 	.word	0x08012ba1
 8012c0c:	08012ceb 	.word	0x08012ceb
 8012c10:	682b      	ldr	r3, [r5, #0]
 8012c12:	1d1a      	adds	r2, r3, #4
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	602a      	str	r2, [r5, #0]
 8012c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012c20:	2301      	movs	r3, #1
 8012c22:	e09f      	b.n	8012d64 <_printf_i+0x1ec>
 8012c24:	6820      	ldr	r0, [r4, #0]
 8012c26:	682b      	ldr	r3, [r5, #0]
 8012c28:	0607      	lsls	r7, r0, #24
 8012c2a:	f103 0104 	add.w	r1, r3, #4
 8012c2e:	6029      	str	r1, [r5, #0]
 8012c30:	d501      	bpl.n	8012c36 <_printf_i+0xbe>
 8012c32:	681e      	ldr	r6, [r3, #0]
 8012c34:	e003      	b.n	8012c3e <_printf_i+0xc6>
 8012c36:	0646      	lsls	r6, r0, #25
 8012c38:	d5fb      	bpl.n	8012c32 <_printf_i+0xba>
 8012c3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012c3e:	2e00      	cmp	r6, #0
 8012c40:	da03      	bge.n	8012c4a <_printf_i+0xd2>
 8012c42:	232d      	movs	r3, #45	; 0x2d
 8012c44:	4276      	negs	r6, r6
 8012c46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c4a:	485a      	ldr	r0, [pc, #360]	; (8012db4 <_printf_i+0x23c>)
 8012c4c:	230a      	movs	r3, #10
 8012c4e:	e012      	b.n	8012c76 <_printf_i+0xfe>
 8012c50:	682b      	ldr	r3, [r5, #0]
 8012c52:	6820      	ldr	r0, [r4, #0]
 8012c54:	1d19      	adds	r1, r3, #4
 8012c56:	6029      	str	r1, [r5, #0]
 8012c58:	0605      	lsls	r5, r0, #24
 8012c5a:	d501      	bpl.n	8012c60 <_printf_i+0xe8>
 8012c5c:	681e      	ldr	r6, [r3, #0]
 8012c5e:	e002      	b.n	8012c66 <_printf_i+0xee>
 8012c60:	0641      	lsls	r1, r0, #25
 8012c62:	d5fb      	bpl.n	8012c5c <_printf_i+0xe4>
 8012c64:	881e      	ldrh	r6, [r3, #0]
 8012c66:	4853      	ldr	r0, [pc, #332]	; (8012db4 <_printf_i+0x23c>)
 8012c68:	2f6f      	cmp	r7, #111	; 0x6f
 8012c6a:	bf0c      	ite	eq
 8012c6c:	2308      	moveq	r3, #8
 8012c6e:	230a      	movne	r3, #10
 8012c70:	2100      	movs	r1, #0
 8012c72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012c76:	6865      	ldr	r5, [r4, #4]
 8012c78:	60a5      	str	r5, [r4, #8]
 8012c7a:	2d00      	cmp	r5, #0
 8012c7c:	bfa2      	ittt	ge
 8012c7e:	6821      	ldrge	r1, [r4, #0]
 8012c80:	f021 0104 	bicge.w	r1, r1, #4
 8012c84:	6021      	strge	r1, [r4, #0]
 8012c86:	b90e      	cbnz	r6, 8012c8c <_printf_i+0x114>
 8012c88:	2d00      	cmp	r5, #0
 8012c8a:	d04b      	beq.n	8012d24 <_printf_i+0x1ac>
 8012c8c:	4615      	mov	r5, r2
 8012c8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012c92:	fb03 6711 	mls	r7, r3, r1, r6
 8012c96:	5dc7      	ldrb	r7, [r0, r7]
 8012c98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012c9c:	4637      	mov	r7, r6
 8012c9e:	42bb      	cmp	r3, r7
 8012ca0:	460e      	mov	r6, r1
 8012ca2:	d9f4      	bls.n	8012c8e <_printf_i+0x116>
 8012ca4:	2b08      	cmp	r3, #8
 8012ca6:	d10b      	bne.n	8012cc0 <_printf_i+0x148>
 8012ca8:	6823      	ldr	r3, [r4, #0]
 8012caa:	07de      	lsls	r6, r3, #31
 8012cac:	d508      	bpl.n	8012cc0 <_printf_i+0x148>
 8012cae:	6923      	ldr	r3, [r4, #16]
 8012cb0:	6861      	ldr	r1, [r4, #4]
 8012cb2:	4299      	cmp	r1, r3
 8012cb4:	bfde      	ittt	le
 8012cb6:	2330      	movle	r3, #48	; 0x30
 8012cb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012cbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012cc0:	1b52      	subs	r2, r2, r5
 8012cc2:	6122      	str	r2, [r4, #16]
 8012cc4:	f8cd a000 	str.w	sl, [sp]
 8012cc8:	464b      	mov	r3, r9
 8012cca:	aa03      	add	r2, sp, #12
 8012ccc:	4621      	mov	r1, r4
 8012cce:	4640      	mov	r0, r8
 8012cd0:	f7ff fee4 	bl	8012a9c <_printf_common>
 8012cd4:	3001      	adds	r0, #1
 8012cd6:	d14a      	bne.n	8012d6e <_printf_i+0x1f6>
 8012cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8012cdc:	b004      	add	sp, #16
 8012cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ce2:	6823      	ldr	r3, [r4, #0]
 8012ce4:	f043 0320 	orr.w	r3, r3, #32
 8012ce8:	6023      	str	r3, [r4, #0]
 8012cea:	4833      	ldr	r0, [pc, #204]	; (8012db8 <_printf_i+0x240>)
 8012cec:	2778      	movs	r7, #120	; 0x78
 8012cee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012cf2:	6823      	ldr	r3, [r4, #0]
 8012cf4:	6829      	ldr	r1, [r5, #0]
 8012cf6:	061f      	lsls	r7, r3, #24
 8012cf8:	f851 6b04 	ldr.w	r6, [r1], #4
 8012cfc:	d402      	bmi.n	8012d04 <_printf_i+0x18c>
 8012cfe:	065f      	lsls	r7, r3, #25
 8012d00:	bf48      	it	mi
 8012d02:	b2b6      	uxthmi	r6, r6
 8012d04:	07df      	lsls	r7, r3, #31
 8012d06:	bf48      	it	mi
 8012d08:	f043 0320 	orrmi.w	r3, r3, #32
 8012d0c:	6029      	str	r1, [r5, #0]
 8012d0e:	bf48      	it	mi
 8012d10:	6023      	strmi	r3, [r4, #0]
 8012d12:	b91e      	cbnz	r6, 8012d1c <_printf_i+0x1a4>
 8012d14:	6823      	ldr	r3, [r4, #0]
 8012d16:	f023 0320 	bic.w	r3, r3, #32
 8012d1a:	6023      	str	r3, [r4, #0]
 8012d1c:	2310      	movs	r3, #16
 8012d1e:	e7a7      	b.n	8012c70 <_printf_i+0xf8>
 8012d20:	4824      	ldr	r0, [pc, #144]	; (8012db4 <_printf_i+0x23c>)
 8012d22:	e7e4      	b.n	8012cee <_printf_i+0x176>
 8012d24:	4615      	mov	r5, r2
 8012d26:	e7bd      	b.n	8012ca4 <_printf_i+0x12c>
 8012d28:	682b      	ldr	r3, [r5, #0]
 8012d2a:	6826      	ldr	r6, [r4, #0]
 8012d2c:	6961      	ldr	r1, [r4, #20]
 8012d2e:	1d18      	adds	r0, r3, #4
 8012d30:	6028      	str	r0, [r5, #0]
 8012d32:	0635      	lsls	r5, r6, #24
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	d501      	bpl.n	8012d3c <_printf_i+0x1c4>
 8012d38:	6019      	str	r1, [r3, #0]
 8012d3a:	e002      	b.n	8012d42 <_printf_i+0x1ca>
 8012d3c:	0670      	lsls	r0, r6, #25
 8012d3e:	d5fb      	bpl.n	8012d38 <_printf_i+0x1c0>
 8012d40:	8019      	strh	r1, [r3, #0]
 8012d42:	2300      	movs	r3, #0
 8012d44:	6123      	str	r3, [r4, #16]
 8012d46:	4615      	mov	r5, r2
 8012d48:	e7bc      	b.n	8012cc4 <_printf_i+0x14c>
 8012d4a:	682b      	ldr	r3, [r5, #0]
 8012d4c:	1d1a      	adds	r2, r3, #4
 8012d4e:	602a      	str	r2, [r5, #0]
 8012d50:	681d      	ldr	r5, [r3, #0]
 8012d52:	6862      	ldr	r2, [r4, #4]
 8012d54:	2100      	movs	r1, #0
 8012d56:	4628      	mov	r0, r5
 8012d58:	f7ed fa4a 	bl	80001f0 <memchr>
 8012d5c:	b108      	cbz	r0, 8012d62 <_printf_i+0x1ea>
 8012d5e:	1b40      	subs	r0, r0, r5
 8012d60:	6060      	str	r0, [r4, #4]
 8012d62:	6863      	ldr	r3, [r4, #4]
 8012d64:	6123      	str	r3, [r4, #16]
 8012d66:	2300      	movs	r3, #0
 8012d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d6c:	e7aa      	b.n	8012cc4 <_printf_i+0x14c>
 8012d6e:	6923      	ldr	r3, [r4, #16]
 8012d70:	462a      	mov	r2, r5
 8012d72:	4649      	mov	r1, r9
 8012d74:	4640      	mov	r0, r8
 8012d76:	47d0      	blx	sl
 8012d78:	3001      	adds	r0, #1
 8012d7a:	d0ad      	beq.n	8012cd8 <_printf_i+0x160>
 8012d7c:	6823      	ldr	r3, [r4, #0]
 8012d7e:	079b      	lsls	r3, r3, #30
 8012d80:	d413      	bmi.n	8012daa <_printf_i+0x232>
 8012d82:	68e0      	ldr	r0, [r4, #12]
 8012d84:	9b03      	ldr	r3, [sp, #12]
 8012d86:	4298      	cmp	r0, r3
 8012d88:	bfb8      	it	lt
 8012d8a:	4618      	movlt	r0, r3
 8012d8c:	e7a6      	b.n	8012cdc <_printf_i+0x164>
 8012d8e:	2301      	movs	r3, #1
 8012d90:	4632      	mov	r2, r6
 8012d92:	4649      	mov	r1, r9
 8012d94:	4640      	mov	r0, r8
 8012d96:	47d0      	blx	sl
 8012d98:	3001      	adds	r0, #1
 8012d9a:	d09d      	beq.n	8012cd8 <_printf_i+0x160>
 8012d9c:	3501      	adds	r5, #1
 8012d9e:	68e3      	ldr	r3, [r4, #12]
 8012da0:	9903      	ldr	r1, [sp, #12]
 8012da2:	1a5b      	subs	r3, r3, r1
 8012da4:	42ab      	cmp	r3, r5
 8012da6:	dcf2      	bgt.n	8012d8e <_printf_i+0x216>
 8012da8:	e7eb      	b.n	8012d82 <_printf_i+0x20a>
 8012daa:	2500      	movs	r5, #0
 8012dac:	f104 0619 	add.w	r6, r4, #25
 8012db0:	e7f5      	b.n	8012d9e <_printf_i+0x226>
 8012db2:	bf00      	nop
 8012db4:	08015f76 	.word	0x08015f76
 8012db8:	08015f87 	.word	0x08015f87

08012dbc <__sflush_r>:
 8012dbc:	898a      	ldrh	r2, [r1, #12]
 8012dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dc2:	4605      	mov	r5, r0
 8012dc4:	0710      	lsls	r0, r2, #28
 8012dc6:	460c      	mov	r4, r1
 8012dc8:	d458      	bmi.n	8012e7c <__sflush_r+0xc0>
 8012dca:	684b      	ldr	r3, [r1, #4]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	dc05      	bgt.n	8012ddc <__sflush_r+0x20>
 8012dd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	dc02      	bgt.n	8012ddc <__sflush_r+0x20>
 8012dd6:	2000      	movs	r0, #0
 8012dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012dde:	2e00      	cmp	r6, #0
 8012de0:	d0f9      	beq.n	8012dd6 <__sflush_r+0x1a>
 8012de2:	2300      	movs	r3, #0
 8012de4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012de8:	682f      	ldr	r7, [r5, #0]
 8012dea:	6a21      	ldr	r1, [r4, #32]
 8012dec:	602b      	str	r3, [r5, #0]
 8012dee:	d032      	beq.n	8012e56 <__sflush_r+0x9a>
 8012df0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012df2:	89a3      	ldrh	r3, [r4, #12]
 8012df4:	075a      	lsls	r2, r3, #29
 8012df6:	d505      	bpl.n	8012e04 <__sflush_r+0x48>
 8012df8:	6863      	ldr	r3, [r4, #4]
 8012dfa:	1ac0      	subs	r0, r0, r3
 8012dfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012dfe:	b10b      	cbz	r3, 8012e04 <__sflush_r+0x48>
 8012e00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e02:	1ac0      	subs	r0, r0, r3
 8012e04:	2300      	movs	r3, #0
 8012e06:	4602      	mov	r2, r0
 8012e08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e0a:	6a21      	ldr	r1, [r4, #32]
 8012e0c:	4628      	mov	r0, r5
 8012e0e:	47b0      	blx	r6
 8012e10:	1c43      	adds	r3, r0, #1
 8012e12:	89a3      	ldrh	r3, [r4, #12]
 8012e14:	d106      	bne.n	8012e24 <__sflush_r+0x68>
 8012e16:	6829      	ldr	r1, [r5, #0]
 8012e18:	291d      	cmp	r1, #29
 8012e1a:	d82b      	bhi.n	8012e74 <__sflush_r+0xb8>
 8012e1c:	4a29      	ldr	r2, [pc, #164]	; (8012ec4 <__sflush_r+0x108>)
 8012e1e:	410a      	asrs	r2, r1
 8012e20:	07d6      	lsls	r6, r2, #31
 8012e22:	d427      	bmi.n	8012e74 <__sflush_r+0xb8>
 8012e24:	2200      	movs	r2, #0
 8012e26:	6062      	str	r2, [r4, #4]
 8012e28:	04d9      	lsls	r1, r3, #19
 8012e2a:	6922      	ldr	r2, [r4, #16]
 8012e2c:	6022      	str	r2, [r4, #0]
 8012e2e:	d504      	bpl.n	8012e3a <__sflush_r+0x7e>
 8012e30:	1c42      	adds	r2, r0, #1
 8012e32:	d101      	bne.n	8012e38 <__sflush_r+0x7c>
 8012e34:	682b      	ldr	r3, [r5, #0]
 8012e36:	b903      	cbnz	r3, 8012e3a <__sflush_r+0x7e>
 8012e38:	6560      	str	r0, [r4, #84]	; 0x54
 8012e3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012e3c:	602f      	str	r7, [r5, #0]
 8012e3e:	2900      	cmp	r1, #0
 8012e40:	d0c9      	beq.n	8012dd6 <__sflush_r+0x1a>
 8012e42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012e46:	4299      	cmp	r1, r3
 8012e48:	d002      	beq.n	8012e50 <__sflush_r+0x94>
 8012e4a:	4628      	mov	r0, r5
 8012e4c:	f7ff fbe2 	bl	8012614 <_free_r>
 8012e50:	2000      	movs	r0, #0
 8012e52:	6360      	str	r0, [r4, #52]	; 0x34
 8012e54:	e7c0      	b.n	8012dd8 <__sflush_r+0x1c>
 8012e56:	2301      	movs	r3, #1
 8012e58:	4628      	mov	r0, r5
 8012e5a:	47b0      	blx	r6
 8012e5c:	1c41      	adds	r1, r0, #1
 8012e5e:	d1c8      	bne.n	8012df2 <__sflush_r+0x36>
 8012e60:	682b      	ldr	r3, [r5, #0]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d0c5      	beq.n	8012df2 <__sflush_r+0x36>
 8012e66:	2b1d      	cmp	r3, #29
 8012e68:	d001      	beq.n	8012e6e <__sflush_r+0xb2>
 8012e6a:	2b16      	cmp	r3, #22
 8012e6c:	d101      	bne.n	8012e72 <__sflush_r+0xb6>
 8012e6e:	602f      	str	r7, [r5, #0]
 8012e70:	e7b1      	b.n	8012dd6 <__sflush_r+0x1a>
 8012e72:	89a3      	ldrh	r3, [r4, #12]
 8012e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e78:	81a3      	strh	r3, [r4, #12]
 8012e7a:	e7ad      	b.n	8012dd8 <__sflush_r+0x1c>
 8012e7c:	690f      	ldr	r7, [r1, #16]
 8012e7e:	2f00      	cmp	r7, #0
 8012e80:	d0a9      	beq.n	8012dd6 <__sflush_r+0x1a>
 8012e82:	0793      	lsls	r3, r2, #30
 8012e84:	680e      	ldr	r6, [r1, #0]
 8012e86:	bf08      	it	eq
 8012e88:	694b      	ldreq	r3, [r1, #20]
 8012e8a:	600f      	str	r7, [r1, #0]
 8012e8c:	bf18      	it	ne
 8012e8e:	2300      	movne	r3, #0
 8012e90:	eba6 0807 	sub.w	r8, r6, r7
 8012e94:	608b      	str	r3, [r1, #8]
 8012e96:	f1b8 0f00 	cmp.w	r8, #0
 8012e9a:	dd9c      	ble.n	8012dd6 <__sflush_r+0x1a>
 8012e9c:	6a21      	ldr	r1, [r4, #32]
 8012e9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012ea0:	4643      	mov	r3, r8
 8012ea2:	463a      	mov	r2, r7
 8012ea4:	4628      	mov	r0, r5
 8012ea6:	47b0      	blx	r6
 8012ea8:	2800      	cmp	r0, #0
 8012eaa:	dc06      	bgt.n	8012eba <__sflush_r+0xfe>
 8012eac:	89a3      	ldrh	r3, [r4, #12]
 8012eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012eb2:	81a3      	strh	r3, [r4, #12]
 8012eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8012eb8:	e78e      	b.n	8012dd8 <__sflush_r+0x1c>
 8012eba:	4407      	add	r7, r0
 8012ebc:	eba8 0800 	sub.w	r8, r8, r0
 8012ec0:	e7e9      	b.n	8012e96 <__sflush_r+0xda>
 8012ec2:	bf00      	nop
 8012ec4:	dfbffffe 	.word	0xdfbffffe

08012ec8 <_fflush_r>:
 8012ec8:	b538      	push	{r3, r4, r5, lr}
 8012eca:	690b      	ldr	r3, [r1, #16]
 8012ecc:	4605      	mov	r5, r0
 8012ece:	460c      	mov	r4, r1
 8012ed0:	b913      	cbnz	r3, 8012ed8 <_fflush_r+0x10>
 8012ed2:	2500      	movs	r5, #0
 8012ed4:	4628      	mov	r0, r5
 8012ed6:	bd38      	pop	{r3, r4, r5, pc}
 8012ed8:	b118      	cbz	r0, 8012ee2 <_fflush_r+0x1a>
 8012eda:	6a03      	ldr	r3, [r0, #32]
 8012edc:	b90b      	cbnz	r3, 8012ee2 <_fflush_r+0x1a>
 8012ede:	f7ff fa05 	bl	80122ec <__sinit>
 8012ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d0f3      	beq.n	8012ed2 <_fflush_r+0xa>
 8012eea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012eec:	07d0      	lsls	r0, r2, #31
 8012eee:	d404      	bmi.n	8012efa <_fflush_r+0x32>
 8012ef0:	0599      	lsls	r1, r3, #22
 8012ef2:	d402      	bmi.n	8012efa <_fflush_r+0x32>
 8012ef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ef6:	f7ff fb5e 	bl	80125b6 <__retarget_lock_acquire_recursive>
 8012efa:	4628      	mov	r0, r5
 8012efc:	4621      	mov	r1, r4
 8012efe:	f7ff ff5d 	bl	8012dbc <__sflush_r>
 8012f02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f04:	07da      	lsls	r2, r3, #31
 8012f06:	4605      	mov	r5, r0
 8012f08:	d4e4      	bmi.n	8012ed4 <_fflush_r+0xc>
 8012f0a:	89a3      	ldrh	r3, [r4, #12]
 8012f0c:	059b      	lsls	r3, r3, #22
 8012f0e:	d4e1      	bmi.n	8012ed4 <_fflush_r+0xc>
 8012f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f12:	f7ff fb51 	bl	80125b8 <__retarget_lock_release_recursive>
 8012f16:	e7dd      	b.n	8012ed4 <_fflush_r+0xc>

08012f18 <fiprintf>:
 8012f18:	b40e      	push	{r1, r2, r3}
 8012f1a:	b503      	push	{r0, r1, lr}
 8012f1c:	4601      	mov	r1, r0
 8012f1e:	ab03      	add	r3, sp, #12
 8012f20:	4805      	ldr	r0, [pc, #20]	; (8012f38 <fiprintf+0x20>)
 8012f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f26:	6800      	ldr	r0, [r0, #0]
 8012f28:	9301      	str	r3, [sp, #4]
 8012f2a:	f7ff fc9d 	bl	8012868 <_vfiprintf_r>
 8012f2e:	b002      	add	sp, #8
 8012f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f34:	b003      	add	sp, #12
 8012f36:	4770      	bx	lr
 8012f38:	20000088 	.word	0x20000088

08012f3c <__swbuf_r>:
 8012f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f3e:	460e      	mov	r6, r1
 8012f40:	4614      	mov	r4, r2
 8012f42:	4605      	mov	r5, r0
 8012f44:	b118      	cbz	r0, 8012f4e <__swbuf_r+0x12>
 8012f46:	6a03      	ldr	r3, [r0, #32]
 8012f48:	b90b      	cbnz	r3, 8012f4e <__swbuf_r+0x12>
 8012f4a:	f7ff f9cf 	bl	80122ec <__sinit>
 8012f4e:	69a3      	ldr	r3, [r4, #24]
 8012f50:	60a3      	str	r3, [r4, #8]
 8012f52:	89a3      	ldrh	r3, [r4, #12]
 8012f54:	071a      	lsls	r2, r3, #28
 8012f56:	d525      	bpl.n	8012fa4 <__swbuf_r+0x68>
 8012f58:	6923      	ldr	r3, [r4, #16]
 8012f5a:	b31b      	cbz	r3, 8012fa4 <__swbuf_r+0x68>
 8012f5c:	6823      	ldr	r3, [r4, #0]
 8012f5e:	6922      	ldr	r2, [r4, #16]
 8012f60:	1a98      	subs	r0, r3, r2
 8012f62:	6963      	ldr	r3, [r4, #20]
 8012f64:	b2f6      	uxtb	r6, r6
 8012f66:	4283      	cmp	r3, r0
 8012f68:	4637      	mov	r7, r6
 8012f6a:	dc04      	bgt.n	8012f76 <__swbuf_r+0x3a>
 8012f6c:	4621      	mov	r1, r4
 8012f6e:	4628      	mov	r0, r5
 8012f70:	f7ff ffaa 	bl	8012ec8 <_fflush_r>
 8012f74:	b9e0      	cbnz	r0, 8012fb0 <__swbuf_r+0x74>
 8012f76:	68a3      	ldr	r3, [r4, #8]
 8012f78:	3b01      	subs	r3, #1
 8012f7a:	60a3      	str	r3, [r4, #8]
 8012f7c:	6823      	ldr	r3, [r4, #0]
 8012f7e:	1c5a      	adds	r2, r3, #1
 8012f80:	6022      	str	r2, [r4, #0]
 8012f82:	701e      	strb	r6, [r3, #0]
 8012f84:	6962      	ldr	r2, [r4, #20]
 8012f86:	1c43      	adds	r3, r0, #1
 8012f88:	429a      	cmp	r2, r3
 8012f8a:	d004      	beq.n	8012f96 <__swbuf_r+0x5a>
 8012f8c:	89a3      	ldrh	r3, [r4, #12]
 8012f8e:	07db      	lsls	r3, r3, #31
 8012f90:	d506      	bpl.n	8012fa0 <__swbuf_r+0x64>
 8012f92:	2e0a      	cmp	r6, #10
 8012f94:	d104      	bne.n	8012fa0 <__swbuf_r+0x64>
 8012f96:	4621      	mov	r1, r4
 8012f98:	4628      	mov	r0, r5
 8012f9a:	f7ff ff95 	bl	8012ec8 <_fflush_r>
 8012f9e:	b938      	cbnz	r0, 8012fb0 <__swbuf_r+0x74>
 8012fa0:	4638      	mov	r0, r7
 8012fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fa4:	4621      	mov	r1, r4
 8012fa6:	4628      	mov	r0, r5
 8012fa8:	f000 f806 	bl	8012fb8 <__swsetup_r>
 8012fac:	2800      	cmp	r0, #0
 8012fae:	d0d5      	beq.n	8012f5c <__swbuf_r+0x20>
 8012fb0:	f04f 37ff 	mov.w	r7, #4294967295
 8012fb4:	e7f4      	b.n	8012fa0 <__swbuf_r+0x64>
	...

08012fb8 <__swsetup_r>:
 8012fb8:	b538      	push	{r3, r4, r5, lr}
 8012fba:	4b2a      	ldr	r3, [pc, #168]	; (8013064 <__swsetup_r+0xac>)
 8012fbc:	4605      	mov	r5, r0
 8012fbe:	6818      	ldr	r0, [r3, #0]
 8012fc0:	460c      	mov	r4, r1
 8012fc2:	b118      	cbz	r0, 8012fcc <__swsetup_r+0x14>
 8012fc4:	6a03      	ldr	r3, [r0, #32]
 8012fc6:	b90b      	cbnz	r3, 8012fcc <__swsetup_r+0x14>
 8012fc8:	f7ff f990 	bl	80122ec <__sinit>
 8012fcc:	89a3      	ldrh	r3, [r4, #12]
 8012fce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012fd2:	0718      	lsls	r0, r3, #28
 8012fd4:	d422      	bmi.n	801301c <__swsetup_r+0x64>
 8012fd6:	06d9      	lsls	r1, r3, #27
 8012fd8:	d407      	bmi.n	8012fea <__swsetup_r+0x32>
 8012fda:	2309      	movs	r3, #9
 8012fdc:	602b      	str	r3, [r5, #0]
 8012fde:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012fe2:	81a3      	strh	r3, [r4, #12]
 8012fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8012fe8:	e034      	b.n	8013054 <__swsetup_r+0x9c>
 8012fea:	0758      	lsls	r0, r3, #29
 8012fec:	d512      	bpl.n	8013014 <__swsetup_r+0x5c>
 8012fee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ff0:	b141      	cbz	r1, 8013004 <__swsetup_r+0x4c>
 8012ff2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ff6:	4299      	cmp	r1, r3
 8012ff8:	d002      	beq.n	8013000 <__swsetup_r+0x48>
 8012ffa:	4628      	mov	r0, r5
 8012ffc:	f7ff fb0a 	bl	8012614 <_free_r>
 8013000:	2300      	movs	r3, #0
 8013002:	6363      	str	r3, [r4, #52]	; 0x34
 8013004:	89a3      	ldrh	r3, [r4, #12]
 8013006:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801300a:	81a3      	strh	r3, [r4, #12]
 801300c:	2300      	movs	r3, #0
 801300e:	6063      	str	r3, [r4, #4]
 8013010:	6923      	ldr	r3, [r4, #16]
 8013012:	6023      	str	r3, [r4, #0]
 8013014:	89a3      	ldrh	r3, [r4, #12]
 8013016:	f043 0308 	orr.w	r3, r3, #8
 801301a:	81a3      	strh	r3, [r4, #12]
 801301c:	6923      	ldr	r3, [r4, #16]
 801301e:	b94b      	cbnz	r3, 8013034 <__swsetup_r+0x7c>
 8013020:	89a3      	ldrh	r3, [r4, #12]
 8013022:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801302a:	d003      	beq.n	8013034 <__swsetup_r+0x7c>
 801302c:	4621      	mov	r1, r4
 801302e:	4628      	mov	r0, r5
 8013030:	f000 f857 	bl	80130e2 <__smakebuf_r>
 8013034:	89a0      	ldrh	r0, [r4, #12]
 8013036:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801303a:	f010 0301 	ands.w	r3, r0, #1
 801303e:	d00a      	beq.n	8013056 <__swsetup_r+0x9e>
 8013040:	2300      	movs	r3, #0
 8013042:	60a3      	str	r3, [r4, #8]
 8013044:	6963      	ldr	r3, [r4, #20]
 8013046:	425b      	negs	r3, r3
 8013048:	61a3      	str	r3, [r4, #24]
 801304a:	6923      	ldr	r3, [r4, #16]
 801304c:	b943      	cbnz	r3, 8013060 <__swsetup_r+0xa8>
 801304e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013052:	d1c4      	bne.n	8012fde <__swsetup_r+0x26>
 8013054:	bd38      	pop	{r3, r4, r5, pc}
 8013056:	0781      	lsls	r1, r0, #30
 8013058:	bf58      	it	pl
 801305a:	6963      	ldrpl	r3, [r4, #20]
 801305c:	60a3      	str	r3, [r4, #8]
 801305e:	e7f4      	b.n	801304a <__swsetup_r+0x92>
 8013060:	2000      	movs	r0, #0
 8013062:	e7f7      	b.n	8013054 <__swsetup_r+0x9c>
 8013064:	20000088 	.word	0x20000088

08013068 <_sbrk_r>:
 8013068:	b538      	push	{r3, r4, r5, lr}
 801306a:	4d06      	ldr	r5, [pc, #24]	; (8013084 <_sbrk_r+0x1c>)
 801306c:	2300      	movs	r3, #0
 801306e:	4604      	mov	r4, r0
 8013070:	4608      	mov	r0, r1
 8013072:	602b      	str	r3, [r5, #0]
 8013074:	f7ed fcee 	bl	8000a54 <_sbrk>
 8013078:	1c43      	adds	r3, r0, #1
 801307a:	d102      	bne.n	8013082 <_sbrk_r+0x1a>
 801307c:	682b      	ldr	r3, [r5, #0]
 801307e:	b103      	cbz	r3, 8013082 <_sbrk_r+0x1a>
 8013080:	6023      	str	r3, [r4, #0]
 8013082:	bd38      	pop	{r3, r4, r5, pc}
 8013084:	2000f2f0 	.word	0x2000f2f0

08013088 <abort>:
 8013088:	b508      	push	{r3, lr}
 801308a:	2006      	movs	r0, #6
 801308c:	f000 f88e 	bl	80131ac <raise>
 8013090:	2001      	movs	r0, #1
 8013092:	f7ed fc67 	bl	8000964 <_exit>

08013096 <__swhatbuf_r>:
 8013096:	b570      	push	{r4, r5, r6, lr}
 8013098:	460c      	mov	r4, r1
 801309a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801309e:	2900      	cmp	r1, #0
 80130a0:	b096      	sub	sp, #88	; 0x58
 80130a2:	4615      	mov	r5, r2
 80130a4:	461e      	mov	r6, r3
 80130a6:	da0d      	bge.n	80130c4 <__swhatbuf_r+0x2e>
 80130a8:	89a3      	ldrh	r3, [r4, #12]
 80130aa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80130ae:	f04f 0100 	mov.w	r1, #0
 80130b2:	bf0c      	ite	eq
 80130b4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80130b8:	2340      	movne	r3, #64	; 0x40
 80130ba:	2000      	movs	r0, #0
 80130bc:	6031      	str	r1, [r6, #0]
 80130be:	602b      	str	r3, [r5, #0]
 80130c0:	b016      	add	sp, #88	; 0x58
 80130c2:	bd70      	pop	{r4, r5, r6, pc}
 80130c4:	466a      	mov	r2, sp
 80130c6:	f000 f879 	bl	80131bc <_fstat_r>
 80130ca:	2800      	cmp	r0, #0
 80130cc:	dbec      	blt.n	80130a8 <__swhatbuf_r+0x12>
 80130ce:	9901      	ldr	r1, [sp, #4]
 80130d0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80130d4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80130d8:	4259      	negs	r1, r3
 80130da:	4159      	adcs	r1, r3
 80130dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80130e0:	e7eb      	b.n	80130ba <__swhatbuf_r+0x24>

080130e2 <__smakebuf_r>:
 80130e2:	898b      	ldrh	r3, [r1, #12]
 80130e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80130e6:	079d      	lsls	r5, r3, #30
 80130e8:	4606      	mov	r6, r0
 80130ea:	460c      	mov	r4, r1
 80130ec:	d507      	bpl.n	80130fe <__smakebuf_r+0x1c>
 80130ee:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80130f2:	6023      	str	r3, [r4, #0]
 80130f4:	6123      	str	r3, [r4, #16]
 80130f6:	2301      	movs	r3, #1
 80130f8:	6163      	str	r3, [r4, #20]
 80130fa:	b002      	add	sp, #8
 80130fc:	bd70      	pop	{r4, r5, r6, pc}
 80130fe:	ab01      	add	r3, sp, #4
 8013100:	466a      	mov	r2, sp
 8013102:	f7ff ffc8 	bl	8013096 <__swhatbuf_r>
 8013106:	9900      	ldr	r1, [sp, #0]
 8013108:	4605      	mov	r5, r0
 801310a:	4630      	mov	r0, r6
 801310c:	f7ff faf6 	bl	80126fc <_malloc_r>
 8013110:	b948      	cbnz	r0, 8013126 <__smakebuf_r+0x44>
 8013112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013116:	059a      	lsls	r2, r3, #22
 8013118:	d4ef      	bmi.n	80130fa <__smakebuf_r+0x18>
 801311a:	f023 0303 	bic.w	r3, r3, #3
 801311e:	f043 0302 	orr.w	r3, r3, #2
 8013122:	81a3      	strh	r3, [r4, #12]
 8013124:	e7e3      	b.n	80130ee <__smakebuf_r+0xc>
 8013126:	89a3      	ldrh	r3, [r4, #12]
 8013128:	6020      	str	r0, [r4, #0]
 801312a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801312e:	81a3      	strh	r3, [r4, #12]
 8013130:	9b00      	ldr	r3, [sp, #0]
 8013132:	6163      	str	r3, [r4, #20]
 8013134:	9b01      	ldr	r3, [sp, #4]
 8013136:	6120      	str	r0, [r4, #16]
 8013138:	b15b      	cbz	r3, 8013152 <__smakebuf_r+0x70>
 801313a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801313e:	4630      	mov	r0, r6
 8013140:	f000 f84e 	bl	80131e0 <_isatty_r>
 8013144:	b128      	cbz	r0, 8013152 <__smakebuf_r+0x70>
 8013146:	89a3      	ldrh	r3, [r4, #12]
 8013148:	f023 0303 	bic.w	r3, r3, #3
 801314c:	f043 0301 	orr.w	r3, r3, #1
 8013150:	81a3      	strh	r3, [r4, #12]
 8013152:	89a3      	ldrh	r3, [r4, #12]
 8013154:	431d      	orrs	r5, r3
 8013156:	81a5      	strh	r5, [r4, #12]
 8013158:	e7cf      	b.n	80130fa <__smakebuf_r+0x18>

0801315a <_raise_r>:
 801315a:	291f      	cmp	r1, #31
 801315c:	b538      	push	{r3, r4, r5, lr}
 801315e:	4604      	mov	r4, r0
 8013160:	460d      	mov	r5, r1
 8013162:	d904      	bls.n	801316e <_raise_r+0x14>
 8013164:	2316      	movs	r3, #22
 8013166:	6003      	str	r3, [r0, #0]
 8013168:	f04f 30ff 	mov.w	r0, #4294967295
 801316c:	bd38      	pop	{r3, r4, r5, pc}
 801316e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013170:	b112      	cbz	r2, 8013178 <_raise_r+0x1e>
 8013172:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013176:	b94b      	cbnz	r3, 801318c <_raise_r+0x32>
 8013178:	4620      	mov	r0, r4
 801317a:	f000 f853 	bl	8013224 <_getpid_r>
 801317e:	462a      	mov	r2, r5
 8013180:	4601      	mov	r1, r0
 8013182:	4620      	mov	r0, r4
 8013184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013188:	f000 b83a 	b.w	8013200 <_kill_r>
 801318c:	2b01      	cmp	r3, #1
 801318e:	d00a      	beq.n	80131a6 <_raise_r+0x4c>
 8013190:	1c59      	adds	r1, r3, #1
 8013192:	d103      	bne.n	801319c <_raise_r+0x42>
 8013194:	2316      	movs	r3, #22
 8013196:	6003      	str	r3, [r0, #0]
 8013198:	2001      	movs	r0, #1
 801319a:	e7e7      	b.n	801316c <_raise_r+0x12>
 801319c:	2400      	movs	r4, #0
 801319e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80131a2:	4628      	mov	r0, r5
 80131a4:	4798      	blx	r3
 80131a6:	2000      	movs	r0, #0
 80131a8:	e7e0      	b.n	801316c <_raise_r+0x12>
	...

080131ac <raise>:
 80131ac:	4b02      	ldr	r3, [pc, #8]	; (80131b8 <raise+0xc>)
 80131ae:	4601      	mov	r1, r0
 80131b0:	6818      	ldr	r0, [r3, #0]
 80131b2:	f7ff bfd2 	b.w	801315a <_raise_r>
 80131b6:	bf00      	nop
 80131b8:	20000088 	.word	0x20000088

080131bc <_fstat_r>:
 80131bc:	b538      	push	{r3, r4, r5, lr}
 80131be:	4d07      	ldr	r5, [pc, #28]	; (80131dc <_fstat_r+0x20>)
 80131c0:	2300      	movs	r3, #0
 80131c2:	4604      	mov	r4, r0
 80131c4:	4608      	mov	r0, r1
 80131c6:	4611      	mov	r1, r2
 80131c8:	602b      	str	r3, [r5, #0]
 80131ca:	f7ed fc1a 	bl	8000a02 <_fstat>
 80131ce:	1c43      	adds	r3, r0, #1
 80131d0:	d102      	bne.n	80131d8 <_fstat_r+0x1c>
 80131d2:	682b      	ldr	r3, [r5, #0]
 80131d4:	b103      	cbz	r3, 80131d8 <_fstat_r+0x1c>
 80131d6:	6023      	str	r3, [r4, #0]
 80131d8:	bd38      	pop	{r3, r4, r5, pc}
 80131da:	bf00      	nop
 80131dc:	2000f2f0 	.word	0x2000f2f0

080131e0 <_isatty_r>:
 80131e0:	b538      	push	{r3, r4, r5, lr}
 80131e2:	4d06      	ldr	r5, [pc, #24]	; (80131fc <_isatty_r+0x1c>)
 80131e4:	2300      	movs	r3, #0
 80131e6:	4604      	mov	r4, r0
 80131e8:	4608      	mov	r0, r1
 80131ea:	602b      	str	r3, [r5, #0]
 80131ec:	f7ed fc19 	bl	8000a22 <_isatty>
 80131f0:	1c43      	adds	r3, r0, #1
 80131f2:	d102      	bne.n	80131fa <_isatty_r+0x1a>
 80131f4:	682b      	ldr	r3, [r5, #0]
 80131f6:	b103      	cbz	r3, 80131fa <_isatty_r+0x1a>
 80131f8:	6023      	str	r3, [r4, #0]
 80131fa:	bd38      	pop	{r3, r4, r5, pc}
 80131fc:	2000f2f0 	.word	0x2000f2f0

08013200 <_kill_r>:
 8013200:	b538      	push	{r3, r4, r5, lr}
 8013202:	4d07      	ldr	r5, [pc, #28]	; (8013220 <_kill_r+0x20>)
 8013204:	2300      	movs	r3, #0
 8013206:	4604      	mov	r4, r0
 8013208:	4608      	mov	r0, r1
 801320a:	4611      	mov	r1, r2
 801320c:	602b      	str	r3, [r5, #0]
 801320e:	f7ed fb97 	bl	8000940 <_kill>
 8013212:	1c43      	adds	r3, r0, #1
 8013214:	d102      	bne.n	801321c <_kill_r+0x1c>
 8013216:	682b      	ldr	r3, [r5, #0]
 8013218:	b103      	cbz	r3, 801321c <_kill_r+0x1c>
 801321a:	6023      	str	r3, [r4, #0]
 801321c:	bd38      	pop	{r3, r4, r5, pc}
 801321e:	bf00      	nop
 8013220:	2000f2f0 	.word	0x2000f2f0

08013224 <_getpid_r>:
 8013224:	f7ed bb84 	b.w	8000930 <_getpid>

08013228 <_init>:
 8013228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801322a:	bf00      	nop
 801322c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801322e:	bc08      	pop	{r3}
 8013230:	469e      	mov	lr, r3
 8013232:	4770      	bx	lr

08013234 <_fini>:
 8013234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013236:	bf00      	nop
 8013238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801323a:	bc08      	pop	{r3}
 801323c:	469e      	mov	lr, r3
 801323e:	4770      	bx	lr
